
.venv\Lib\site-packages\bandit\cli\config_generator.py:121:def get_config_settings():
.venv\Lib\site-packages\bandit\cli\config_generator.py:144:    yaml_settings = get_config_settings()
.venv\Lib\site-packages\bandit\core\config.py:82:        self._init_settings()
.venv\Lib\site-packages\bandit\core\config.py:117:    def _init_settings(self):
.venv\Lib\site-packages\black\parsing.py:133:            src, filename, feature_version=version, type_comments=type_comments
.venv\Lib\site-packages\black\__init__.py:209:def enable_unstable_feature_callback(
.venv\Lib\site-packages\black\__init__.py:330:    callback=enable_unstable_feature_callback,
.venv\Lib\site-packages\bs4\tests\test_builder_registry.py:84:    def builder_for_features(self, *feature_list):
.venv\Lib\site-packages\bs4\tests\test_builder_registry.py:85:        cls = type('Builder_' + '_'.join(feature_list),
.venv\Lib\site-packages\bs4\tests\test_builder_registry.py:86:                   (object,), {'features' : feature_list})
.venv\Lib\site-packages\bs4\tests\test_builder_registry.py:111:    def test_lookup_gets_most_recent_registration_when_no_feature_specified(self):
.venv\Lib\site-packages\click\shell_completion.py:335:        cwords = split_arg_string(os.environ["COMP_WORDS"])
.venv\Lib\site-packages\click\shell_completion.py:336:        cword = int(os.environ["COMP_CWORD"])
.venv\Lib\site-packages\click\shell_completion.py:357:        cwords = split_arg_string(os.environ["COMP_WORDS"])
.venv\Lib\site-packages\click\shell_completion.py:358:        cword = int(os.environ["COMP_CWORD"])
.venv\Lib\site-packages\click\shell_completion.py:379:        cwords = split_arg_string(os.environ["COMP_WORDS"])
.venv\Lib\site-packages\click\shell_completion.py:380:        incomplete = os.environ["COMP_CWORD"]
.venv\Lib\site-packages\click\testing.py:325:                        del os.environ[key]
.venv\Lib\site-packages\click\testing.py:329:                    os.environ[key] = value
.venv\Lib\site-packages\click\testing.py:335:                        del os.environ[key]
.venv\Lib\site-packages\click\testing.py:339:                    os.environ[key] = value
.venv\Lib\site-packages\colorama\tests\utils.py:45:    os.environ["PYCHARM_HOSTED"] = "1"
.venv\Lib\site-packages\colorama\tests\utils.py:49:    del os.environ["PYCHARM_HOSTED"]
.venv\Lib\site-packages\coverage\cmdline.py:1004:        os.environ["COVERAGE_RUN"] = "true"
.venv\Lib\site-packages\coverage\control.py:696:        self._inorout.warn_conflicting_settings()
.venv\Lib\site-packages\coverage\inorout.py:469:    def warn_conflicting_settings(self) -> None:
.venv\Lib\site-packages\coverage\multiproc.py:96:    os.environ["COVERAGE_RCFILE"] = os.path.abspath(rcfile)
.venv\Lib\site-packages\coverage\patch.py:132:    os.environ["COVERAGE_PROCESS_CONFIG"] = config.serialize()
.venv\Lib\site-packages\dateutil\tz\tz.py:1596:                    name = os.environ["TZ"]
.venv\Lib\site-packages\distlib\database.py:665:    def write_installed_files(self, paths, prefix, dry_run=False):
.venv\Lib\site-packages\distlib\database.py:678:        if dry_run:
.venv\Lib\site-packages\distlib\database.py:761:    def write_shared_locations(self, paths, dry_run=False):
.venv\Lib\site-packages\distlib\database.py:766:        :param dry_run: If True, the action is logged but no file is actually
.venv\Lib\site-packages\distlib\database.py:772:        if dry_run:
.venv\Lib\site-packages\distlib\scripts.py:100:    def __init__(self, source_dir, target_dir, add_launchers=True, dry_run=False, fileop=None):
.venv\Lib\site-packages\distlib\scripts.py:109:        self._fileop = fileop or FileOperator(dry_run)
.venv\Lib\site-packages\distlib\scripts.py:356:            if not self.dry_run:
.venv\Lib\site-packages\distlib\scripts.py:379:            if not self._fileop.dry_run:
.venv\Lib\site-packages\distlib\scripts.py:393:    def dry_run(self):
.venv\Lib\site-packages\distlib\scripts.py:394:        return self._fileop.dry_run
.venv\Lib\site-packages\distlib\scripts.py:396:    @dry_run.setter
.venv\Lib\site-packages\distlib\scripts.py:397:    def dry_run(self, value):
.venv\Lib\site-packages\distlib\scripts.py:398:        self._fileop.dry_run = value
.venv\Lib\site-packages\distlib\util.py:310:    #        result =  os.environ['__PYVENV_LAUNCHER__']
.venv\Lib\site-packages\distlib\util.py:488:    def __init__(self, dry_run=False):
.venv\Lib\site-packages\distlib\util.py:489:        self.dry_run = dry_run
.venv\Lib\site-packages\distlib\util.py:526:        if not self.dry_run:
.venv\Lib\site-packages\distlib\util.py:542:        if not self.dry_run:
.venv\Lib\site-packages\distlib\util.py:555:        if not self.dry_run:
.venv\Lib\site-packages\distlib\util.py:570:                if self.dry_run:
.venv\Lib\site-packages\distlib\util.py:586:            if not self.dry_run:
.venv\Lib\site-packages\distlib\util.py:594:        if not self.dry_run:
.venv\Lib\site-packages\distlib\util.py:614:                if not self.dry_run:
.venv\Lib\site-packages\distlib\util.py:625:                if not self.dry_run:
.venv\Lib\site-packages\distlib\util.py:654:        if not self.dry_run:
.venv\Lib\site-packages\distlib\util.py:1919:        return os.environ["_PYTHON_HOST_PLATFORM"]
.venv\Lib\site-packages\distlib\wheel.py:523:        dry_run = maker.dry_run
.venv\Lib\site-packages\distlib\wheel.py:566:            fileop = FileOperator(dry_run=dry_run)
.venv\Lib\site-packages\distlib\wheel.py:627:                        if not dry_run and row[1]:
.venv\Lib\site-packages\distlib\wheel.py:725:                    p = dist.write_shared_locations(paths, dry_run)
.venv\Lib\site-packages\distlib\wheel.py:730:                    dist.write_installed_files(outfiles, paths['prefix'], dry_run)
.venv\Lib\site-packages\dotenv\main.py:98:                os.environ[k] = v
.venv\Lib\site-packages\git\util.py:122:        value = os.environ[name]
.venv\Lib\site-packages\git\util.py:202:    os.environ[name] = value
.venv\Lib\site-packages\git\util.py:207:            del os.environ[name]
.venv\Lib\site-packages\git\util.py:209:            os.environ[name] = old_value
.venv\Lib\site-packages\git\util.py:374:        path = os.environ["PATH"]
.venv\Lib\site-packages\git\util.py:865:                val = os.environ[evar]
.venv\Lib\site-packages\git\index\base.py:1074:            ``dry_run`` or ``force``.
.venv\Lib\site-packages\git\index\base.py:1096:        was_dry_run = kwargs.pop("dry_run", kwargs.pop("n", None))
.venv\Lib\site-packages\git\index\base.py:1097:        kwargs["dry_run"] = True
.venv\Lib\site-packages\git\index\base.py:1116:        if was_dry_run:
.venv\Lib\site-packages\git\index\base.py:1121:        kwargs.pop("dry_run")
.venv\Lib\site-packages\git\objects\submodule\base.py:646:        dry_run: bool = False,
.venv\Lib\site-packages\git\objects\submodule\base.py:674:        :param dry_run:
.venv\Lib\site-packages\git\objects\submodule\base.py:689:            Unless `dry_run` is set as well, `keep_going` could cause
.venv\Lib\site-packages\git\objects\submodule\base.py:691:            In conjunction with `dry_run`, it can be useful to anticipate all errors
.venv\Lib\site-packages\git\objects\submodule\base.py:732:        if dry_run:
.venv\Lib\site-packages\git\objects\submodule\base.py:737:        if dry_run:
.venv\Lib\site-packages\git\objects\submodule\base.py:761:                    if not dry_run:
.venv\Lib\site-packages\git\objects\submodule\base.py:783:                if not dry_run and osp.isdir(checkout_module_abspath):
.venv\Lib\site-packages\git\objects\submodule\base.py:802:                if not dry_run:
.venv\Lib\site-packages\git\objects\submodule\base.py:826:                if not dry_run:
.venv\Lib\site-packages\git\objects\submodule\base.py:856:                # END handle dry_run
.venv\Lib\site-packages\git\objects\submodule\base.py:867:            # END handle dry_run
.venv\Lib\site-packages\git\objects\submodule\base.py:890:            # Handles dry_run.
.venv\Lib\site-packages\git\objects\submodule\base.py:932:                if not dry_run and may_reset:
.venv\Lib\site-packages\git\objects\submodule\base.py:959:            # In dry_run mode, the module might not exist.
.venv\Lib\site-packages\git\objects\submodule\base.py:967:                        dry_run=dry_run,
.venv\Lib\site-packages\git\objects\submodule\base.py:1103:        dry_run: bool = False,
.venv\Lib\site-packages\git\objects\submodule\base.py:1128:        :param dry_run:
.venv\Lib\site-packages\git\objects\submodule\base.py:1156:            csm.remove(module, force, configuration, dry_run)
.venv\Lib\site-packages\git\objects\submodule\base.py:1159:        if configuration and not dry_run and nc > 0:
.venv\Lib\site-packages\git\objects\submodule\base.py:1185:                if not dry_run:
.venv\Lib\site-packages\git\objects\submodule\base.py:1227:                if not dry_run:
.venv\Lib\site-packages\git\objects\submodule\base.py:1236:            if not dry_run and osp.isdir(git_dir):
.venv\Lib\site-packages\git\objects\submodule\base.py:1243:        if not dry_run:
.venv\Lib\site-packages\git\objects\submodule\base.py:1248:        if configuration and not dry_run:
.venv\Lib\site-packages\git\objects\submodule\root.py:87:        dry_run: bool = False,
.venv\Lib\site-packages\git\objects\submodule\root.py:138:        :param dry_run:
.venv\Lib\site-packages\git\objects\submodule\root.py:144:            Unless `dry_run` is set as well, `keep_going` could cause
.venv\Lib\site-packages\git\objects\submodule\root.py:146:            In conjunction with `dry_run`, this can be useful to anticipate all errors
.venv\Lib\site-packages\git\objects\submodule\root.py:161:        if dry_run:
.venv\Lib\site-packages\git\objects\submodule\root.py:213:                    dry_run=dry_run,
.venv\Lib\site-packages\git\objects\submodule\root.py:241:                    if not dry_run:
.venv\Lib\site-packages\git\objects\submodule\root.py:243:                    # END handle dry_run
.venv\Lib\site-packages\git\objects\submodule\root.py:273:                            if not dry_run:
.venv\Lib\site-packages\git\objects\submodule\root.py:355:                            # END handle dry_run
.venv\Lib\site-packages\git\objects\submodule\root.py:378:                        if not dry_run:
.venv\Lib\site-packages\git\objects\submodule\root.py:406:                        # END handle dry_run
.venv\Lib\site-packages\git\objects\submodule\root.py:432:                dry_run=dry_run,
.venv\Lib\site-packages\git\objects\submodule\root.py:442:                # The module would exist by now if we are not in dry_run mode.
.venv\Lib\site-packages\git\objects\submodule\root.py:450:                        dry_run=dry_run,
.venv\Lib\site-packages\git\objects\submodule\root.py:454:                # END handle dry_run
.venv\Lib\site-packages\gitdb\db\loose.py:248:        # END handle dry_run
.venv\Lib\site-packages\h2\connection.py:353:        self.local_settings = Settings(
.venv\Lib\site-packages\h2\connection.py:361:        self.remote_settings = Settings(client=not self.config.client_side)
.venv\Lib\site-packages\h2\connection.py:1108:    def update_settings(self, new_settings: dict[SettingCodes | int, int]) -> None:
.venv\Lib\site-packages\h2\connection.py:1427:    def _acknowledge_settings(self) -> list[Frame]:
.venv\Lib\site-packages\h2\connection.py:1443:            self._flow_control_change_from_settings(
.venv\Lib\site-packages\h2\connection.py:1464:    def _flow_control_change_from_settings(self, old_value: int | None, new_value: int) -> None:
.venv\Lib\site-packages\h2\connection.py:1482:    def _inbound_flow_control_change_from_settings(self, old_value: int | None, new_value: int) -> None:
.venv\Lib\site-packages\h2\connection.py:1493:            stream._inbound_flow_control_change_from_settings(delta)
.venv\Lib\site-packages\h2\connection.py:1776:            RemoteSettingsChanged.from_settings(
.venv\Lib\site-packages\h2\connection.py:1780:        frames = self._acknowledge_settings()
.venv\Lib\site-packages\h2\connection.py:1987:            self._inbound_flow_control_change_from_settings(
.venv\Lib\site-packages\h2\events.py:380:    def from_settings(cls,
.venv\Lib\site-packages\h2\settings.py:93:class Settings(MutableMapping[Union[SettingCodes, int], int]):
.venv\Lib\site-packages\h2\stream.py:1395:    def _inbound_flow_control_change_from_settings(self, delta: int) -> None:
.venv\Lib\site-packages\httpcore\_async\http2.py:197:        self._h2_state.local_settings = h2.settings.Settings(
.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:53:        socksio.socks5.SOCKS5AuthMethod.NO_AUTH_REQUIRED
.venv\Lib\site-packages\httpcore\_sync\http2.py:197:        self._h2_state.local_settings = h2.settings.Settings(
.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:53:        socksio.socks5.SOCKS5AuthMethod.NO_AUTH_REQUIRED
.venv\Lib\site-packages\httpx\_utils.py:96:        ssl_file = Path(os.environ["SSL_CERT_FILE"])
.venv\Lib\site-packages\httpx\_utils.py:100:        ssl_path = Path(os.environ["SSL_CERT_DIR"])
.venv\Lib\site-packages\isort\exceptions.py:158:class UnsupportedSettings(ISortError):
.venv\Lib\site-packages\isort\settings.py:528:            raise UnsupportedSettings(unsupported_config_errors)
.venv\Lib\site-packages\mypy\config_parser.py:272:    os.environ["MYPY_CONFIG_FILE_DIR"] = os.path.dirname(os.path.abspath(config_file))
.venv\Lib\site-packages\mypy\defaults.py:21:    USER_CONFIG_FILES.insert(0, os.path.join(os.environ["XDG_CONFIG_HOME"], "mypy/config"))
.venv\Lib\site-packages\mypy\fastparse.py:133:    source: str | bytes, filename: str, mode: str, feature_version: int = PY_MINOR_VERSION
.venv\Lib\site-packages\mypy\fastparse.py:140:        feature_version=feature_version,
.venv\Lib\site-packages\mypy\fastparse.py:215:        feature_version = defaults.PYTHON3_VERSION[1]
.venv\Lib\site-packages\mypy\fastparse.py:216:        if options.python_version[0] == 3 and options.python_version[1] > feature_version:
.venv\Lib\site-packages\mypy\fastparse.py:217:            feature_version = options.python_version[1]
.venv\Lib\site-packages\mypy\fastparse.py:220:        feature_version = options.python_version[1]
.venv\Lib\site-packages\mypy\fastparse.py:225:            ast = ast3_parse(source, fnam, "exec", feature_version=feature_version)
.venv\Lib\site-packages\mypy\fastparse.py:245:        if feature_version > sys.version_info.minor and message.startswith("invalid syntax"):
.venv\Lib\site-packages\mypy\semanal.py:6513:    def incomplete_feature_enabled(self, feature: str, ctx: Context) -> bool:
.venv\Lib\site-packages\mypy\semanal_shared.py:103:    def incomplete_feature_enabled(self, feature: str, ctx: Context) -> bool:
.venv\Lib\site-packages\numpy\conftest.py:44:os.environ["NUMPY_EXPERIMENTAL_DTYPE_API"] = "1"
.venv\Lib\site-packages\numpy\conftest.py:70:        os.environ['NPY_AVAILABLE_MEM'] = available_mem
.venv\Lib\site-packages\numpy\core\__init__.py:20:        os.environ[envkey] = '1'
.venv\Lib\site-packages\numpy\core\__init__.py:53:        del os.environ[envkey]
.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:79:        for feature_name in self.features:
.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:80:            cpu_have = self.cpu_have(feature_name)
.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:81:            npy_have = __cpu_features__.get(feature_name)
.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:82:            assert_features_equal(npy_have, cpu_have, feature_name)
.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:84:    def cpu_have(self, feature_name):
.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:85:        map_names = self.features_map.get(feature_name, feature_name)
.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:191:    def test_runtime_feature_selection(self):
.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:276:    def test_impossible_feature_disable(self):
.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:293:    def test_impossible_feature_enable(self):
.venv\Lib\site-packages\numpy\core\tests\test_scalarmath.py:115:@settings(max_examples=10000, deadline=2000)
.venv\Lib\site-packages\numpy\distutils\armccompiler.py:13:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\numpy\distutils\armccompiler.py:14:        UnixCCompiler.__init__(self, verbose, dry_run, force)
.venv\Lib\site-packages\numpy\distutils\ccompiler.py:756:                  dry_run=0,
.venv\Lib\site-packages\numpy\distutils\ccompiler.py:792:    compiler = klass(None, dry_run, force)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:139:            Default is True. see `feature_detect()`.
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:159:            least one applicable flag. see `feature_can_autovec()`
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:740:            os.environ["path"] = self._ccompiler._paths
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:743:            os.environ["path"] = old_path
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1231:    feature_supported : dict
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1236:    feature_min : set
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1241:        if hasattr(self, "feature_is_cached"):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1243:        self.feature_supported = pfeatures = self.conf_features_partial()
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1244:        for feature_name in list(pfeatures.keys()):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1245:            feature  = pfeatures[feature_name]
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1246:            cfeature = self.conf_features[feature_name]
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1252:                pfeatures.pop(feature_name)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1254:                    "feature '%s' is disabled," % feature_name,
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1266:        self.feature_min = set()
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1269:            if F in self.feature_supported:
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1270:                self.feature_min.add(F)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1272:        self.feature_is_cached = True
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1274:    def feature_names(self, names=None, force_flags=None, macros=[]):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1300:            names = self.feature_supported.keys()
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1303:            if self.feature_is_supported(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1309:    def feature_is_exist(self, name):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1322:    def feature_sorted(self, names, reverse=False):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1339:                return self.feature_supported[k]["interest"]
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1341:            rank = max([self.feature_supported[f]["interest"] for f in k])
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1348:    def feature_implies(self, names, keep_origins=False):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1364:        >>> self.feature_implies("SSE3")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1366:        >>> self.feature_implies("SSE2")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1368:        >>> self.feature_implies("SSE2", keep_origins=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1374:            d = self.feature_supported[name]
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1397:    def feature_implies_c(self, names):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1398:        """same as feature_implies() but combining 'names'"""
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1403:        return names.union(self.feature_implies(names))
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1405:    def feature_ahead(self, names):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1421:        >>> self.feature_ahead(["SSE2", "SSE3", "SSE41"])
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1425:        >>> self.feature_ahead(["SSE2", "SSE3", "SSE41", "AVX2", "FMA3"])
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1428:        >>> self.feature_ahead(["SSE2", "SSE3", "SSE41", "AVX2", "FMA3"])
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1435:        implies = self.feature_implies(names, keep_origins=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1440:            ahead = self.feature_sorted(names, reverse=True)[:1]
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1443:    def feature_untied(self, names):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1445:        same as 'feature_ahead()' but if both features implied each other
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1459:        >>> self.feature_untied(["SSE2", "SSE3", "SSE41"])
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1462:        >>> self.feature_untied(["SSE2", "SSE3", "SSE41", "FMA3", "AVX2"])
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1471:            implies = self.feature_implies(n)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1474:                if nn in implies and n in self.feature_implies(nn)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1477:                tied = self.feature_sorted(tied + [n])
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1484:    def feature_get_til(self, names, keyisfalse):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1486:        same as `feature_implies_c()` but stop collecting implied
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1493:            tnames = self.feature_implies_c(tnames)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1494:            tnames = self.feature_sorted(tnames, reverse=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1496:                if not self.feature_supported[n].get(keyisfalse, True):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1507:        names = self.feature_ahead(names)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1509:        return self.feature_sorted(names)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1511:    def feature_detect(self, names):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1516:        names = self.feature_get_til(names, "implies_detect")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1519:            d = self.feature_supported[n]
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1524:    def feature_flags(self, names):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1529:        names = self.feature_sorted(self.feature_implies_c(names))
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1532:            d = self.feature_supported[n]
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1540:    def feature_test(self, name, force_flags=None, macros=[]):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1551:            If None(default), the returned flags from `feature_flags()`
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1558:            force_flags = self.feature_flags(name)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1580:    def feature_is_supported(self, name, force_flags=None, macros=[]):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1599:        supported = name in self.feature_supported
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1601:            for impl in self.feature_implies(name):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1602:                if not self.feature_test(impl, force_flags, macros=macros):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1604:            if not self.feature_test(name, force_flags, macros=macros):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1609:    def feature_can_autovec(self, name):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1614:        d = self.feature_supported[name]
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1624:    def feature_extra_checks(self, name):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1635:        d = self.feature_supported[name]
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1641:        flags = self.feature_flags(name)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1662:    def feature_c_preprocessor(self, feature_name, tabs=0):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1668:        'feature_name': str
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1679:        >>> self.feature_c_preprocessor("SSE3")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1684:        assert(feature_name.isupper())
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1685:        feature = self.feature_supported.get(feature_name)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1689:            "/** %s **/" % feature_name,
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1690:            "#define %sHAVE_%s 1" % (self.conf_c_prefix, feature_name)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1697:        extra_defs += self.feature_extra_checks(feature_name)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1798:            baseline_names = self.feature_names(cpu_baseline)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1799:            self.parse_baseline_flags = self.feature_flags(baseline_names)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1800:            self.parse_baseline_names = self.feature_sorted(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1801:                self.feature_implies_c(baseline_names)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1812:            self.parse_dispatch_names = self.feature_sorted(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1813:                self.feature_names(cpu_dispatch)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1927:                features_to = self.feature_names(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1931:                features_to = self.feature_supported.keys()
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1933:                features_to = self.feature_min
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1935:                if TOK in self.feature_supported:
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1938:                    if not self.feature_is_exist(TOK):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2016:                if not self.feature_is_exist(TOK):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2038:        final_targets = self.feature_untied(final_targets)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2108:            self.feature_is_exist(tar) for tar in targets
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2119:        targets = self.feature_ahead(targets)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2123:        targets = self.feature_sorted(targets)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2160:        final_targets = self.feature_sorted(final_targets, reverse=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2198:                can = self.feature_can_autovec(tar)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2201:                    self.feature_can_autovec(t)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2334:                flags = tuple(extra_flags + self.feature_flags(tar))
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2416:                baseline_pre += self.feature_c_preprocessor(name, tabs=1) + '\n'
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2425:                    pfx=self.conf_c_prefix_, name=name, pre=self.feature_c_preprocessor(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2473:            extra_checks += self.feature_extra_checks(name)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2503:            for tar in self.feature_sorted(target_sources):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2510:            for tar in self.feature_sorted(target_sources):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2513:                flags = ' '.join(self.feature_flags(tar))
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2514:                implies = ' '.join(self.feature_sorted(self.feature_implies(tar)))
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2515:                detect = ' '.join(self.feature_detect(tar))
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2518:                    extra_checks += self.feature_extra_checks(name)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2564:        features = self.feature_sorted(self.feature_implies_c(target))
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2609:            req_detect = self.feature_detect(tar)
.venv\Lib\site-packages\numpy\distutils\exec_command.py:175:        os.environ[name] = value or ''
.venv\Lib\site-packages\numpy\distutils\fujitsuccompiler.py:13:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\numpy\distutils\fujitsuccompiler.py:14:        UnixCCompiler.__init__(self, verbose, dry_run, force)
.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:16:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:17:        UnixCCompiler.__init__(self, verbose, dry_run, force)
.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:56:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:57:        UnixCCompiler.__init__(self, verbose, dry_run, force)
.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:86:        def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:87:            MSVCCompiler.__init__(self, verbose, dry_run, force)
.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:108:        def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:109:            MSVCCompiler.__init__(self, verbose, dry_run, force)
.venv\Lib\site-packages\numpy\distutils\mingw32ccompiler.py:54:                  dry_run=0,
.venv\Lib\site-packages\numpy\distutils\mingw32ccompiler.py:58:                                                            dry_run, force)
.venv\Lib\site-packages\numpy\distutils\mingw32ccompiler.py:201:        lib_dirs.append(os.path.join(os.environ['SYSTEMROOT'], 'System32'))
.venv\Lib\site-packages\numpy\distutils\mingw32ccompiler.py:275:        for path in [sys.prefix] + os.environ['PATH'].split(';'):
.venv\Lib\site-packages\numpy\distutils\misc_util.py:1820:            os.environ['PATH'] = path
.venv\Lib\site-packages\numpy\distutils\msvc9compiler.py:40:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\numpy\distutils\msvc9compiler.py:41:        _MSVCCompiler.__init__(self, verbose, dry_run, force)
.venv\Lib\site-packages\numpy\distutils\msvc9compiler.py:51:        os.environ['lib'] = _merge(environ_lib, os.environ['lib'])
.venv\Lib\site-packages\numpy\distutils\msvc9compiler.py:52:        os.environ['include'] = _merge(environ_include, os.environ['include'])
.venv\Lib\site-packages\numpy\distutils\msvccompiler.py:40:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\numpy\distutils\msvccompiler.py:41:        _MSVCCompiler.__init__(self, verbose, dry_run, force)
.venv\Lib\site-packages\numpy\distutils\msvccompiler.py:51:        os.environ['lib'] = _merge(environ_lib, os.environ['lib'])
.venv\Lib\site-packages\numpy\distutils\msvccompiler.py:52:        os.environ['include'] = _merge(environ_include, os.environ['include'])
.venv\Lib\site-packages\numpy\distutils\pathccompiler.py:13:    def __init__ (self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\numpy\distutils\pathccompiler.py:14:        UnixCCompiler.__init__ (self, verbose, dry_run, force)
.venv\Lib\site-packages\numpy\distutils\system_info.py:385:    2) Users HOME directory (os.environ['HOME'])
.venv\Lib\site-packages\numpy\distutils\system_info.py:894:            d = os.environ[env_var]
.venv\Lib\site-packages\numpy\distutils\system_info.py:1969:        info['extra_link_args'] = os.environ['NPY_LAPACK_LIBS'].split()
.venv\Lib\site-packages\numpy\distutils\system_info.py:2136:        info['extra_link_args'] = os.environ['NPY_BLAS_LIBS'].split()
.venv\Lib\site-packages\numpy\distutils\system_info.py:2140:                                        os.environ['NPY_CBLAS_LIBS'].split())
.venv\Lib\site-packages\numpy\distutils\system_info.py:2859:        os.environ['NUMERIX'] = which[0]
.venv\Lib\site-packages\numpy\distutils\system_info.py:2968:            return os.environ[self.config_env_var]
.venv\Lib\site-packages\numpy\distutils\unixccompiler.py:34:        opt = shlex.join(shlex.split(os.environ['OPT']))
.venv\Lib\site-packages\numpy\distutils\command\build_clib.py:104:                                     dry_run=self.dry_run,
.venv\Lib\site-packages\numpy\distutils\command\build_clib.py:151:                                             dry_run=self.dry_run,
.venv\Lib\site-packages\numpy\distutils\command\build_clib.py:263:                                      dry_run=self.dry_run,
.venv\Lib\site-packages\numpy\distutils\command\build_ext.py:137:                                     dry_run=self.dry_run,
.venv\Lib\site-packages\numpy\distutils\command\build_ext.py:275:                                              dry_run=self.dry_run,
.venv\Lib\site-packages\numpy\distutils\command\build_ext.py:290:                                               dry_run=self.dry_run,
.venv\Lib\site-packages\numpy\distutils\command\build_ext.py:313:                                               dry_run=self.dry_run,
.venv\Lib\site-packages\numpy\distutils\command\config.py:80:                                           dry_run=self.dry_run, force=1,
.venv\Lib\site-packages\numpy\distutils\fcompiler\gnu.py:130:                os.environ['MACOSX_DEPLOYMENT_TARGET'] = str(target)
.venv\Lib\site-packages\numpy\distutils\fcompiler\__init__.py:876:                  dry_run=0,
.venv\Lib\site-packages\numpy\distutils\fcompiler\__init__.py:908:    compiler = klass(verbose=verbose, dry_run=dry_run, force=force)
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt.py:341:        # on it instead of testing 'feature_implies()'' directly
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:40:        for feature_name, feature in conf_all.items():
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:43:                conf_all, feature_name, feature
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:47:        for feature_name, feature in conf_partial.items():
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:50:                conf_partial, feature_name, feature
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:54:    def test_feature(self, log, search_in, feature_name, feature_dict):
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:58:        ).format(log, feature_name, self.cc_march, self.cc_name)
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:60:        if not feature_name.isupper():
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:63:        for option, val in feature_dict.items():
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:67:        self.test_implies(error_msg, search_in, feature_name, feature_dict)
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:68:        self.test_group(error_msg, search_in, feature_name, feature_dict)
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:69:        self.test_extra_checks(error_msg, search_in, feature_name, feature_dict)
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:107:    def test_implies(self, error_msg, search_in, feature_name, feature_dict):
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:108:        if feature_dict.get("disabled") is not None:
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:110:        implies = feature_dict.get("implies", "")
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:116:        if feature_name in implies:
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:127:    def test_group(self, error_msg, search_in, feature_name, feature_dict):
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:128:        if feature_dict.get("disabled") is not None:
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:130:        group = feature_dict.get("group", "")
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:144:    def test_extra_checks(self, error_msg, search_in, feature_name, feature_dict):
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:145:        if feature_dict.get("disabled") is not None:
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:147:        extra_checks = feature_dict.get("extra_checks", "")
.venv\Lib\site-packages\numpy\distutils\tests\test_exec_command.py:131:            os.environ['BBB'] = 'Hi'
.venv\Lib\site-packages\numpy\distutils\tests\test_exec_command.py:144:            del os.environ['BBB']
.venv\Lib\site-packages\pandas\conftest.py:204:    # if it really is slow add `@settings(deadline=...)` with a working value,
.venv\Lib\site-packages\pandas\tests\io\pytables\test_file_handling.py:173:def test_complibs_default_settings(tmp_path, setup_path):
.venv\Lib\site-packages\pandas\tests\plotting\common.py:436:def _check_grid_settings(obj, kinds, kws={}):
.venv\Lib\site-packages\pandas\tests\plotting\test_series.py:748:    def test_series_grid_settings(self):
.venv\Lib\site-packages\pandas\tests\plotting\test_series.py:751:        _check_grid_settings(
.venv\Lib\site-packages\pandas\tests\plotting\frame\test_frame.py:2193:    def test_df_grid_settings(self):
.venv\Lib\site-packages\pandas\tests\plotting\frame\test_frame.py:2195:        _check_grid_settings(
.venv\Lib\site-packages\pandas\_testing\contexts.py:81:                del os.environ["TZ"]
.venv\Lib\site-packages\pandas\_testing\contexts.py:85:            os.environ["TZ"] = tz
.venv\Lib\site-packages\pip\_internal\build_env.py:269:                os.environ[varname] = old_value
.venv\Lib\site-packages\pip\_internal\cli\autocompletion.py:26:    cwords = os.environ["COMP_WORDS"].split()[1:]
.venv\Lib\site-packages\pip\_internal\cli\autocompletion.py:27:    cword = int(os.environ["COMP_CWORD"])
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:214:            os.environ["PIP_NO_INPUT"] = "1"
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:217:            os.environ["PIP_EXISTS_ACTION"] = " ".join(options.exists_action)
.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:97:        if not options.dry_run and dist_restriction_set and not options.target_dir:
.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:876:def _handle_config_settings(
.venv\Lib\site-packages\pip\_internal\cli\main_parser.py:98:        os.environ["_PIP_RUNNING_IN_SUBPROCESS"] = "1"
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:284:            return os.environ["VISUAL"]
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:286:            return os.environ["EDITOR"]
.venv\Lib\site-packages\pip\_internal\commands\install.py:97:            dest="dry_run",
.venv\Lib\site-packages\pip\_internal\commands\install.py:217:        self.cmd_opts.add_option(cmdoptions.config_settings())
.venv\Lib\site-packages\pip\_internal\commands\install.py:291:            not (options.dry_run and options.json_report_file)
.venv\Lib\site-packages\pip\_internal\commands\install.py:405:            if options.dry_run:
.venv\Lib\site-packages\pip\_internal\commands\lock.py:75:        self.cmd_opts.add_option(cmdoptions.config_settings())
.venv\Lib\site-packages\pip\_internal\commands\wheel.py:78:        self.cmd_opts.add_option(cmdoptions.config_settings())
.venv\Lib\site-packages\pip\_internal\metadata\__init__.py:49:        return bool(strtobool(os.environ["_PIP_USE_IMPORTLIB_METADATA"]))
.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:62:    feature_flag: str | None = None,
.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:77:    feature_flag:
.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:78:        Command-line flag of the form --use-feature={feature_flag} for testing
.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:103:            feature_flag,
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:100:    def __init__(self, source_dir, target_dir, add_launchers=True, dry_run=False, fileop=None):
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:109:        self._fileop = fileop or FileOperator(dry_run)
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:356:            if not self.dry_run:
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:379:            if not self._fileop.dry_run:
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:393:    def dry_run(self):
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:394:        return self._fileop.dry_run
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:396:    @dry_run.setter
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:397:    def dry_run(self, value):
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:398:        self._fileop.dry_run = value
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:310:    #        result =  os.environ['__PYVENV_LAUNCHER__']
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:488:    def __init__(self, dry_run=False):
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:489:        self.dry_run = dry_run
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:526:        if not self.dry_run:
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:542:        if not self.dry_run:
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:555:        if not self.dry_run:
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:570:                if self.dry_run:
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:586:            if not self.dry_run:
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:594:        if not self.dry_run:
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:614:                if not self.dry_run:
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:625:                if not self.dry_run:
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:654:        if not self.dry_run:
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1919:        return os.environ["_PYTHON_HOST_PLATFORM"]
.venv\Lib\site-packages\pip\_vendor\pkg_resources\__init__.py:1450:        if os.name == 'nt' and not path.startswith(os.environ['windir']):
.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:167:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Documents")  # noqa: PTH118
.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:170:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Downloads")  # noqa: PTH118
.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:173:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Pictures")  # noqa: PTH118
.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:176:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Videos")  # noqa: PTH118
.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:179:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Music")  # noqa: PTH118
.venv\Lib\site-packages\pip\_vendor\pyproject_hooks\_in_process\_in_process.py:61:    ep = os.environ["_PYPROJECT_HOOKS_BUILD_BACKEND"]
.venv\Lib\site-packages\pip\_vendor\requests\sessions.py:579:        settings = self.merge_environment_settings(
.venv\Lib\site-packages\pip\_vendor\requests\sessions.py:750:    def merge_environment_settings(self, url, proxies, stream, verify, cert):
.venv\Lib\site-packages\pip\_vendor\requests\utils.py:744:        os.environ[env_name] = value
.venv\Lib\site-packages\pip\_vendor\requests\utils.py:750:                del os.environ[env_name]
.venv\Lib\site-packages\pip\_vendor\requests\utils.py:752:                os.environ[env_name] = old_value
.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\_appengine_environ.py:19:    return is_appengine() and os.environ["APPENGINE_RUNTIME"] == "python27"
.venv\Lib\site-packages\pip_audit\_audit.py:22:    dry_run: bool = False
.venv\Lib\site-packages\pip_audit\_audit.py:62:        if self._options.dry_run:
.venv\Lib\site-packages\pip_audit\_cli.py:454:        auditor = Auditor(service, options=AuditOptions(dry_run=args.dry_run and not args.fix))
.venv\Lib\site-packages\pip_audit\_cli.py:501:                if args.dry_run:
.venv\Lib\site-packages\pkg_resources\__init__.py:1239:        if os.name == 'nt' and not path.startswith(os.environ['windir']):
.venv\Lib\site-packages\platformdirs\windows.py:167:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Documents")  # noqa: PTH118
.venv\Lib\site-packages\platformdirs\windows.py:170:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Downloads")  # noqa: PTH118
.venv\Lib\site-packages\platformdirs\windows.py:173:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Pictures")  # noqa: PTH118
.venv\Lib\site-packages\platformdirs\windows.py:176:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Videos")  # noqa: PTH118
.venv\Lib\site-packages\platformdirs\windows.py:179:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Music")  # noqa: PTH118
.venv\Lib\site-packages\pre_commit\languages\golang.py:149:            os.path.join(env_dir, '.go', 'bin'), os.environ['PATH'],
.venv\Lib\site-packages\psutil\_psaix.py:388:        for path in os.environ["PATH"].split(":"):
.venv\Lib\site-packages\psutil\_pssunos.py:144:                          os.environ['PATH'], 'swap', '-l'],
.venv\Lib\site-packages\psutil\tests\test_process.py:893:                self.assertEqual(domain, os.environ['USERDOMAIN'])
.venv\Lib\site-packages\psutil\tests\test_sunos.py:22:        out = sh('env PATH=/usr/sbin:/sbin:%s swap -l' % os.environ['PATH'])
.venv\Lib\site-packages\psutil\tests\test_windows.py:110:        num_cpus = int(os.environ['NUMBER_OF_PROCESSORS'])
.venv\Lib\site-packages\pydantic\v1\env_settings.py:23:class BaseSettings(BaseModel):
.venv\Lib\site-packages\pydantic_settings\main.py:108:class BaseSettings(BaseModel):
.venv\Lib\site-packages\pydantic_settings\main.py:579:            class CliAppBaseSettings(BaseSettings, model_cls):  # type: ignore
.venv\Lib\site-packages\pydantic_settings\main.py:591:            model = CliAppBaseSettings(**model_init_data)
.venv\Lib\site-packages\pydantic_settings\sources\base.py:381:            class Settings(BaseSettings):
.venv\Lib\site-packages\pygments\lexers\rust.py:53:        'is_aarch64_feature_detected',
.venv\Lib\site-packages\pygments\lexers\rust.py:54:        'is_arm_feature_detected',
.venv\Lib\site-packages\pygments\lexers\rust.py:55:        'is_mips64_feature_detected',
.venv\Lib\site-packages\pygments\lexers\rust.py:56:        'is_mips_feature_detected',
.venv\Lib\site-packages\pygments\lexers\rust.py:57:        'is_powerpc64_feature_detected',
.venv\Lib\site-packages\pygments\lexers\rust.py:58:        'is_powerpc_feature_detected',
.venv\Lib\site-packages\pygments\lexers\rust.py:59:        'is_x86_feature_detected',
.venv\Lib\site-packages\pygments\lexers\testing.py:28:    feature_keywords = '^(기능|機能|功能|フィーチャ|خاصية|תכונה|Функціонал|Функционалност|Функционал|Фича|Особина|Могућност|Özellik|Właściwość|Tính năng|Trajto|Savybė|Požiadavka|Požadavek|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Fīča|Funzionalità|Funktionalität|Funkcionalnost|Funkcionalitāte|Funcționalitate|Functionaliteit|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Feature|Egenskap|Egenskab|Crikey|Característi
ca|Arwedd)(:)(.*)$'
.venv\Lib\site-packages\pygments\lexers\testing.py:29:    feature_element_keywords = '^(\\s*)(시나리오 개요|시나리오|배경|背景|場景大綱|場景|场景大纲|场景|劇本大綱|劇本|剧本大纲|剧本|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|シナリオ|سيناريو مخطط|سيناريو|الخلفية|תרחיש|תבנית תרחיש|רקע|Тарих|Сценарій|Сценарио|Сценарий структураси|Сценарий|Структура сценарію|Структура сценарија|Структура сценария|Скица|Рамка на сценарий|Пример|Предыстория|Предистория|Позадина|Передумова|Основа|Концепт|Контекст|Założenia|Wharrimean is|Tình huống|The thing of it i
s|Tausta|Taust|Tapausaihio|Tapaus|Szenariogrundriss|Szenario|Szablon scenariusza|Stsenaarium|Struktura scenarija|Skica|Skenario konsep|Skenario|Situācija|Senaryo taslağı|Senaryo|Scénář|Scénario|Schema dello scenario|Scenārijs pēc parauga|Scenārijs|Scenár|Scenaro|Scenariusz|Scenariul de şablon|Scenariul de sablon|Scenariu|Scenario Outline|Scenario Amlinellol|Scenario|Scenarijus|Scenarijaus šablonas|Scenarij|Scenarie|Rerefons|Raamstsenaarium|Primer|Pozadí|Pozadina|Pozadie|Plan du scénario|Plan du 
Scénario|Osnova scénáře|Osnova|Náčrt Scénáře|Náčrt Scenáru|Mate|MISHUN SRSLY|MISHUN|Kịch bản|Konturo de la scenaro|Kontext|Konteksts|Kontekstas|Kontekst|Koncept|Khung tình huống|Khung kịch bản|Háttér|Grundlage|Geçmiş|Forgatókönyv vázlat|Forgatókönyv|Fono|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l\'escenari|Escenario|Escenari|Dis is what went down|Dasar|Contexto|Contexte|Contesto|Condiţii|Conditii|Cenário|Cenario|Cefndir|Bối cảnh|Blokes|Bakgrunn|Bakgrund|Baggrund|Bac
kground|B4|Antecedents|Antecedentes|All y\'all|Achtergrond|Abstrakt Scenario|Abstract Scenario)(:)(.*)$'
.venv\Lib\site-packages\pygments\lexers\testing.py:37:        'feature_elements': [
.venv\Lib\site-packages\pygments\lexers\testing.py:42:        'feature_elements_on_stack': [
.venv\Lib\site-packages\pygments\lexers\testing.py:60:            (feature_element_keywords,
.venv\Lib\site-packages\pygments\lexers\testing.py:62:             "feature_elements_on_stack"),
.venv\Lib\site-packages\pygments\lexers\testing.py:120:            (feature_keywords, bygroups(Keyword, Keyword, Name.Function),
.venv\Lib\site-packages\pygments\lexers\testing.py:122:            (feature_element_keywords,
.venv\Lib\site-packages\pygments\lexers\testing.py:124:             'feature_elements'),
.venv\Lib\site-packages\pylint\constants.py:102:        return os.environ["PYLINTHOME"]
.venv\Lib\site-packages\pylint\config\find_default_config_files.py:105:    if "PYLINTRC" in os.environ and Path(os.environ["PYLINTRC"]).exists():
.venv\Lib\site-packages\pylint\config\find_default_config_files.py:106:        if Path(os.environ["PYLINTRC"]).is_file():
.venv\Lib\site-packages\pylint\config\find_default_config_files.py:107:            yield Path(os.environ["PYLINTRC"]).resolve()
.venv\Lib\site-packages\pylint\testutils\utils.py:59:        os.environ["PYTHONPATH"] = new_pythonpath
.venv\Lib\site-packages\pylint\testutils\utils.py:62:        del os.environ["PYTHONPATH"]
.venv\Lib\site-packages\pylint\testutils\utils.py:67:            os.environ["PYTHONPATH"] = original_pythonpath
.venv\Lib\site-packages\pylint\testutils\utils.py:69:            del os.environ["PYTHONPATH"]
.venv\Lib\site-packages\pytest_cov\engine.py:94:            os.environ['COV_CORE_SOURCE'] = os.pathsep
.venv\Lib\site-packages\pytest_cov\engine.py:96:            os.environ['COV_CORE_SOURCE'] = os.pathsep.join(self.cov_source)
.venv\Lib\site-packages\pytest_cov\engine.py:99:            os.environ['COV_CORE_CONFIG'] = config_file
.venv\Lib\site-packages\pytest_cov\engine.py:101:            os.environ['COV_CORE_CONFIG'] = os.pathsep
.venv\Lib\site-packages\pytest_cov\engine.py:102:        os.environ['COV_CORE_DATAFILE'] = os.path.abspath(self.cov.config.data_file)
.venv\Lib\site-packages\pytest_cov\engine.py:104:            os.environ['COV_CORE_BRANCH'] = 'enabled'
.venv\Lib\site-packages\pytest_cov\plugin.py:390:        os.environ['COV_CORE_CONTEXT'] = context
.venv\Lib\site-packages\requests\sessions.py:579:        settings = self.merge_environment_settings(
.venv\Lib\site-packages\requests\sessions.py:751:    def merge_environment_settings(self, url, proxies, stream, verify, cert):
.venv\Lib\site-packages\requests\utils.py:753:        os.environ[env_name] = value
.venv\Lib\site-packages\requests\utils.py:759:                del os.environ[env_name]
.venv\Lib\site-packages\requests\utils.py:761:                os.environ[env_name] = old_value
.venv\Lib\site-packages\setuptools\dist.py:743:            elif opt in ('verbose', 'dry_run'):  # ugh!
.venv\Lib\site-packages\setuptools\namespaces.py:23:        if self.dry_run:
.venv\Lib\site-packages\setuptools\command\alias.py:65:        edit_config(self.filename, {'aliases': {alias: command}}, self.dry_run)
.venv\Lib\site-packages\setuptools\command\bdist_egg.py:149:        kw.setdefault('dry_run', self.dry_run)
.venv\Lib\site-packages\setuptools\command\bdist_egg.py:177:            if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\bdist_egg.py:201:            if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\bdist_egg.py:209:            if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\bdist_egg.py:227:                     dry_run=self.dry_run, mode=self.gen_header())
.venv\Lib\site-packages\setuptools\command\bdist_egg.py:229:            remove_tree(self.bdist_dir, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\command\bdist_egg.py:426:def make_zipfile(zip_filename, base_dir, verbose=0, dry_run=0, compress=True,
.venv\Lib\site-packages\setuptools\command\bdist_egg.py:436:    mkpath(os.path.dirname(zip_filename), dry_run=dry_run)
.venv\Lib\site-packages\setuptools\command\bdist_egg.py:444:                if not dry_run:
.venv\Lib\site-packages\setuptools\command\bdist_egg.py:449:    if not dry_run:
.venv\Lib\site-packages\setuptools\command\build_ext.py:210:            compiler=self.compiler, dry_run=self.dry_run, force=self.force
.venv\Lib\site-packages\setuptools\command\build_ext.py:297:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\build_ext.py:335:                     force=True, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\command\build_ext.py:339:                         force=True, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\command\build_ext.py:340:        if os.path.exists(stub_file) and not self.dry_run:
.venv\Lib\site-packages\setuptools\command\develop.py:124:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\develop.py:140:            if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\develop.py:142:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\easy_install.py:186:        self._dry_run = None
.venv\Lib\site-packages\setuptools\command\easy_install.py:201:        if self.dry_run:
.venv\Lib\site-packages\setuptools\command\easy_install.py:840:        if self.dry_run:
.venv\Lib\site-packages\setuptools\command\easy_install.py:917:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\easy_install.py:925:                dir_util.remove_tree(destination, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\command\easy_install.py:1007:            egg_path, egg_tmp, verbose=self.verbose, dry_run=self.dry_run,
.venv\Lib\site-packages\setuptools\command\easy_install.py:1071:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\easy_install.py:1074:            dir_util.remove_tree(destination, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\command\easy_install.py:1152:        if self.dry_run:
.venv\Lib\site-packages\setuptools\command\easy_install.py:1180:            if not eggs and not self.dry_run:
.venv\Lib\site-packages\setuptools\command\easy_install.py:1236:        if self.dry_run:
.venv\Lib\site-packages\setuptools\command\easy_install.py:1267:            return not self.dry_run and dst or None
.venv\Lib\site-packages\setuptools\command\easy_install.py:1271:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\easy_install.py:1286:            byte_compile(to_compile, optimize=0, force=1, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\command\easy_install.py:1290:                    dry_run=self.dry_run,
.venv\Lib\site-packages\setuptools\command\easy_install.py:2193:        if ext not in os.environ['PATHEXT'].lower().split(';'):
.venv\Lib\site-packages\setuptools\command\editable_wheel.py:742:        self.dry_run = False
.venv\Lib\site-packages\setuptools\command\egg_info.py:285:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\egg_info.py:293:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\egg_info.py:667:    if not cmd.dry_run:
.venv\Lib\site-packages\setuptools\command\install_egg_info.py:37:            dir_util.remove_tree(self.target, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\command\install_egg_info.py:40:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\install_scripts.py:65:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\rotate.py:60:                if not self.dry_run:
.venv\Lib\site-packages\setuptools\command\saveopts.py:22:        edit_config(self.filename, settings, self.dry_run)
.venv\Lib\site-packages\setuptools\command\setopt.py:32:def edit_config(filename, settings, dry_run=False):
.venv\Lib\site-packages\setuptools\command\setopt.py:71:    if not dry_run:
.venv\Lib\site-packages\setuptools\command\setopt.py:148:            self.dry_run
.venv\Lib\site-packages\setuptools\command\test.py:180:                os.environ['PYTHONPATH'] = new_path
.venv\Lib\site-packages\setuptools\command\test.py:186:                os.environ['PYTHONPATH'] = orig_pythonpath
.venv\Lib\site-packages\setuptools\command\test.py:215:        if self.dry_run:
.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:59:    base_name, base_dir, compress="gzip", verbose=0, dry_run=0, owner=None, group=None
.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:96:    mkpath(os.path.dirname(archive_name), dry_run=dry_run)
.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:115:    if not dry_run:
.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:131:        spawn(cmd, dry_run=dry_run)
.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:137:def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):  # noqa: C901
.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:147:    mkpath(os.path.dirname(zip_filename), dry_run=dry_run)
.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:158:            spawn(["zip", zipoptions, zip_filename, base_dir], dry_run=dry_run)
.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:174:        if not dry_run:
.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:228:    dry_run=0,
.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:252:        if not dry_run:
.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:258:    kwargs = {'dry_run': dry_run}
.venv\Lib\site-packages\setuptools\_distutils\bcppcompiler.py:66:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\setuptools\_distutils\bcppcompiler.py:68:        super().__init__(verbose, dry_run, force)
.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:105:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:106:        self.dry_run = dry_run
.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:479:            if self.dry_run:
.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1004:        execute(func, args, msg, self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1007:        spawn(cmd, dry_run=self.dry_run, **kwargs)
.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1010:        return move_file(src, dst, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1013:        mkpath(name, mode, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1092:def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1135:    return klass(None, dry_run, force)
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:71:        # value of each flag is a touch complicated -- hence "self._dry_run"
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:74:        self._dry_run = None
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:96:    # XXX A more explicit way to customize dry_run would be better.
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:98:        if attr == 'dry_run':
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:340:        util.execute(func, args, msg, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:343:        dir_util.mkpath(name, mode, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:358:            dry_run=self.dry_run,
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:380:            dry_run=self.dry_run,
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:385:        return file_util.move_file(src, dst, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:391:        spawn(cmd, search_path, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:401:            dry_run=self.dry_run,
.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:81:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:83:        super().__init__(verbose, dry_run, force)
.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:266:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:268:        super().__init__(verbose, dry_run, force)
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:15:def mkpath(name, mode=0o777, verbose=1, dry_run=0):  # noqa: C901
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:73:        if not dry_run:
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:87:def create_tree(base_dir, files, mode=0o777, verbose=1, dry_run=0):
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:95:    'dry_run' flags are as for 'mkpath()'.
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:104:        mkpath(dir, mode, verbose=verbose, dry_run=dry_run)
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:115:    dry_run=0,
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:125:    return value is unaffected by 'update' or 'dry_run': it is simply
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:138:    if not dry_run and not os.path.isdir(src):
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:143:        if dry_run:
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:150:    if not dry_run:
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:167:            if not dry_run:
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:181:                    dry_run=dry_run,
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:192:                dry_run=dry_run,
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:210:def remove_tree(directory, verbose=1, dry_run=0):
.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:220:    if dry_run:
.venv\Lib\site-packages\setuptools\_distutils\dist.py:139:        self.dry_run = 0
.venv\Lib\site-packages\setuptools\_distutils\dist.py:421:                    elif opt in ('verbose', 'dry_run'):  # ugh!
.venv\Lib\site-packages\setuptools\_distutils\file_util.py:78:    dry_run=0,
.venv\Lib\site-packages\setuptools\_distutils\file_util.py:102:    have been copied, if 'dry_run' true).
.venv\Lib\site-packages\setuptools\_distutils\file_util.py:141:    if dry_run:
.venv\Lib\site-packages\setuptools\_distutils\file_util.py:178:def move_file(src, dst, verbose=1, dry_run=0):  # noqa: C901
.venv\Lib\site-packages\setuptools\_distutils\file_util.py:193:    if dry_run:
.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:350:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:351:        super().__init__(verbose, dry_run, force)
.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:406:            os.environ['lib'] = vc_env['lib']
.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:407:            os.environ['include'] = vc_env['include']
.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:426:            for p in os.environ['path'].split(';'):
.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:431:        os.environ['path'] = ";".join(self.__paths)
.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:827:        for p in os.environ['Path'].split(';'):
.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:255:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:256:        super().__init__(verbose, dry_run, force)
.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:307:            for p in os.environ['path'].split(';'):
.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:312:        os.environ['path'] = ";".join(self.__paths)
.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:625:        for p in os.environ['Path'].split(';'):
.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:686:            os.environ[name] = ';'.join(p)
.venv\Lib\site-packages\setuptools\_distutils\spawn.py:18:def spawn(cmd, search_path=1, verbose=0, dry_run=0, env=None):  # noqa: C901
.venv\Lib\site-packages\setuptools\_distutils\spawn.py:28:    must be the exact path to the executable.  If 'dry_run' is true,
.venv\Lib\site-packages\setuptools\_distutils\spawn.py:39:    if dry_run:
.venv\Lib\site-packages\setuptools\_distutils\spawn.py:79:    os.environ['PATH'].  Returns the complete filename or None if not found.
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:34:    project_base = os.path.abspath(os.environ["_PYTHON_PROJECT_BASE"])
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:307:            newcc = os.environ['CC']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:314:            cxx = os.environ['CXX']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:316:            ldshared = os.environ['LDSHARED']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:318:            cpp = os.environ['CPP']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:322:            ldshared = ldshared + ' ' + os.environ['LDFLAGS']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:324:            cflags = cflags + ' ' + os.environ['CFLAGS']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:325:            ldshared = ldshared + ' ' + os.environ['CFLAGS']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:327:            cpp = cpp + ' ' + os.environ['CPPFLAGS']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:328:            cflags = cflags + ' ' + os.environ['CPPFLAGS']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:329:            ldshared = ldshared + ' ' + os.environ['CPPFLAGS']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:331:            ar = os.environ['AR']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:333:            archiver = ar + ' ' + os.environ['ARFLAGS']
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:349:            compiler.set_executables(ranlib=os.environ['RANLIB'])
.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:449:                    item = os.environ[n]
.venv\Lib\site-packages\setuptools\_distutils\util.py:188:            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]
.venv\Lib\site-packages\setuptools\_distutils\util.py:195:        os.environ['PLAT'] = get_platform()
.venv\Lib\site-packages\setuptools\_distutils\util.py:321:def execute(func, args, msg=None, verbose=0, dry_run=0):
.venv\Lib\site-packages\setuptools\_distutils\util.py:324:    are disabled by the 'dry_run' flag.  This method takes care of all
.venv\Lib\site-packages\setuptools\_distutils\util.py:336:    if not dry_run:
.venv\Lib\site-packages\setuptools\_distutils\util.py:363:    dry_run=0,
.venv\Lib\site-packages\setuptools\_distutils\util.py:383:    If 'dry_run' is true, doesn't actually do anything that would
.venv\Lib\site-packages\setuptools\_distutils\util.py:424:        if not dry_run:
.venv\Lib\site-packages\setuptools\_distutils\util.py:453:             verbose=%r, dry_run=0,
.venv\Lib\site-packages\setuptools\_distutils\util.py:462:        spawn(cmd, dry_run=dry_run)
.venv\Lib\site-packages\setuptools\_distutils\util.py:463:        execute(os.remove, (script_name,), "removing %s" % script_name, dry_run=dry_run)
.venv\Lib\site-packages\setuptools\_distutils\util.py:501:                    if not dry_run:
.venv\Lib\site-packages\setuptools\_distutils\_msvccompiler.py:221:    def __init__(self, verbose=0, dry_run=0, force=0):
.venv\Lib\site-packages\setuptools\_distutils\_msvccompiler.py:222:        super().__init__(verbose, dry_run, force)
.venv\Lib\site-packages\setuptools\_distutils\command\bdist_dumb.py:144:            remove_tree(self.bdist_dir, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:386:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\_distutils\command\build_clib.py:98:            compiler=self.compiler, dry_run=self.dry_run, force=self.force
.venv\Lib\site-packages\setuptools\_distutils\command\build_ext.py:313:            dry_run=self.dry_run,
.venv\Lib\site-packages\setuptools\_distutils\command\build_py.py:398:                files, optimize=0, force=self.force, prefix=prefix, dry_run=self.dry_run
.venv\Lib\site-packages\setuptools\_distutils\command\build_py.py:406:                dry_run=self.dry_run,
.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:93:            if not self.dry_run:
.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:107:            if not self.dry_run:
.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:140:        if self.dry_run:
.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:57:            remove_tree(self.build_temp, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:65:                    remove_tree(directory, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:71:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\_distutils\command\config.py:94:                compiler=self.compiler, dry_run=self.dry_run, force=1
.venv\Lib\site-packages\setuptools\_distutils\command\config.py:163:    # consult 'dry_run', and assume a default (minimal) configuration if
.venv\Lib\site-packages\setuptools\_distutils\command\install_egg_info.py:47:            dir_util.remove_tree(target, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\command\install_egg_info.py:55:        if not self.dry_run:
.venv\Lib\site-packages\setuptools\_distutils\command\install_lib.py:143:                dry_run=self.dry_run,
.venv\Lib\site-packages\setuptools\_distutils\command\install_lib.py:152:                dry_run=self.dry_run,
.venv\Lib\site-packages\setuptools\_distutils\command\install_scripts.py:50:                if self.dry_run:
.venv\Lib\site-packages\setuptools\_distutils\command\register.py:59:        if self.dry_run:
.venv\Lib\site-packages\setuptools\_distutils\command\sdist.py:467:        dir_util.create_tree(base_dir, files, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\command\sdist.py:525:            dir_util.remove_tree(base_dir, dry_run=self.dry_run)
.venv\Lib\site-packages\setuptools\_distutils\command\upload.py:88:            spawn(gpg_args, dry_run=self.dry_run)
.venv\Lib\site-packages\uvicorn\config.py:351:            self.workers = int(os.environ["WEB_CONCURRENCY"])
.venv\Lib\site-packages\virtualenv\activation\python\activate_this.py:26:os.environ["PATH"] = os.pathsep.join([bin_dir, *os.environ.get("PATH", "").split(os.pathsep)])
.venv\Lib\site-packages\virtualenv\activation\python\activate_this.py:27:os.environ["VIRTUAL_ENV"] = base  # virtual env is right above bin directory
.venv\Lib\site-packages\virtualenv\activation\python\activate_this.py:28:os.environ["VIRTUAL_ENV_PROMPT"] = __VIRTUAL_PROMPT__ or os.path.basename(base)
.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\cpython3.py:38:                    del os.environ["__PYVENV_LAUNCHER__"]
.venv\Lib\site-packages\watchfiles\run.py:261:    os.environ['WATCHFILES_CHANGES'] = changes_env_var
.venv\Lib\site-packages\_pytest\cacheprovider.py:499:        cache_dir_default = os.path.join(os.environ["TOX_ENV_DIR"], cache_dir_default)
.venv\Lib\site-packages\_pytest\monkeypatch.py:333:            value = value + prepend + os.environ[name]
.venv\Lib\site-packages\_pytest\runner.py:198:        os.environ[var_name] = value
.venv\Lib\site-packages\_pytest\_py\path.py:1209:                    paths = os.environ["Path"].split(";")
.venv\Lib\site-packages\_pytest\_py\path.py:1213:                        systemroot = os.environ["SYSTEMROOT"]
.venv\Lib\site-packages\_pytest\_py\path.py:1221:                    paths = os.environ["PATH"].split(":")
.venv\Lib\site-packages\_pytest\_py\path.py:1224:                tryadd += os.environ["PATHEXT"].split(os.pathsep)
.venv\Lib\site-packages\_pytest\_py\path.py:1243:            x = os.environ["HOME"]
.venv\Lib\site-packages\_pytest\_py\path.py:1246:                x = os.environ["HOMEDRIVE"] + os.environ["HOMEPATH"]
.venv\Lib\site-packages\_pytest\_py\path.py:1416:            username = os.environ["USER"]  # linux, et al
.venv\Lib\site-packages\_pytest\_py\path.py:1419:                username = os.environ["USERNAME"]  # windows
scripts\mcp\.venv\Lib\site-packages\adodbapi\adodbapi.py:42:    verbose = int(os.environ["ADODBAPI_VERBOSE"])
scripts\mcp\.venv\Lib\site-packages\adodbapi\is64bit.py:22:            return os.environ["PROCESSOR_ARCHITECTURE"].endswith(
scripts\mcp\.venv\Lib\site-packages\adodbapi\test\is64bit.py:22:            return os.environ["PROCESSOR_ARCHITECTURE"].endswith(
scripts\mcp\.venv\Lib\site-packages\click\shell_completion.py:342:        cwords = split_arg_string(os.environ["COMP_WORDS"])
scripts\mcp\.venv\Lib\site-packages\click\shell_completion.py:343:        cword = int(os.environ["COMP_CWORD"])
scripts\mcp\.venv\Lib\site-packages\click\shell_completion.py:364:        cwords = split_arg_string(os.environ["COMP_WORDS"])
scripts\mcp\.venv\Lib\site-packages\click\shell_completion.py:365:        cword = int(os.environ["COMP_CWORD"])
scripts\mcp\.venv\Lib\site-packages\click\shell_completion.py:386:        cwords = split_arg_string(os.environ["COMP_WORDS"])
scripts\mcp\.venv\Lib\site-packages\click\shell_completion.py:387:        incomplete = os.environ["COMP_CWORD"]
scripts\mcp\.venv\Lib\site-packages\click\testing.py:398:                        del os.environ[key]
scripts\mcp\.venv\Lib\site-packages\click\testing.py:402:                    os.environ[key] = value
scripts\mcp\.venv\Lib\site-packages\click\testing.py:408:                        del os.environ[key]
scripts\mcp\.venv\Lib\site-packages\click\testing.py:412:                    os.environ[key] = value
scripts\mcp\.venv\Lib\site-packages\colorama\tests\utils.py:45:    os.environ["PYCHARM_HOSTED"] = "1"
scripts\mcp\.venv\Lib\site-packages\colorama\tests\utils.py:49:    del os.environ["PYCHARM_HOSTED"]
scripts\mcp\.venv\Lib\site-packages\dotenv\main.py:100:                os.environ[k] = v
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\http2.py:197:        self._h2_state.local_settings = h2.settings.Settings(
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:53:        socksio.socks5.SOCKS5AuthMethod.NO_AUTH_REQUIRED
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\http2.py:197:        self._h2_state.local_settings = h2.settings.Settings(
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:53:        socksio.socks5.SOCKS5AuthMethod.NO_AUTH_REQUIRED
scripts\mcp\.venv\Lib\site-packages\httpx\_config.py:35:            ctx = ssl.create_default_context(cafile=os.environ["SSL_CERT_FILE"])
scripts\mcp\.venv\Lib\site-packages\httpx\_config.py:37:            ctx = ssl.create_default_context(capath=os.environ["SSL_CERT_DIR"])
scripts\mcp\.venv\Lib\site-packages\mcp\server\transport_security.py:12:class TransportSecuritySettings(BaseModel):
scripts\mcp\.venv\Lib\site-packages\mcp\server\transport_security.py:43:        self.settings = settings or TransportSecuritySettings(enable_dns_rebinding_protection=False)
scripts\mcp\.venv\Lib\site-packages\mcp\server\auth\settings.py:15:class AuthSettings(BaseModel):
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:55:class Settings(BaseSettings, Generic[LifespanResultT]):
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:149:        self.settings = Settings(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\build_env.py:269:                os.environ[varname] = old_value
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\autocompletion.py:26:    cwords = os.environ["COMP_WORDS"].split()[1:]
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\autocompletion.py:27:    cword = int(os.environ["COMP_CWORD"])
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:214:            os.environ["PIP_NO_INPUT"] = "1"
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:217:            os.environ["PIP_EXISTS_ACTION"] = " ".join(options.exists_action)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:97:        if not options.dry_run and dist_restriction_set and not options.target_dir:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:876:def _handle_config_settings(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\main_parser.py:98:        os.environ["_PIP_RUNNING_IN_SUBPROCESS"] = "1"
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:284:            return os.environ["VISUAL"]
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:286:            return os.environ["EDITOR"]
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:97:            dest="dry_run",
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:217:        self.cmd_opts.add_option(cmdoptions.config_settings())
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:291:            not (options.dry_run and options.json_report_file)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:405:            if options.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\lock.py:75:        self.cmd_opts.add_option(cmdoptions.config_settings())
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:78:        self.cmd_opts.add_option(cmdoptions.config_settings())
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\__init__.py:49:        return bool(strtobool(os.environ["_PIP_USE_IMPORTLIB_METADATA"]))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:62:    feature_flag: str | None = None,
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:77:    feature_flag:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:78:        Command-line flag of the form --use-feature={feature_flag} for testing
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:103:            feature_flag,
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:100:    def __init__(self, source_dir, target_dir, add_launchers=True, dry_run=False, fileop=None):
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:109:        self._fileop = fileop or FileOperator(dry_run)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:356:            if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:379:            if not self._fileop.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:393:    def dry_run(self):
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:394:        return self._fileop.dry_run
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:396:    @dry_run.setter
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:397:    def dry_run(self, value):
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:398:        self._fileop.dry_run = value
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:310:    #        result =  os.environ['__PYVENV_LAUNCHER__']
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:488:    def __init__(self, dry_run=False):
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:489:        self.dry_run = dry_run
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:526:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:542:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:555:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:570:                if self.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:586:            if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:594:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:614:                if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:625:                if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:654:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1919:        return os.environ["_PYTHON_HOST_PLATFORM"]
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\pkg_resources\__init__.py:1450:        if os.name == 'nt' and not path.startswith(os.environ['windir']):
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:167:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Documents")  # noqa: PTH118
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:170:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Downloads")  # noqa: PTH118
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:173:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Pictures")  # noqa: PTH118
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:176:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Videos")  # noqa: PTH118
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:179:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Music")  # noqa: PTH118
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\pyproject_hooks\_in_process\_in_process.py:61:    ep = os.environ["_PYPROJECT_HOOKS_BUILD_BACKEND"]
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\requests\sessions.py:579:        settings = self.merge_environment_settings(
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\requests\sessions.py:750:    def merge_environment_settings(self, url, proxies, stream, verify, cert):
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\requests\utils.py:744:        os.environ[env_name] = value
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\requests\utils.py:750:                del os.environ[env_name]
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\requests\utils.py:752:                os.environ[env_name] = old_value
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\_appengine_environ.py:19:    return is_appengine() and os.environ["APPENGINE_RUNTIME"] == "python27"
scripts\mcp\.venv\Lib\site-packages\pkg_resources\__init__.py:1239:        if os.name == 'nt' and not path.startswith(os.environ['windir']):
scripts\mcp\.venv\Lib\site-packages\pydantic\v1\env_settings.py:23:class BaseSettings(BaseModel):
scripts\mcp\.venv\Lib\site-packages\pydantic_settings\main.py:108:class BaseSettings(BaseModel):
scripts\mcp\.venv\Lib\site-packages\pydantic_settings\main.py:579:            class CliAppBaseSettings(BaseSettings, model_cls):  # type: ignore
scripts\mcp\.venv\Lib\site-packages\pydantic_settings\main.py:591:            model = CliAppBaseSettings(**model_init_data)
scripts\mcp\.venv\Lib\site-packages\pydantic_settings\sources\base.py:381:            class Settings(BaseSettings):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\debugger\dbgpyapp.py:33:        win32ui.LoadStdProfileSettings(numMRU)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\app.py:130:        win32ui.LoadStdProfileSettings(numMRU)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\dlgappcore.py:57:        win32ui.LoadStdProfileSettings()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\sgrepmdi.py:63:                    x = dirpath(os.environ[d])
scripts\mcp\.venv\Lib\site-packages\referencing\tests\test_referencing_suite.py:23:    SUITE = Path(os.environ["REFERENCING_SUITE"]) / "tests"
scripts\mcp\.venv\Lib\site-packages\setuptools\dist.py:743:            elif opt in ('verbose', 'dry_run'):  # ugh!
scripts\mcp\.venv\Lib\site-packages\setuptools\namespaces.py:23:        if self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\alias.py:65:        edit_config(self.filename, {'aliases': {alias: command}}, self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:149:        kw.setdefault('dry_run', self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:177:            if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:201:            if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:209:            if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:227:                     dry_run=self.dry_run, mode=self.gen_header())
scripts\mcp\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:229:            remove_tree(self.bdist_dir, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:426:def make_zipfile(zip_filename, base_dir, verbose=0, dry_run=0, compress=True,
scripts\mcp\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:436:    mkpath(os.path.dirname(zip_filename), dry_run=dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:444:                if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:449:    if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\build_ext.py:210:            compiler=self.compiler, dry_run=self.dry_run, force=self.force
scripts\mcp\.venv\Lib\site-packages\setuptools\command\build_ext.py:297:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\build_ext.py:335:                     force=True, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\build_ext.py:339:                         force=True, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\build_ext.py:340:        if os.path.exists(stub_file) and not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\develop.py:124:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\develop.py:140:            if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\develop.py:142:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:186:        self._dry_run = None
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:201:        if self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:840:        if self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:917:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:925:                dir_util.remove_tree(destination, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:1007:            egg_path, egg_tmp, verbose=self.verbose, dry_run=self.dry_run,
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:1071:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:1074:            dir_util.remove_tree(destination, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:1152:        if self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:1180:            if not eggs and not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:1236:        if self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:1267:            return not self.dry_run and dst or None
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:1271:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:1286:            byte_compile(to_compile, optimize=0, force=1, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:1290:                    dry_run=self.dry_run,
scripts\mcp\.venv\Lib\site-packages\setuptools\command\easy_install.py:2193:        if ext not in os.environ['PATHEXT'].lower().split(';'):
scripts\mcp\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:742:        self.dry_run = False
scripts\mcp\.venv\Lib\site-packages\setuptools\command\egg_info.py:285:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\egg_info.py:293:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\egg_info.py:667:    if not cmd.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\install_egg_info.py:37:            dir_util.remove_tree(self.target, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\install_egg_info.py:40:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\install_scripts.py:65:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\rotate.py:60:                if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\saveopts.py:22:        edit_config(self.filename, settings, self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\setopt.py:32:def edit_config(filename, settings, dry_run=False):
scripts\mcp\.venv\Lib\site-packages\setuptools\command\setopt.py:71:    if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\command\setopt.py:148:            self.dry_run
scripts\mcp\.venv\Lib\site-packages\setuptools\command\test.py:180:                os.environ['PYTHONPATH'] = new_path
scripts\mcp\.venv\Lib\site-packages\setuptools\command\test.py:186:                os.environ['PYTHONPATH'] = orig_pythonpath
scripts\mcp\.venv\Lib\site-packages\setuptools\command\test.py:215:        if self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:59:    base_name, base_dir, compress="gzip", verbose=0, dry_run=0, owner=None, group=None
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:96:    mkpath(os.path.dirname(archive_name), dry_run=dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:115:    if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:131:        spawn(cmd, dry_run=dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:137:def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):  # noqa: C901
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:147:    mkpath(os.path.dirname(zip_filename), dry_run=dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:158:            spawn(["zip", zipoptions, zip_filename, base_dir], dry_run=dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:174:        if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:228:    dry_run=0,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:252:        if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:258:    kwargs = {'dry_run': dry_run}
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\bcppcompiler.py:66:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\bcppcompiler.py:68:        super().__init__(verbose, dry_run, force)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:105:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:106:        self.dry_run = dry_run
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:479:            if self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1004:        execute(func, args, msg, self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1007:        spawn(cmd, dry_run=self.dry_run, **kwargs)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1010:        return move_file(src, dst, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1013:        mkpath(name, mode, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1092:def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1135:    return klass(None, dry_run, force)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:71:        # value of each flag is a touch complicated -- hence "self._dry_run"
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:74:        self._dry_run = None
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:96:    # XXX A more explicit way to customize dry_run would be better.
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:98:        if attr == 'dry_run':
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:340:        util.execute(func, args, msg, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:343:        dir_util.mkpath(name, mode, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:358:            dry_run=self.dry_run,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:380:            dry_run=self.dry_run,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:385:        return file_util.move_file(src, dst, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:391:        spawn(cmd, search_path, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:401:            dry_run=self.dry_run,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:81:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:83:        super().__init__(verbose, dry_run, force)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:266:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:268:        super().__init__(verbose, dry_run, force)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:15:def mkpath(name, mode=0o777, verbose=1, dry_run=0):  # noqa: C901
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:73:        if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:87:def create_tree(base_dir, files, mode=0o777, verbose=1, dry_run=0):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:95:    'dry_run' flags are as for 'mkpath()'.
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:104:        mkpath(dir, mode, verbose=verbose, dry_run=dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:115:    dry_run=0,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:125:    return value is unaffected by 'update' or 'dry_run': it is simply
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:138:    if not dry_run and not os.path.isdir(src):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:143:        if dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:150:    if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:167:            if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:181:                    dry_run=dry_run,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:192:                dry_run=dry_run,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:210:def remove_tree(directory, verbose=1, dry_run=0):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:220:    if dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dist.py:139:        self.dry_run = 0
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dist.py:421:                    elif opt in ('verbose', 'dry_run'):  # ugh!
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:78:    dry_run=0,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:102:    have been copied, if 'dry_run' true).
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:141:    if dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:178:def move_file(src, dst, verbose=1, dry_run=0):  # noqa: C901
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:193:    if dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:350:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:351:        super().__init__(verbose, dry_run, force)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:406:            os.environ['lib'] = vc_env['lib']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:407:            os.environ['include'] = vc_env['include']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:426:            for p in os.environ['path'].split(';'):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:431:        os.environ['path'] = ";".join(self.__paths)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:827:        for p in os.environ['Path'].split(';'):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:255:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:256:        super().__init__(verbose, dry_run, force)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:307:            for p in os.environ['path'].split(';'):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:312:        os.environ['path'] = ";".join(self.__paths)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:625:        for p in os.environ['Path'].split(';'):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:686:            os.environ[name] = ';'.join(p)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:18:def spawn(cmd, search_path=1, verbose=0, dry_run=0, env=None):  # noqa: C901
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:28:    must be the exact path to the executable.  If 'dry_run' is true,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:39:    if dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:79:    os.environ['PATH'].  Returns the complete filename or None if not found.
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:34:    project_base = os.path.abspath(os.environ["_PYTHON_PROJECT_BASE"])
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:307:            newcc = os.environ['CC']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:314:            cxx = os.environ['CXX']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:316:            ldshared = os.environ['LDSHARED']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:318:            cpp = os.environ['CPP']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:322:            ldshared = ldshared + ' ' + os.environ['LDFLAGS']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:324:            cflags = cflags + ' ' + os.environ['CFLAGS']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:325:            ldshared = ldshared + ' ' + os.environ['CFLAGS']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:327:            cpp = cpp + ' ' + os.environ['CPPFLAGS']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:328:            cflags = cflags + ' ' + os.environ['CPPFLAGS']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:329:            ldshared = ldshared + ' ' + os.environ['CPPFLAGS']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:331:            ar = os.environ['AR']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:333:            archiver = ar + ' ' + os.environ['ARFLAGS']
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:349:            compiler.set_executables(ranlib=os.environ['RANLIB'])
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:449:                    item = os.environ[n]
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:188:            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:195:        os.environ['PLAT'] = get_platform()
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:321:def execute(func, args, msg=None, verbose=0, dry_run=0):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:324:    are disabled by the 'dry_run' flag.  This method takes care of all
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:336:    if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:363:    dry_run=0,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:383:    If 'dry_run' is true, doesn't actually do anything that would
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:424:        if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:453:             verbose=%r, dry_run=0,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:462:        spawn(cmd, dry_run=dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:463:        execute(os.remove, (script_name,), "removing %s" % script_name, dry_run=dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\util.py:501:                    if not dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\_msvccompiler.py:221:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\_msvccompiler.py:222:        super().__init__(verbose, dry_run, force)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_dumb.py:144:            remove_tree(self.bdist_dir, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:386:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\build_clib.py:98:            compiler=self.compiler, dry_run=self.dry_run, force=self.force
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\build_ext.py:313:            dry_run=self.dry_run,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\build_py.py:398:                files, optimize=0, force=self.force, prefix=prefix, dry_run=self.dry_run
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\build_py.py:406:                dry_run=self.dry_run,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:93:            if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:107:            if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:140:        if self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:57:            remove_tree(self.build_temp, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:65:                    remove_tree(directory, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:71:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\config.py:94:                compiler=self.compiler, dry_run=self.dry_run, force=1
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\config.py:163:    # consult 'dry_run', and assume a default (minimal) configuration if
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\install_egg_info.py:47:            dir_util.remove_tree(target, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\install_egg_info.py:55:        if not self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\install_lib.py:143:                dry_run=self.dry_run,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\install_lib.py:152:                dry_run=self.dry_run,
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\install_scripts.py:50:                if self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\register.py:59:        if self.dry_run:
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\sdist.py:467:        dir_util.create_tree(base_dir, files, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\sdist.py:525:            dir_util.remove_tree(base_dir, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\upload.py:88:            spawn(gpg_args, dry_run=self.dry_run)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:331:            self.workers = int(os.environ["WEB_CONCURRENCY"])
scripts\mcp\.venv\Lib\site-packages\win32\Demos\getfilever.py:19:fname = os.environ["comspec"]
scripts\mcp\.venv\Lib\site-packages\win32\Demos\GetSaveFileName.py:10:    InitialDir=os.environ["temp"],
scripts\mcp\.venv\Lib\site-packages\win32\Demos\GetSaveFileName.py:28:    InitialDir=os.environ["temp"],
scripts\mcp\.venv\Lib\site-packages\win32\Demos\SystemParametersInfo.py:204:for bmp in glob.glob(os.path.join(os.environ["windir"], "*.bmp")):
scripts\mcp\.venv\Lib\site-packages\win32\lib\regutil.py:66:    and also to setup application specific path (ie, os.environ['PATH']).
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32cryptcon.py:1327:CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG = 0x10
scripts\mcp\.venv\Lib\site-packages\win32\lib\winerror.py:389:ERROR_FORMS_AUTH_REQUIRED = 224
scripts\mcp\.venv\Lib\site-packages\win32\lib\winerror.py:430:ERROR_DEVICE_FEATURE_NOT_SUPPORTED = 316
scripts\mcp\.venv\Lib\site-packages\win32\lib\winerror.py:2234:ERROR_DS_STRONG_AUTH_REQUIRED = 8232
scripts\mcp\.venv\Lib\site-packages\win32\lib\winerror.py:3917:SCHED_E_DEPRECATED_FEATURE_USED = -2147216592
scripts\mcp\.venv\Lib\site-packages\win32\lib\winerror.py:5601:FVE_E_DRY_RUN_FAILED = -2144272307
scripts\mcp\.venv\Lib\site-packages\win32\lib\winerror.py:5614:FVE_E_NO_FEATURE_LICENSE = -2144272294
scripts\mcp\.venv\Lib\site-packages\win32\lib\winerror.py:5700:FVE_E_EDRIVE_DRY_RUN_FAILED = -2144272196
scripts\mcp\.venv\Lib\site-packages\win32\lib\winerror.py:5933:ERROR_HV_FEATURE_UNAVAILABLE = -1070268386
scripts\mcp\.venv\Lib\site-packages\win32\lib\winerror.py:5936:ERROR_HV_CPUID_FEATURE_VALIDATION = -1070268356
scripts\mcp\.venv\Lib\site-packages\win32\lib\winerror.py:5937:ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION = -1070268355
scripts\mcp\.venv\Lib\site-packages\win32\scripts\h2py.py:65:    searchdirs = os.environ["include"].split(";")
scripts\mcp\.venv\Lib\site-packages\win32\scripts\h2py.py:68:        searchdirs = os.environ["INCLUDE"].split(";")
scripts\mcp\.venv\Lib\site-packages\win32\scripts\h2py.py:72:            searchdirs.insert(0, os.path.join("/usr/include", os.environ["MULTIARCH"]))
scripts\mcp\.venv\Lib\site-packages\win32\test\test_odbc.py:23:            conn_str = os.environ["TEST_ODBC_CONNECTION_STRING"]
scripts\mcp\.venv\Lib\site-packages\win32\test\test_win32profile.py:11:        os.environ["FOO"] = "bar=baz"
scripts\mcp\.venv\Lib\site-packages\win32\test\test_win32profile.py:15:        self.assertEqual(os.environ["FOO"], "bar=baz")
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:90:SET_FEATURE_ON_THREAD = 0x00000001
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:91:SET_FEATURE_ON_PROCESS = 0x00000002
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:92:SET_FEATURE_IN_REGISTRY = 0x00000004
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:93:SET_FEATURE_ON_THREAD_LOCALMACHINE = 0x00000008
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:94:SET_FEATURE_ON_THREAD_INTRANET = 0x00000010
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:95:SET_FEATURE_ON_THREAD_TRUSTED = 0x00000020
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:96:SET_FEATURE_ON_THREAD_INTERNET = 0x00000040
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:97:SET_FEATURE_ON_THREAD_RESTRICTED = 0x00000080
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:98:GET_FEATURE_FROM_THREAD = 0x00000001
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:99:GET_FEATURE_FROM_PROCESS = 0x00000002
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:100:GET_FEATURE_FROM_REGISTRY = 0x00000004
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:101:GET_FEATURE_FROM_THREAD_LOCALMACHINE = 0x00000008
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:102:GET_FEATURE_FROM_THREAD_INTRANET = 0x00000010
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:103:GET_FEATURE_FROM_THREAD_TRUSTED = 0x00000020
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:104:GET_FEATURE_FROM_THREAD_INTERNET = 0x00000040
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:105:GET_FEATURE_FROM_THREAD_RESTRICTED = 0x00000080
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:224:URLACTION_FEATURE_MIN = 0x00002100
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:225:URLACTION_FEATURE_MIME_SNIFFING = 0x00002100
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:226:URLACTION_FEATURE_ZONE_ELEVATION = 0x00002101
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:227:URLACTION_FEATURE_WINDOW_RESTRICTIONS = 0x00002102
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:228:URLACTION_FEATURE_SCRIPT_STATUS_BAR = 0x00002103
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:229:URLACTION_FEATURE_FORCE_ADDR_AND_STATUS = 0x00002104
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:230:URLACTION_FEATURE_BLOCK_INPUT_PROMPTS = 0x00002105
scripts\mcp\.venv\Lib\site-packages\win32comext\shell\demos\IShellLinkDataList.py:16:ish.SetPath(os.environ["cOMSPEC"])
scripts\mcp\.venv\Lib\site-packages\win32comext\shell\test\testSHFileOperation.py:8:    temp_dir = os.environ["temp"]
scripts\mcp\.venv\Lib\site-packages\win32comext\shell\test\testSHFileOperation.py:48:    temp_dir = os.environ["temp"]
scripts\openai_batch\.venv\Lib\site-packages\colorama\tests\utils.py:45:    os.environ["PYCHARM_HOSTED"] = "1"
scripts\openai_batch\.venv\Lib\site-packages\colorama\tests\utils.py:49:    del os.environ["PYCHARM_HOSTED"]
scripts\openai_batch\.venv\Lib\site-packages\dotenv\main.py:100:                os.environ[k] = v
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\http2.py:197:        self._h2_state.local_settings = h2.settings.Settings(
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:53:        socksio.socks5.SOCKS5AuthMethod.NO_AUTH_REQUIRED
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\http2.py:197:        self._h2_state.local_settings = h2.settings.Settings(
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:53:        socksio.socks5.SOCKS5AuthMethod.NO_AUTH_REQUIRED
scripts\openai_batch\.venv\Lib\site-packages\httpx\_config.py:35:            ctx = ssl.create_default_context(cafile=os.environ["SSL_CERT_FILE"])
scripts\openai_batch\.venv\Lib\site-packages\httpx\_config.py:37:            ctx = ssl.create_default_context(capath=os.environ["SSL_CERT_DIR"])
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\build_env.py:168:                os.environ[varname] = old_value
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\autocompletion.py:20:    cwords = os.environ["COMP_WORDS"].split()[1:]
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\autocompletion.py:21:    cword = int(os.environ["COMP_CWORD"])
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:150:            os.environ["PIP_NO_INPUT"] = "1"
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:153:            os.environ["PIP_EXISTS_ACTION"] = " ".join(options.exists_action)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:95:        if not options.dry_run and dist_restriction_set and not options.target_dir:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:821:def _handle_config_settings(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\main_parser.py:98:        os.environ["_PIP_RUNNING_IN_SUBPROCESS"] = "1"
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:276:            return os.environ["VISUAL"]
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:278:            return os.environ["EDITOR"]
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:82:            dest="dry_run",
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:202:        self.cmd_opts.add_option(cmdoptions.config_settings())
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:276:            not (options.dry_run and options.json_report_file)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:389:            if options.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:79:        self.cmd_opts.add_option(cmdoptions.config_settings())
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\__init__.py:44:        return bool(strtobool(os.environ["_PIP_USE_IMPORTLIB_METADATA"]))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:60:    feature_flag: Optional[str] = None,
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:75:    feature_flag:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:76:        Command-line flag of the form --use-feature={feature_flag} for testing
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:99:            feature_flag,
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\colorama\tests\utils.py:45:    os.environ["PYCHARM_HOSTED"] = "1"
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\colorama\tests\utils.py:49:    del os.environ["PYCHARM_HOSTED"]
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:682:    def write_installed_files(self, paths, prefix, dry_run=False):
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:695:        if dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:780:    def write_shared_locations(self, paths, dry_run=False):
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:785:        :param dry_run: If True, the action is logged but no file is actually
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:791:        if dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:86:                 dry_run=False,
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:97:        self._fileop = fileop or FileOperator(dry_run)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:355:            if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:379:            if not self._fileop.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:393:    def dry_run(self):
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:394:        return self._fileop.dry_run
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:396:    @dry_run.setter
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:397:    def dry_run(self, value):
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:398:        self._fileop.dry_run = value
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:322:    #        result =  os.environ['__PYVENV_LAUNCHER__']
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:500:    def __init__(self, dry_run=False):
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:501:        self.dry_run = dry_run
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:539:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:555:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:568:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:583:                if self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:599:            if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:612:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:633:                if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:644:                if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:673:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1959:        return os.environ["_PYTHON_HOST_PLATFORM"]
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:522:        dry_run = maker.dry_run
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:566:            fileop = FileOperator(dry_run=dry_run)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:629:                        if not dry_run and row[1]:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:730:                    p = dist.write_shared_locations(paths, dry_run)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:736:                                               dry_run)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\pkg_resources\__init__.py:1298:        if os.name == 'nt' and not path.startswith(os.environ['windir']):
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:159:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Documents")  # noqa: PTH118
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:162:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Downloads")  # noqa: PTH118
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:165:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Pictures")  # noqa: PTH118
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:168:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Videos")  # noqa: PTH118
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:171:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Music")  # noqa: PTH118
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\pyproject_hooks\_in_process\_in_process.py:74:    ep = os.environ['PEP517_BUILD_BACKEND']
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\requests\certs.py:21:        return os.environ["_PIP_STANDALONE_CERT"]
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\requests\sessions.py:579:        settings = self.merge_environment_settings(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\requests\sessions.py:751:    def merge_environment_settings(self, url, proxies, stream, verify, cert):
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\requests\utils.py:753:        os.environ[env_name] = value
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\requests\utils.py:759:                del os.environ[env_name]
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\requests\utils.py:761:                os.environ[env_name] = old_value
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\_appengine_environ.py:19:    return is_appengine() and os.environ["APPENGINE_RUNTIME"] == "python27"
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\__init__.py:1239:        if os.name == 'nt' and not path.startswith(os.environ['windir']):
scripts\openai_batch\.venv\Lib\site-packages\pydantic\v1\env_settings.py:23:class BaseSettings(BaseModel):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\dist.py:743:            elif opt in ('verbose', 'dry_run'):  # ugh!
scripts\openai_batch\.venv\Lib\site-packages\setuptools\namespaces.py:23:        if self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\alias.py:65:        edit_config(self.filename, {'aliases': {alias: command}}, self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:149:        kw.setdefault('dry_run', self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:177:            if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:201:            if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:209:            if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:227:                     dry_run=self.dry_run, mode=self.gen_header())
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:229:            remove_tree(self.bdist_dir, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:426:def make_zipfile(zip_filename, base_dir, verbose=0, dry_run=0, compress=True,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:436:    mkpath(os.path.dirname(zip_filename), dry_run=dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:444:                if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:449:    if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\build_ext.py:210:            compiler=self.compiler, dry_run=self.dry_run, force=self.force
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\build_ext.py:297:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\build_ext.py:335:                     force=True, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\build_ext.py:339:                         force=True, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\build_ext.py:340:        if os.path.exists(stub_file) and not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\develop.py:124:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\develop.py:140:            if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\develop.py:142:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:186:        self._dry_run = None
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:201:        if self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:840:        if self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:917:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:925:                dir_util.remove_tree(destination, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:1007:            egg_path, egg_tmp, verbose=self.verbose, dry_run=self.dry_run,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:1071:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:1074:            dir_util.remove_tree(destination, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:1152:        if self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:1180:            if not eggs and not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:1236:        if self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:1267:            return not self.dry_run and dst or None
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:1271:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:1286:            byte_compile(to_compile, optimize=0, force=1, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:1290:                    dry_run=self.dry_run,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\easy_install.py:2193:        if ext not in os.environ['PATHEXT'].lower().split(';'):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:742:        self.dry_run = False
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\egg_info.py:285:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\egg_info.py:293:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\egg_info.py:667:    if not cmd.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\install_egg_info.py:37:            dir_util.remove_tree(self.target, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\install_egg_info.py:40:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\install_scripts.py:65:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\rotate.py:60:                if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\saveopts.py:22:        edit_config(self.filename, settings, self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\setopt.py:32:def edit_config(filename, settings, dry_run=False):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\setopt.py:71:    if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\setopt.py:148:            self.dry_run
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\test.py:180:                os.environ['PYTHONPATH'] = new_path
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\test.py:186:                os.environ['PYTHONPATH'] = orig_pythonpath
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\test.py:215:        if self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:59:    base_name, base_dir, compress="gzip", verbose=0, dry_run=0, owner=None, group=None
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:96:    mkpath(os.path.dirname(archive_name), dry_run=dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:115:    if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:131:        spawn(cmd, dry_run=dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:137:def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):  # noqa: C901
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:147:    mkpath(os.path.dirname(zip_filename), dry_run=dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:158:            spawn(["zip", zipoptions, zip_filename, base_dir], dry_run=dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:174:        if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:228:    dry_run=0,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:252:        if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:258:    kwargs = {'dry_run': dry_run}
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\bcppcompiler.py:66:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\bcppcompiler.py:68:        super().__init__(verbose, dry_run, force)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:105:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:106:        self.dry_run = dry_run
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:479:            if self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1004:        execute(func, args, msg, self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1007:        spawn(cmd, dry_run=self.dry_run, **kwargs)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1010:        return move_file(src, dst, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1013:        mkpath(name, mode, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1092:def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py:1135:    return klass(None, dry_run, force)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:71:        # value of each flag is a touch complicated -- hence "self._dry_run"
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:74:        self._dry_run = None
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:96:    # XXX A more explicit way to customize dry_run would be better.
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:98:        if attr == 'dry_run':
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:340:        util.execute(func, args, msg, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:343:        dir_util.mkpath(name, mode, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:358:            dry_run=self.dry_run,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:380:            dry_run=self.dry_run,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:385:        return file_util.move_file(src, dst, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:391:        spawn(cmd, search_path, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:401:            dry_run=self.dry_run,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:81:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:83:        super().__init__(verbose, dry_run, force)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:266:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py:268:        super().__init__(verbose, dry_run, force)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:15:def mkpath(name, mode=0o777, verbose=1, dry_run=0):  # noqa: C901
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:73:        if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:87:def create_tree(base_dir, files, mode=0o777, verbose=1, dry_run=0):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:95:    'dry_run' flags are as for 'mkpath()'.
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:104:        mkpath(dir, mode, verbose=verbose, dry_run=dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:115:    dry_run=0,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:125:    return value is unaffected by 'update' or 'dry_run': it is simply
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:138:    if not dry_run and not os.path.isdir(src):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:143:        if dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:150:    if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:167:            if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:181:                    dry_run=dry_run,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:192:                dry_run=dry_run,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:210:def remove_tree(directory, verbose=1, dry_run=0):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:220:    if dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dist.py:139:        self.dry_run = 0
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dist.py:421:                    elif opt in ('verbose', 'dry_run'):  # ugh!
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:78:    dry_run=0,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:102:    have been copied, if 'dry_run' true).
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:141:    if dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:178:def move_file(src, dst, verbose=1, dry_run=0):  # noqa: C901
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:193:    if dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:350:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:351:        super().__init__(verbose, dry_run, force)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:406:            os.environ['lib'] = vc_env['lib']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:407:            os.environ['include'] = vc_env['include']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:426:            for p in os.environ['path'].split(';'):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:431:        os.environ['path'] = ";".join(self.__paths)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py:827:        for p in os.environ['Path'].split(';'):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:255:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:256:        super().__init__(verbose, dry_run, force)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:307:            for p in os.environ['path'].split(';'):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:312:        os.environ['path'] = ";".join(self.__paths)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:625:        for p in os.environ['Path'].split(';'):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py:686:            os.environ[name] = ';'.join(p)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:18:def spawn(cmd, search_path=1, verbose=0, dry_run=0, env=None):  # noqa: C901
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:28:    must be the exact path to the executable.  If 'dry_run' is true,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:39:    if dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:79:    os.environ['PATH'].  Returns the complete filename or None if not found.
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:34:    project_base = os.path.abspath(os.environ["_PYTHON_PROJECT_BASE"])
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:307:            newcc = os.environ['CC']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:314:            cxx = os.environ['CXX']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:316:            ldshared = os.environ['LDSHARED']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:318:            cpp = os.environ['CPP']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:322:            ldshared = ldshared + ' ' + os.environ['LDFLAGS']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:324:            cflags = cflags + ' ' + os.environ['CFLAGS']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:325:            ldshared = ldshared + ' ' + os.environ['CFLAGS']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:327:            cpp = cpp + ' ' + os.environ['CPPFLAGS']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:328:            cflags = cflags + ' ' + os.environ['CPPFLAGS']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:329:            ldshared = ldshared + ' ' + os.environ['CPPFLAGS']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:331:            ar = os.environ['AR']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:333:            archiver = ar + ' ' + os.environ['ARFLAGS']
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:349:            compiler.set_executables(ranlib=os.environ['RANLIB'])
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:449:                    item = os.environ[n]
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:188:            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:195:        os.environ['PLAT'] = get_platform()
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:321:def execute(func, args, msg=None, verbose=0, dry_run=0):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:324:    are disabled by the 'dry_run' flag.  This method takes care of all
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:336:    if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:363:    dry_run=0,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:383:    If 'dry_run' is true, doesn't actually do anything that would
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:424:        if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:453:             verbose=%r, dry_run=0,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:462:        spawn(cmd, dry_run=dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:463:        execute(os.remove, (script_name,), "removing %s" % script_name, dry_run=dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\util.py:501:                    if not dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\_msvccompiler.py:221:    def __init__(self, verbose=0, dry_run=0, force=0):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\_msvccompiler.py:222:        super().__init__(verbose, dry_run, force)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_dumb.py:144:            remove_tree(self.bdist_dir, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:386:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\build_clib.py:98:            compiler=self.compiler, dry_run=self.dry_run, force=self.force
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\build_ext.py:313:            dry_run=self.dry_run,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\build_py.py:398:                files, optimize=0, force=self.force, prefix=prefix, dry_run=self.dry_run
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\build_py.py:406:                dry_run=self.dry_run,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:93:            if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:107:            if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:140:        if self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:57:            remove_tree(self.build_temp, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:65:                    remove_tree(directory, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:71:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\config.py:94:                compiler=self.compiler, dry_run=self.dry_run, force=1
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\config.py:163:    # consult 'dry_run', and assume a default (minimal) configuration if
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\install_egg_info.py:47:            dir_util.remove_tree(target, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\install_egg_info.py:55:        if not self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\install_lib.py:143:                dry_run=self.dry_run,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\install_lib.py:152:                dry_run=self.dry_run,
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\install_scripts.py:50:                if self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\register.py:59:        if self.dry_run:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\sdist.py:467:        dir_util.create_tree(base_dir, files, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\sdist.py:525:            dir_util.remove_tree(base_dir, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\upload.py:88:            spawn(gpg_args, dry_run=self.dry_run)
scripts\openai_batch\.venv\Lib\site-packages\tqdm\utils.py:36:    Override parameter defaults via `os.environ[prefix + param_name]`.
scripts\openai_batch\.venv\Lib\site-packages\tqdm\utils.py:347:                return [int(os.environ[i]) - 1 for i in ("COLUMNS", "LINES")]
services\mcp_client.py:40:        self.settings = Settings()
tradingbot-backend\main.py:77:    settings = Settings()
tradingbot-backend\main.py:198:    settings = Settings()
tradingbot-backend\main.py:570:        _s = Settings()
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\config_generator.py:121:def get_config_settings():
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\config_generator.py:144:    yaml_settings = get_config_settings()
tradingbot-backend\.venv\Lib\site-packages\bandit\core\config.py:82:        self._init_settings()
tradingbot-backend\.venv\Lib\site-packages\bandit\core\config.py:117:    def _init_settings(self):
tradingbot-backend\.venv\Lib\site-packages\black\parsing.py:125:            src, filename, feature_version=version, type_comments=type_comments
tradingbot-backend\.venv\Lib\site-packages\black\__init__.py:215:def enable_unstable_feature_callback(
tradingbot-backend\.venv\Lib\site-packages\black\__init__.py:336:    callback=enable_unstable_feature_callback,
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_builder_registry.py:84:    def builder_for_features(self, *feature_list):
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_builder_registry.py:85:        cls = type('Builder_' + '_'.join(feature_list),
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_builder_registry.py:86:                   (object,), {'features' : feature_list})
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_builder_registry.py:111:    def test_lookup_gets_most_recent_registration_when_no_feature_specified(self):
tradingbot-backend\.venv\Lib\site-packages\click\shell_completion.py:342:        cwords = split_arg_string(os.environ["COMP_WORDS"])
tradingbot-backend\.venv\Lib\site-packages\click\shell_completion.py:343:        cword = int(os.environ["COMP_CWORD"])
tradingbot-backend\.venv\Lib\site-packages\click\shell_completion.py:364:        cwords = split_arg_string(os.environ["COMP_WORDS"])
tradingbot-backend\.venv\Lib\site-packages\click\shell_completion.py:365:        cword = int(os.environ["COMP_CWORD"])
tradingbot-backend\.venv\Lib\site-packages\click\shell_completion.py:386:        cwords = split_arg_string(os.environ["COMP_WORDS"])
tradingbot-backend\.venv\Lib\site-packages\click\shell_completion.py:387:        incomplete = os.environ["COMP_CWORD"]
tradingbot-backend\.venv\Lib\site-packages\click\testing.py:398:                        del os.environ[key]
tradingbot-backend\.venv\Lib\site-packages\click\testing.py:402:                    os.environ[key] = value
tradingbot-backend\.venv\Lib\site-packages\click\testing.py:408:                        del os.environ[key]
tradingbot-backend\.venv\Lib\site-packages\click\testing.py:412:                    os.environ[key] = value
tradingbot-backend\.venv\Lib\site-packages\colorama\tests\utils.py:45:    os.environ["PYCHARM_HOSTED"] = "1"
tradingbot-backend\.venv\Lib\site-packages\colorama\tests\utils.py:49:    del os.environ["PYCHARM_HOSTED"]
tradingbot-backend\.venv\Lib\site-packages\dateutil\tz\tz.py:1596:                    name = os.environ["TZ"]
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:665:    def write_installed_files(self, paths, prefix, dry_run=False):
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:678:        if dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:761:    def write_shared_locations(self, paths, dry_run=False):
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:766:        :param dry_run: If True, the action is logged but no file is actually
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:772:        if dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:100:    def __init__(self, source_dir, target_dir, add_launchers=True, dry_run=False, fileop=None):
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:109:        self._fileop = fileop or FileOperator(dry_run)
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:356:            if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:379:            if not self._fileop.dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:393:    def dry_run(self):
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:394:        return self._fileop.dry_run
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:396:    @dry_run.setter
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:397:    def dry_run(self, value):
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:398:        self._fileop.dry_run = value
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:310:    #        result =  os.environ['__PYVENV_LAUNCHER__']
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:488:    def __init__(self, dry_run=False):
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:489:        self.dry_run = dry_run
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:526:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:542:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:555:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:570:                if self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:586:            if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:594:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:614:                if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:625:                if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:654:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:1919:        return os.environ["_PYTHON_HOST_PLATFORM"]
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:523:        dry_run = maker.dry_run
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:566:            fileop = FileOperator(dry_run=dry_run)
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:627:                        if not dry_run and row[1]:
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:725:                    p = dist.write_shared_locations(paths, dry_run)
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:730:                    dist.write_installed_files(outfiles, paths['prefix'], dry_run)
tradingbot-backend\.venv\Lib\site-packages\dotenv\main.py:98:                os.environ[k] = v
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:353:        self.local_settings = Settings(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:361:        self.remote_settings = Settings(client=not self.config.client_side)
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1108:    def update_settings(self, new_settings: dict[SettingCodes | int, int]) -> None:
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1427:    def _acknowledge_settings(self) -> list[Frame]:
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1443:            self._flow_control_change_from_settings(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1464:    def _flow_control_change_from_settings(self, old_value: int | None, new_value: int) -> None:
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1482:    def _inbound_flow_control_change_from_settings(self, old_value: int | None, new_value: int) -> None:
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1493:            stream._inbound_flow_control_change_from_settings(delta)
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1776:            RemoteSettingsChanged.from_settings(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1780:        frames = self._acknowledge_settings()
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1987:            self._inbound_flow_control_change_from_settings(
tradingbot-backend\.venv\Lib\site-packages\h2\events.py:380:    def from_settings(cls,
tradingbot-backend\.venv\Lib\site-packages\h2\settings.py:93:class Settings(MutableMapping[Union[SettingCodes, int], int]):
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1395:    def _inbound_flow_control_change_from_settings(self, delta: int) -> None:
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\http2.py:195:        self._h2_state.local_settings = h2.settings.Settings(
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:52:        socks5.SOCKS5AuthMethod.NO_AUTH_REQUIRED
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\http2.py:195:        self._h2_state.local_settings = h2.settings.Settings(
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:52:        socks5.SOCKS5AuthMethod.NO_AUTH_REQUIRED
tradingbot-backend\.venv\Lib\site-packages\httpx\_utils.py:130:        ssl_file = Path(os.environ["SSL_CERT_FILE"])
tradingbot-backend\.venv\Lib\site-packages\httpx\_utils.py:134:        ssl_path = Path(os.environ["SSL_CERT_DIR"])
tradingbot-backend\.venv\Lib\site-packages\numpy\conftest.py:68:        os.environ['NPY_AVAILABLE_MEM'] = available_mem
tradingbot-backend\.venv\Lib\site-packages\numpy\core\generate_numpy_api.py:79:  if (NPY_FEATURE_VERSION > PyArray_GetNDArrayCFeatureVersion()) {
tradingbot-backend\.venv\Lib\site-packages\numpy\core\generate_numpy_api.py:87:             (int) NPY_FEATURE_VERSION, (int) PyArray_GetNDArrayCFeatureVersion());
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup.py:137:        headers=["feature_detection_math.h", "feature_detection_cmath.h"],
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup.py:150:            headers=["feature_detection_math.h", "feature_detection_cmath.h"],
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup.py:168:            headers=["feature_detection_math.h", "feature_detection_cmath.h"]):
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup.py:206:    check_funcs(OPTIONAL_FILE_FUNCS, headers=["feature_detection_stdio.h"])
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup.py:207:    check_funcs(OPTIONAL_MISC_FUNCS, headers=["feature_detection_misc.h"])
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup.py:218:        "feature_detection_locale.h",
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup_common.py:110:    "feature_detection_locale.h",
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup_common.py:111:    "feature_detection_math.h",
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup_common.py:112:    "feature_detection_cmath.h",
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup_common.py:113:    "feature_detection_misc.h",
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup_common.py:114:    "feature_detection_stdio.h",
tradingbot-backend\.venv\Lib\site-packages\numpy\core\__init__.py:19:        os.environ[envkey] = '1'
tradingbot-backend\.venv\Lib\site-packages\numpy\core\__init__.py:52:        del os.environ[envkey]
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:66:        for feature_name in self.features:
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:67:            cpu_have = self.cpu_have(feature_name)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:68:            npy_have = __cpu_features__.get(feature_name)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:69:            assert_features_equal(npy_have, cpu_have, feature_name)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:71:    def cpu_have(self, feature_name):
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py:72:        map_names = self.features_map.get(feature_name, feature_name)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_mem_policy.py:402:        os.environ['NUMPY_WARN_IF_NO_MEM_POLICY'] = policy
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_mem_policy.py:419:            os.environ['NUMPY_WARN_IF_NO_MEM_POLICY'] = oldval
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_scalarmath.py:109:@settings(max_examples=10000, deadline=2000)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\armccompiler.py:13:    def __init__(self, verbose=0, dry_run=0, force=0):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\armccompiler.py:14:        UnixCCompiler.__init__(self, verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler.py:744:                  dry_run=0,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler.py:780:    compiler = klass(None, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:148:            Default is True. see `feature_detect()`.
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:168:            least one applicable flag. see `feature_can_autovec()`
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:733:            os.environ["path"] = self._ccompiler._paths
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:736:            os.environ["path"] = old_path
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1222:    feature_supported : dict
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1227:    feature_min : set
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1232:        if hasattr(self, "feature_is_cached"):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1234:        self.feature_supported = pfeatures = self.conf_features_partial()
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1235:        for feature_name in list(pfeatures.keys()):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1236:            feature  = pfeatures[feature_name]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1237:            cfeature = self.conf_features[feature_name]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1243:                pfeatures.pop(feature_name)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1245:                    "feature '%s' is disabled," % feature_name,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1257:        self.feature_min = set()
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1260:            if F in self.feature_supported:
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1261:                self.feature_min.add(F)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1263:        self.feature_is_cached = True
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1265:    def feature_names(self, names=None, force_flags=None, macros=[]):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1291:            names = self.feature_supported.keys()
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1294:            if self.feature_is_supported(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1300:    def feature_is_exist(self, name):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1313:    def feature_sorted(self, names, reverse=False):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1330:                return self.feature_supported[k]["interest"]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1332:            rank = max([self.feature_supported[f]["interest"] for f in k])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1339:    def feature_implies(self, names, keep_origins=False):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1355:        >>> self.feature_implies("SSE3")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1357:        >>> self.feature_implies("SSE2")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1359:        >>> self.feature_implies("SSE2", keep_origins=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1365:            d = self.feature_supported[name]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1388:    def feature_implies_c(self, names):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1389:        """same as feature_implies() but combining 'names'"""
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1394:        return names.union(self.feature_implies(names))
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1396:    def feature_ahead(self, names):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1412:        >>> self.feature_ahead(["SSE2", "SSE3", "SSE41"])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1416:        >>> self.feature_ahead(["SSE2", "SSE3", "SSE41", "AVX2", "FMA3"])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1419:        >>> self.feature_ahead(["SSE2", "SSE3", "SSE41", "AVX2", "FMA3"])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1426:        implies = self.feature_implies(names, keep_origins=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1431:            ahead = self.feature_sorted(names, reverse=True)[:1]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1434:    def feature_untied(self, names):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1436:        same as 'feature_ahead()' but if both features implied each other
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1450:        >>> self.feature_untied(["SSE2", "SSE3", "SSE41"])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1453:        >>> self.feature_untied(["SSE2", "SSE3", "SSE41", "FMA3", "AVX2"])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1462:            implies = self.feature_implies(n)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1465:                if nn in implies and n in self.feature_implies(nn)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1468:                tied = self.feature_sorted(tied + [n])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1475:    def feature_get_til(self, names, keyisfalse):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1477:        same as `feature_implies_c()` but stop collecting implied
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1484:            tnames = self.feature_implies_c(tnames)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1485:            tnames = self.feature_sorted(tnames, reverse=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1487:                if not self.feature_supported[n].get(keyisfalse, True):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1498:        names = self.feature_ahead(names)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1500:        return self.feature_sorted(names)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1502:    def feature_detect(self, names):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1507:        names = self.feature_get_til(names, "implies_detect")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1510:            d = self.feature_supported[n]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1515:    def feature_flags(self, names):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1520:        names = self.feature_sorted(self.feature_implies_c(names))
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1523:            d = self.feature_supported[n]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1531:    def feature_test(self, name, force_flags=None, macros=[]):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1542:            If None(default), the returned flags from `feature_flags()`
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1549:            force_flags = self.feature_flags(name)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1571:    def feature_is_supported(self, name, force_flags=None, macros=[]):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1590:        supported = name in self.feature_supported
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1592:            for impl in self.feature_implies(name):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1593:                if not self.feature_test(impl, force_flags, macros=macros):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1595:            if not self.feature_test(name, force_flags, macros=macros):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1600:    def feature_can_autovec(self, name):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1605:        d = self.feature_supported[name]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1615:    def feature_extra_checks(self, name):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1626:        d = self.feature_supported[name]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1632:        flags = self.feature_flags(name)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1653:    def feature_c_preprocessor(self, feature_name, tabs=0):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1659:        'feature_name': str
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1670:        >>> self.feature_c_preprocessor("SSE3")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1675:        assert(feature_name.isupper())
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1676:        feature = self.feature_supported.get(feature_name)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1680:            "/** %s **/" % feature_name,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1681:            "#define %sHAVE_%s 1" % (self.conf_c_prefix, feature_name)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1688:        extra_defs += self.feature_extra_checks(feature_name)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1789:            baseline_names = self.feature_names(cpu_baseline)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1790:            self.parse_baseline_flags = self.feature_flags(baseline_names)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1791:            self.parse_baseline_names = self.feature_sorted(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1792:                self.feature_implies_c(baseline_names)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1803:            self.parse_dispatch_names = self.feature_sorted(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1804:                self.feature_names(cpu_dispatch)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1918:                features_to = self.feature_names(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1922:                features_to = self.feature_supported.keys()
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1924:                features_to = self.feature_min
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1926:                if TOK in self.feature_supported:
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1929:                    if not self.feature_is_exist(TOK):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2007:                if not self.feature_is_exist(TOK):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2029:        final_targets = self.feature_untied(final_targets)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2099:            self.feature_is_exist(tar) for tar in targets
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2110:        targets = self.feature_ahead(targets)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2114:        targets = self.feature_sorted(targets)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2151:        final_targets = self.feature_sorted(final_targets, reverse=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2189:                can = self.feature_can_autovec(tar)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2192:                    self.feature_can_autovec(t)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2325:                flags = tuple(extra_flags + self.feature_flags(tar))
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2407:                baseline_pre += self.feature_c_preprocessor(name, tabs=1) + '\n'
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2416:                    pfx=self.conf_c_prefix_, name=name, pre=self.feature_c_preprocessor(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2464:            extra_checks += self.feature_extra_checks(name)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2494:            for tar in self.feature_sorted(target_sources):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2501:            for tar in self.feature_sorted(target_sources):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2504:                flags = ' '.join(self.feature_flags(tar))
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2505:                implies = ' '.join(self.feature_sorted(self.feature_implies(tar)))
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2506:                detect = ' '.join(self.feature_detect(tar))
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2509:                    extra_checks += self.feature_extra_checks(name)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2555:        features = self.feature_sorted(self.feature_implies_c(target))
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2600:            req_detect = self.feature_detect(tar)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\exec_command.py:175:        os.environ[name] = value or ''
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:16:    def __init__(self, verbose=0, dry_run=0, force=0):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:17:        UnixCCompiler.__init__(self, verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:56:    def __init__(self, verbose=0, dry_run=0, force=0):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:57:        UnixCCompiler.__init__(self, verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:86:        def __init__(self, verbose=0, dry_run=0, force=0):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:87:            MSVCCompiler.__init__(self, verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:108:        def __init__(self, verbose=0, dry_run=0, force=0):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\intelccompiler.py:109:            MSVCCompiler.__init__(self, verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\mingw32ccompiler.py:55:                  dry_run=0,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\mingw32ccompiler.py:59:                                                            dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\mingw32ccompiler.py:202:        lib_dirs.append(os.path.join(os.environ['SYSTEMROOT'], 'System32'))
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\mingw32ccompiler.py:276:        for path in [sys.prefix] + os.environ['PATH'].split(';'):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\misc_util.py:1820:            os.environ['PATH'] = path
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\msvc9compiler.py:40:    def __init__(self, verbose=0, dry_run=0, force=0):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\msvc9compiler.py:41:        _MSVCCompiler.__init__(self, verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\msvc9compiler.py:51:        os.environ['lib'] = _merge(environ_lib, os.environ['lib'])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\msvc9compiler.py:52:        os.environ['include'] = _merge(environ_include, os.environ['include'])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\msvccompiler.py:40:    def __init__(self, verbose=0, dry_run=0, force=0):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\msvccompiler.py:41:        _MSVCCompiler.__init__(self, verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\msvccompiler.py:51:        os.environ['lib'] = _merge(environ_lib, os.environ['lib'])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\msvccompiler.py:52:        os.environ['include'] = _merge(environ_include, os.environ['include'])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\pathccompiler.py:13:    def __init__ (self, verbose=0, dry_run=0, force=0):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\pathccompiler.py:14:        UnixCCompiler.__init__ (self, verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\system_info.py:381:    2) Users HOME directory (os.environ['HOME'])
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\system_info.py:886:            d = os.environ[env_var]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\system_info.py:1897:        info['extra_link_args'] = os.environ['NPY_LAPACK_LIBS'].split()
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\system_info.py:2054:        info['extra_link_args'] = os.environ['NPY_BLAS_LIBS'].split()
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\system_info.py:2058:                                        os.environ['NPY_CBLAS_LIBS'].split())
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\system_info.py:2760:        os.environ['NUMERIX'] = which[0]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\system_info.py:2869:            return os.environ[self.config_env_var]
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\unixccompiler.py:34:        opt = shlex.join(shlex.split(os.environ['OPT']))
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\command\build_clib.py:104:                                     dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\command\build_clib.py:151:                                             dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\command\build_clib.py:263:                                      dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\command\build_ext.py:137:                                     dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\command\build_ext.py:275:                                              dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\command\build_ext.py:290:                                               dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\command\build_ext.py:313:                                               dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\command\config.py:80:                                           dry_run=self.dry_run, force=1,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\fcompiler\gnu.py:130:                os.environ['MACOSX_DEPLOYMENT_TARGET'] = str(target)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\fcompiler\__init__.py:870:                  dry_run=0,
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\fcompiler\__init__.py:902:    compiler = klass(verbose=verbose, dry_run=dry_run, force=force)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt.py:341:        # on it instead of testing 'feature_implies()'' directly
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:40:        for feature_name, feature in conf_all.items():
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:43:                conf_all, feature_name, feature
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:47:        for feature_name, feature in conf_partial.items():
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:50:                conf_partial, feature_name, feature
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:54:    def test_feature(self, log, search_in, feature_name, feature_dict):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:58:        ).format(log, feature_name, self.cc_march, self.cc_name)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:60:        if not feature_name.isupper():
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:63:        for option, val in feature_dict.items():
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:67:        self.test_implies(error_msg, search_in, feature_name, feature_dict)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:68:        self.test_group(error_msg, search_in, feature_name, feature_dict)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:69:        self.test_extra_checks(error_msg, search_in, feature_name, feature_dict)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:107:    def test_implies(self, error_msg, search_in, feature_name, feature_dict):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:108:        if feature_dict.get("disabled") is not None:
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:110:        implies = feature_dict.get("implies", "")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:116:        if feature_name in implies:
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:127:    def test_group(self, error_msg, search_in, feature_name, feature_dict):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:128:        if feature_dict.get("disabled") is not None:
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:130:        group = feature_dict.get("group", "")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:144:    def test_extra_checks(self, error_msg, search_in, feature_name, feature_dict):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:145:        if feature_dict.get("disabled") is not None:
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:147:        extra_checks = feature_dict.get("extra_checks", "")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_exec_command.py:131:            os.environ['BBB'] = 'Hi'
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_exec_command.py:144:            del os.environ['BBB']
tradingbot-backend\.venv\Lib\site-packages\numpy\testing\_private\extbuild.py:216:                os.environ[key] = value
tradingbot-backend\.venv\Lib\site-packages\pandas\conftest.py:191:    # if it really is slow add `@settings(deadline=...)` with a working value,
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\io\pytables\test_file_handling.py:168:def test_complibs_default_settings(tmp_path, setup_path):
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\plotting\common.py:458:    def _check_grid_settings(self, obj, kinds, kws={}):
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\plotting\test_series.py:631:    def test_series_grid_settings(self):
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\plotting\test_series.py:633:        self._check_grid_settings(
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\plotting\frame\test_frame.py:1928:    def test_df_grid_settings(self):
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\plotting\frame\test_frame.py:1930:        self._check_grid_settings(
tradingbot-backend\.venv\Lib\site-packages\pandas\_testing\contexts.py:77:                del os.environ["TZ"]
tradingbot-backend\.venv\Lib\site-packages\pandas\_testing\contexts.py:81:            os.environ["TZ"] = tz
tradingbot-backend\.venv\Lib\site-packages\pbr\tests\test_packaging.py:495:        os.environ['SKIP_WRITE_GIT_CHANGELOG'] = '1'
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\build_env.py:168:                os.environ[varname] = old_value
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\autocompletion.py:20:    cwords = os.environ["COMP_WORDS"].split()[1:]
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\autocompletion.py:21:    cword = int(os.environ["COMP_CWORD"])
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:150:            os.environ["PIP_NO_INPUT"] = "1"
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:153:            os.environ["PIP_EXISTS_ACTION"] = " ".join(options.exists_action)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:95:        if not options.dry_run and dist_restriction_set and not options.target_dir:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:821:def _handle_config_settings(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\main_parser.py:98:        os.environ["_PIP_RUNNING_IN_SUBPROCESS"] = "1"
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:276:            return os.environ["VISUAL"]
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:278:            return os.environ["EDITOR"]
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:82:            dest="dry_run",
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:202:        self.cmd_opts.add_option(cmdoptions.config_settings())
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:276:            not (options.dry_run and options.json_report_file)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:389:            if options.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:79:        self.cmd_opts.add_option(cmdoptions.config_settings())
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\__init__.py:44:        return bool(strtobool(os.environ["_PIP_USE_IMPORTLIB_METADATA"]))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:60:    feature_flag: Optional[str] = None,
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:75:    feature_flag:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:76:        Command-line flag of the form --use-feature={feature_flag} for testing
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:99:            feature_flag,
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\colorama\tests\utils.py:45:    os.environ["PYCHARM_HOSTED"] = "1"
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\colorama\tests\utils.py:49:    del os.environ["PYCHARM_HOSTED"]
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:682:    def write_installed_files(self, paths, prefix, dry_run=False):
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:695:        if dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:780:    def write_shared_locations(self, paths, dry_run=False):
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:785:        :param dry_run: If True, the action is logged but no file is actually
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:791:        if dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:86:                 dry_run=False,
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:97:        self._fileop = fileop or FileOperator(dry_run)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:355:            if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:379:            if not self._fileop.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:393:    def dry_run(self):
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:394:        return self._fileop.dry_run
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:396:    @dry_run.setter
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:397:    def dry_run(self, value):
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:398:        self._fileop.dry_run = value
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:322:    #        result =  os.environ['__PYVENV_LAUNCHER__']
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:500:    def __init__(self, dry_run=False):
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:501:        self.dry_run = dry_run
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:539:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:555:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:568:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:583:                if self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:599:            if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:612:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:633:                if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:644:                if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:673:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1959:        return os.environ["_PYTHON_HOST_PLATFORM"]
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:522:        dry_run = maker.dry_run
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:566:            fileop = FileOperator(dry_run=dry_run)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:629:                        if not dry_run and row[1]:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:730:                    p = dist.write_shared_locations(paths, dry_run)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:736:                                               dry_run)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\pkg_resources\__init__.py:1298:        if os.name == 'nt' and not path.startswith(os.environ['windir']):
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:159:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Documents")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:162:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Downloads")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:165:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Pictures")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:168:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Videos")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py:171:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Music")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\pyproject_hooks\_in_process\_in_process.py:74:    ep = os.environ['PEP517_BUILD_BACKEND']
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\requests\certs.py:21:        return os.environ["_PIP_STANDALONE_CERT"]
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\requests\sessions.py:579:        settings = self.merge_environment_settings(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\requests\sessions.py:751:    def merge_environment_settings(self, url, proxies, stream, verify, cert):
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\requests\utils.py:753:        os.environ[env_name] = value
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\requests\utils.py:759:                del os.environ[env_name]
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\requests\utils.py:761:                os.environ[env_name] = old_value
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\_appengine_environ.py:19:    return is_appengine() and os.environ["APPENGINE_RUNTIME"] == "python27"
tradingbot-backend\.venv\Lib\site-packages\pkg_resources\__init__.py:1470:        if os.name == 'nt' and not path.startswith(os.environ['windir']):
tradingbot-backend\.venv\Lib\site-packages\platformdirs\windows.py:167:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Documents")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\platformdirs\windows.py:170:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Downloads")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\platformdirs\windows.py:173:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Pictures")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\platformdirs\windows.py:176:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Videos")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\platformdirs\windows.py:179:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Music")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\pre_commit\languages\golang.py:150:            os.path.join(env_dir, '.go', 'bin'), os.environ['PATH'],
tradingbot-backend\.venv\Lib\site-packages\pydantic\env_settings.py:23:class BaseSettings(BaseModel):
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\rust.py:53:        'is_aarch64_feature_detected',
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\rust.py:54:        'is_arm_feature_detected',
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\rust.py:55:        'is_mips64_feature_detected',
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\rust.py:56:        'is_mips_feature_detected',
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\rust.py:57:        'is_powerpc64_feature_detected',
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\rust.py:58:        'is_powerpc_feature_detected',
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\rust.py:59:        'is_x86_feature_detected',
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\testing.py:28:    feature_keywords = '^(기능|機能|功能|フィーチャ|خاصية|תכונה|Функціонал|Функционалност|Функционал|Фича|Особина|Могућност|Özellik|Właściwość|Tính năng|Trajto|Savybė|Požiadavka|Požadavek|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Fīča|Funzionalità|Funktionalität|Funkcionalnost|Funkcionalitāte|Funcționalitate|Functionaliteit|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Feature|Egenskap|Egenskab|
Crikey|Característica|Arwedd)(:)(.*)$'
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\testing.py:29:    feature_element_keywords = '^(\\s*)(시나리오 개요|시나리오|배경|背景|場景大綱|場景|场景大纲|场景|劇本大綱|劇本|剧本大纲|剧本|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|シナリオ|سيناريو مخطط|سيناريو|الخلفية|תרחיש|תבנית תרחיש|רקע|Тарих|Сценарій|Сценарио|Сценарий структураси|Сценарий|Структура сценарію|Структура сценарија|Структура сценария|Скица|Рамка на сценарий|Пример|Предыстория|Предистория|Позадина|Передумова|Основа|Концепт|Контекст|Założenia|Wharrimean is|Tình huốn
g|The thing of it is|Tausta|Taust|Tapausaihio|Tapaus|Szenariogrundriss|Szenario|Szablon scenariusza|Stsenaarium|Struktura scenarija|Skica|Skenario konsep|Skenario|Situācija|Senaryo taslağı|Senaryo|Scénář|Scénario|Schema dello scenario|Scenārijs pēc parauga|Scenārijs|Scenár|Scenaro|Scenariusz|Scenariul de şablon|Scenariul de sablon|Scenariu|Scenario Outline|Scenario Amlinellol|Scenario|Scenarijus|Scenarijaus šablonas|Scenarij|Scenarie|Rerefons|Raamstsenaarium|Primer|Pozadí|Pozadina|Pozadie|Plan d
u scénario|Plan du Scénario|Osnova scénáře|Osnova|Náčrt Scénáře|Náčrt Scenáru|Mate|MISHUN SRSLY|MISHUN|Kịch bản|Konturo de la scenaro|Kontext|Konteksts|Kontekstas|Kontekst|Koncept|Khung tình huống|Khung kịch bản|Háttér|Grundlage|Geçmiş|Forgatókönyv vázlat|Forgatókönyv|Fono|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l\'escenari|Escenario|Escenari|Dis is what went down|Dasar|Contexto|Contexte|Contesto|Condiţii|Conditii|Cenário|Cenario|Cefndir|Bối cảnh|Blokes|Bakgrunn|Ba
kgrund|Baggrund|Background|B4|Antecedents|Antecedentes|All y\'all|Achtergrond|Abstrakt Scenario|Abstract Scenario)(:)(.*)$'
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\testing.py:37:        'feature_elements': [
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\testing.py:42:        'feature_elements_on_stack': [
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\testing.py:60:            (feature_element_keywords,
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\testing.py:62:             "feature_elements_on_stack"),
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\testing.py:120:            (feature_keywords, bygroups(Keyword, Keyword, Name.Function),
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\testing.py:122:            (feature_element_keywords,
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\testing.py:124:             'feature_elements'),
tradingbot-backend\.venv\Lib\site-packages\pyproject_hooks\_in_process\_in_process.py:61:    ep = os.environ["_PYPROJECT_HOOKS_BUILD_BACKEND"]
tradingbot-backend\.venv\Lib\site-packages\requests\sessions.py:579:        settings = self.merge_environment_settings(
tradingbot-backend\.venv\Lib\site-packages\requests\sessions.py:750:    def merge_environment_settings(self, url, proxies, stream, verify, cert):
tradingbot-backend\.venv\Lib\site-packages\requests\utils.py:744:        os.environ[env_name] = value
tradingbot-backend\.venv\Lib\site-packages\requests\utils.py:750:                del os.environ[env_name]
tradingbot-backend\.venv\Lib\site-packages\requests\utils.py:752:                os.environ[env_name] = old_value
tradingbot-backend\.venv\Lib\site-packages\setuptools\dist.py:617:            elif opt in ('verbose', 'dry_run'):  # ugh!
tradingbot-backend\.venv\Lib\site-packages\setuptools\namespaces.py:23:        if self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_path.py:69:    ...     assert 'foo' in os.environ['PYTHONPATH']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_path.py:70:    ...     assert 'anything' in os.environ['PYTHONPATH']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_path.py:71:    >>> os.environ['PYTHONPATH']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_path.py:76:    ...     assert 'foo' in os.environ['PYTHONPATH']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_path.py:87:            os.environ['PYTHONPATH'] = new_path
tradingbot-backend\.venv\Lib\site-packages\setuptools\_path.py:93:            os.environ['PYTHONPATH'] = orig_pythonpath
tradingbot-backend\.venv\Lib\site-packages\setuptools\_scripts.py:245:        if ext not in os.environ['PATHEXT'].lower().split(';'):
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\alias.py:64:        edit_config(self.filename, {'aliases': {alias: command}}, self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:159:        kw.setdefault('dry_run', self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:186:            if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:209:            if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:216:            if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:235:            dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:239:            remove_tree(self.bdist_dir, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:444:    dry_run: bool = False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:456:    mkpath(os.path.dirname(zip_filename), dry_run=dry_run)  # type: ignore[arg-type] # python/mypy#18075
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:464:                if not dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\bdist_egg.py:469:    if not dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\bdist_wheel.py:452:            if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\build_ext.py:225:            compiler=self.compiler, dry_run=self.dry_run, force=self.force
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\build_ext.py:353:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\build_ext.py:390:        byte_compile([stub_file], optimize=0, force=True, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\build_ext.py:397:                dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\build_ext.py:399:        if os.path.exists(stub_file) and not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:797:        self.dry_run = False
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\egg_info.py:281:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\egg_info.py:289:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\egg_info.py:652:    if not cmd.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\install_egg_info.py:34:            dir_util.remove_tree(self.target, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\install_egg_info.py:37:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\install_scripts.py:63:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\rotate.py:61:                if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\saveopts.py:21:        edit_config(self.filename, settings, self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\setopt.py:30:def edit_config(filename, settings, dry_run=False):
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\setopt.py:67:    if not dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\setopt.py:140:            self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\contexts.py:30:    saved = dict((key, os.environ[key]) for key in replacements if key in os.environ)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\environment.py:54:            env[envname] = os.environ[envname]
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_build_ext.py:83:            os.environ['SETUPTOOLS_EXT_SUFFIX'] = '.test-suffix'
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_build_ext.py:89:            del os.environ['SETUPTOOLS_EXT_SUFFIX']
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_build_meta.py:719:    def test_editable_without_config_settings(self, tmpdir_cwd):
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_build_meta.py:744:    def test_editable_with_config_settings(self, tmpdir_cwd, config_settings):
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_distutils_adoption.py:21:        env['SYSTEMROOT'] = os.environ['SYSTEMROOT']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:64:    dry_run: bool = False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:99:    mkpath(os.path.dirname(archive_name), dry_run=dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:118:    if not dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:132:    dry_run: bool = False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:143:    mkpath(os.path.dirname(zip_filename), dry_run=dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:154:            spawn(["zip", zipoptions, zip_filename, base_dir], dry_run=dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:167:        if not dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:222:    dry_run: bool = False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:233:    dry_run: bool = False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:243:    dry_run: bool = False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:267:        if not dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py:273:    kwargs = {'dry_run': dry_run}
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:97:        # value of each flag is a touch complicated -- hence "self._dry_run"
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:100:        self._dry_run = None
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:122:    # XXX A more explicit way to customize dry_run would be better.
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:124:        if attr == 'dry_run':
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:384:        util.execute(func, args, msg, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:387:        dir_util.mkpath(name, mode, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:428:            dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:450:            dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:468:        return file_util.move_file(src, dst, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:476:        spawn(cmd, search_path, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:512:            dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:48:def mkpath(name: pathlib.Path, mode=0o777, verbose=True, dry_run=False) -> None:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:61:        dry_run or name.mkdir(mode=mode, parents=True, exist_ok=True)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:79:def create_tree(base_dir, files, mode=0o777, verbose=True, dry_run=False):
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:87:    'dry_run' flags are as for 'mkpath()'.
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:94:        mkpath(dir, mode, verbose=verbose, dry_run=dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:105:    dry_run=False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:115:    return value is unaffected by 'update' or 'dry_run': it is simply
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:126:    if not dry_run and not os.path.isdir(src):
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:131:        if dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:136:    if not dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:145:        dry_run=dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:160:    dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:176:        if not dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:189:            dry_run=dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:199:            dry_run=dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:215:def remove_tree(directory, verbose=True, dry_run=False):
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py:223:    if dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dist.py:167:        self.dry_run = False
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dist.py:449:                    elif opt in ('verbose', 'dry_run'):  # ugh!
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:71:    dry_run=False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:95:    have been copied, if 'dry_run' true).
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:134:    if dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:172:def move_file(src, dst, verbose=True, dry_run=False):  # noqa: C901
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\file_util.py:186:    if dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:59:    dry_run: bool = False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:71:    must be the exact path to the executable.  If 'dry_run' is true,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:78:    if dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\spawn.py:102:    os.environ['PATH'].  Returns the complete filename or None if not found.
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:49:    project_base = os.path.abspath(os.environ["_PYTHON_PROJECT_BASE"])
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:331:            newcc = os.environ['CC']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:377:            compiler.set_executables(ranlib=os.environ['RANLIB'])
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py:474:                    item = os.environ[n]
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:178:            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:185:        os.environ['PLAT'] = get_platform()
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:316:    dry_run: bool = False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:321:    are disabled by the 'dry_run' flag. This method handles that
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:333:    if not dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:360:    dry_run: bool = False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:380:    If 'dry_run' is true, doesn't actually do anything that would
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:414:        if not dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:440:             verbose={verbose!r}, dry_run=False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:448:        spawn(cmd, dry_run=dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:449:        execute(os.remove, (script_name,), f"removing {script_name}", dry_run=dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\util.py:486:                    if not dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_dumb.py:141:            remove_tree(self.bdist_dir, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:381:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\build_clib.py:92:            compiler=self.compiler, dry_run=self.dry_run, force=self.force
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\build_ext.py:329:            dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\build_py.py:398:                files, optimize=0, force=self.force, prefix=prefix, dry_run=self.dry_run
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\build_py.py:406:                dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:93:            if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:107:            if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py:129:        if self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:58:            remove_tree(self.build_temp, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:66:                    remove_tree(directory, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\clean.py:72:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\config.py:94:                compiler=self.compiler, dry_run=self.dry_run, force=True
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\config.py:163:    # consult 'dry_run', and assume a default (minimal) configuration if
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\install_egg_info.py:47:            dir_util.remove_tree(target, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\install_egg_info.py:55:        if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\install_lib.py:145:                dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\install_lib.py:154:                dry_run=self.dry_run,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\install_scripts.py:51:                if self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\sdist.py:453:        dir_util.create_tree(base_dir, files, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\sdist.py:511:            dir_util.remove_tree(base_dir, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\base.py:134:        self, verbose: bool = False, dry_run: bool = False, force: bool = False
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\base.py:136:        self.dry_run = dry_run
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\base.py:535:            if self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\base.py:1153:        execute(func, args, msg, self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\base.py:1158:        spawn(cmd, dry_run=self.dry_run, **kwargs)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\base.py:1173:        return move_file(src, dst, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\base.py:1176:        mkpath(name, mode, dry_run=self.dry_run)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\base.py:1265:    dry_run: bool = False,
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\base.py:1310:    return klass(None, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\cygwin.py:55:    def __init__(self, verbose=False, dry_run=False, force=False):
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\cygwin.py:56:        super().__init__(verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\cygwin.py:249:    def __init__(self, verbose=False, dry_run=False, force=False):
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\cygwin.py:250:        super().__init__(verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\msvc.py:263:    def __init__(self, verbose=False, dry_run=False, force=False) -> None:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\msvc.py:264:        super().__init__(verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\zos.py:139:    def __init__(self, verbose=False, dry_run=False, force=False):
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\zos.py:140:        super().__init__(verbose, dry_run, force)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\tests\test_msvc.py:63:        os.environ[test_var] = test_value
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\tests\test_msvc.py:71:                os.environ['DISTUTILS_USE_SDK'] = old_distutils_use_sdk
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\tests\test_msvc.py:107:        inner_cmd = 'import os; assert os.environ["PATH"] == "expected"'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\compilers\C\tests\test_msvc.py:131:            assert os.environ["PATH"] == "expected"
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_archive_util.py:180:        # now for a dry_run
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_archive_util.py:185:            make_tarball(base_name, 'dist', compress=None, dry_run=True)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_bdist_rpm.py:50:        os.environ['HOME'] = tmp_dir  # to confine dir '.rpmdb' creation
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_bdist_rpm.py:93:        os.environ['HOME'] = tmp_dir  # to confine dir '.rpmdb' creation
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_build_ext.py:560:                del os.environ['MACOSX_DEPLOYMENT_TARGET']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_build_ext.py:562:            os.environ['MACOSX_DEPLOYMENT_TARGET'] = target
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_build_scripts.py:14:    def test_default_settings(self):
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_install_scripts.py:12:    def test_default_settings(self):
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:119:        os.environ['AR'] = 'env_ar'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:120:        os.environ['CC'] = 'env_cc'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:121:        os.environ['CPP'] = 'env_cpp'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:122:        os.environ['CXX'] = 'env_cxx --env-cxx-flags'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:123:        os.environ['LDSHARED'] = 'env_ldshared'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:124:        os.environ['LDFLAGS'] = '--env-ldflags'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:125:        os.environ['ARFLAGS'] = '--env-arflags'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:126:        os.environ['CFLAGS'] = '--env-cflags'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:127:        os.environ['CPPFLAGS'] = '--env-cppflags'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:128:        os.environ['RANLIB'] = 'env_ranlib'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:152:        del os.environ['AR']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:153:        del os.environ['CC']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:154:        del os.environ['CPP']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:155:        del os.environ['CXX']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:156:        del os.environ['LDSHARED']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:157:        del os.environ['LDFLAGS']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:158:        del os.environ['ARFLAGS']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:159:        del os.environ['CFLAGS']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:160:        del os.environ['CPPFLAGS']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_sysconfig.py:161:        del os.environ['RANLIB']
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_util.py:128:        assert os.environ['PLAT'] == get_platform()
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_util.py:149:            assert os.environ['HOME'] == '/home/distutils'
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\platformdirs\windows.py:167:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Documents")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\platformdirs\windows.py:170:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Downloads")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\platformdirs\windows.py:173:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Pictures")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\platformdirs\windows.py:176:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Videos")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\platformdirs\windows.py:179:        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Music")  # noqa: PTH118
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\macosx_libfile.py:417:            int(x) for x in os.environ["MACOSX_DEPLOYMENT_TARGET"].split(".")
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_bdist_wheel.py:462:            if not self.dry_run:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:355:            self.workers = int(os.environ["WEB_CONCURRENCY"])
tradingbot-backend\.venv\Lib\site-packages\virtualenv\activation\python\activate_this.py:26:os.environ["PATH"] = os.pathsep.join([bin_dir, *os.environ.get("PATH", "").split(os.pathsep)])
tradingbot-backend\.venv\Lib\site-packages\virtualenv\activation\python\activate_this.py:27:os.environ["VIRTUAL_ENV"] = base  # virtual env is right above bin directory
tradingbot-backend\.venv\Lib\site-packages\virtualenv\activation\python\activate_this.py:28:os.environ["VIRTUAL_ENV_PROMPT"] = __VIRTUAL_PROMPT__ or os.path.basename(base)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\cpython3.py:38:                    del os.environ["__PYVENV_LAUNCHER__"]
tradingbot-backend\.venv\Lib\site-packages\_pytest\cacheprovider.py:481:        cache_dir_default = os.path.join(os.environ["TOX_ENV_DIR"], cache_dir_default)
tradingbot-backend\.venv\Lib\site-packages\_pytest\monkeypatch.py:330:            value = value + prepend + os.environ[name]
tradingbot-backend\.venv\Lib\site-packages\_pytest\runner.py:198:        os.environ[var_name] = value
tradingbot-backend\.venv\Lib\site-packages\_pytest\_py\path.py:1209:                    paths = os.environ["Path"].split(";")
tradingbot-backend\.venv\Lib\site-packages\_pytest\_py\path.py:1213:                        systemroot = os.environ["SYSTEMROOT"]
tradingbot-backend\.venv\Lib\site-packages\_pytest\_py\path.py:1221:                    paths = os.environ["PATH"].split(":")
tradingbot-backend\.venv\Lib\site-packages\_pytest\_py\path.py:1224:                tryadd += os.environ["PATHEXT"].split(os.pathsep)
tradingbot-backend\.venv\Lib\site-packages\_pytest\_py\path.py:1243:            x = os.environ["HOME"]
tradingbot-backend\.venv\Lib\site-packages\_pytest\_py\path.py:1246:                x = os.environ["HOMEDRIVE"] + os.environ["HOMEPATH"]
tradingbot-backend\.venv\Lib\site-packages\_pytest\_py\path.py:1416:            username = os.environ["USER"]  # linux, et al
tradingbot-backend\.venv\Lib\site-packages\_pytest\_py\path.py:1419:                username = os.environ["USERNAME"]  # windows
tradingbot-backend\config\settings.py:24:class Settings(_BaseSettings):
tradingbot-backend\config\settings.py:33:    AUTH_REQUIRED: bool = False
tradingbot-backend\config\settings.py:221:    PROB_FEATURE_LOG_ENABLED: bool = False
tradingbot-backend\config\settings.py:222:    PROB_FEATURE_LOG_MAX_POINTS: int = 500
tradingbot-backend\config\settings.py:223:    PROB_FEATURE_LOG_INCLUDE_PRICE: bool = False
tradingbot-backend\config\settings.py:226:    DRY_RUN_ENABLED: bool = False
tradingbot-backend\rest\active_orders.py:25:        self.settings = Settings()
tradingbot-backend\rest\auth.py:24:settings = Settings()
tradingbot-backend\rest\auth.py:82:        settings = Settings()
tradingbot-backend\rest\auth.py:254:        settings = Settings()
tradingbot-backend\rest\funding.py:24:        self.settings = Settings()
tradingbot-backend\rest\ledgers.py:26:        self.settings = settings or Settings()
tradingbot-backend\rest\margin.py:81:        self.settings = Settings()
tradingbot-backend\rest\order_history.py:251:        self.settings = Settings()
tradingbot-backend\rest\positions.py:75:        self.settings = Settings()
tradingbot-backend\rest\positions.py:264:            timeout = Settings().ORDER_HTTP_TIMEOUT
tradingbot-backend\rest\positions.py:265:            retries = max(int(Settings().ORDER_MAX_RETRIES), 0)
tradingbot-backend\rest\positions.py:266:            backoff_base = max(int(Settings().ORDER_BACKOFF_BASE_MS), 0) / 1000.0
tradingbot-backend\rest\positions.py:267:            backoff_max = max(int(Settings().ORDER_BACKOFF_MAX_MS), 0) / 1000.0
tradingbot-backend\rest\positions_history.py:84:        self.settings = Settings()
tradingbot-backend\rest\routes.py:79:settings = Settings()
tradingbot-backend\rest\routes.py:188:        s = Settings()
tradingbot-backend\rest\routes.py:285:        s = Settings()
tradingbot-backend\rest\routes.py:485:    """Kräv JWT endast när AUTH_REQUIRED=True. Annars släpp igenom utan header.
tradingbot-backend\rest\routes.py:487:    Läser runtime‑override först (POST /api/v2/runtime/config), faller tillbaka till Settings().
tradingbot-backend\rest\routes.py:492:        auth_required = bool(_rc_get_bool("AUTH_REQUIRED", Settings().AUTH_REQUIRED))
tradingbot-backend\rest\routes.py:494:        auth_required = bool(Settings().AUTH_REQUIRED)
tradingbot-backend\rest\routes.py:495:    if not auth_required:
tradingbot-backend\rest\routes.py:543:            if getattr(settings, "DRY_RUN_ENABLED", False):
tradingbot-backend\rest\routes.py:547:                        "dry_run": True,
tradingbot-backend\rest\routes.py:1501:async def get_strategy_settings(symbol: str | None = None, _: bool = Depends(require_auth)):
tradingbot-backend\rest\routes.py:1521:        result = svc.get_settings(symbol=symbol).to_dict()
tradingbot-backend\rest\routes.py:1536:async def update_strategy_settings(
tradingbot-backend\rest\routes.py:1543:        current = svc.get_settings(symbol=symbol)
tradingbot-backend\rest\routes.py:1544:        updated = StrategySettings(
tradingbot-backend\rest\routes.py:1552:        saved = svc.save_settings(updated, symbol=symbol)
tradingbot-backend\rest\routes.py:1821:                s = ssvc.get_settings(symbol=req.symbol)
tradingbot-backend\rest\routes.py:2274:            if bool(getattr(s2, "PROB_FEATURE_LOG_ENABLED", False)):
tradingbot-backend\rest\routes.py:2275:                max_pts = int(getattr(s2, "PROB_FEATURE_LOG_MAX_POINTS", 500) or 500)
tradingbot-backend\rest\routes.py:2276:                include_price = bool(getattr(s2, "PROB_FEATURE_LOG_INCLUDE_PRICE", False))
tradingbot-backend\rest\routes.py:2278:                buf = _ms.setdefault("prob_feature_log", {}).setdefault(key, [])
tradingbot-backend\rest\routes.py:2390:        s = Settings()
tradingbot-backend\rest\routes.py:2450:        s = Settings()
tradingbot-backend\rest\routes.py:2597:        s = Settings()
tradingbot-backend\rest\routes.py:2633:            _os.environ["PROB_MODEL_ENABLED"] = "True" if req.model_enabled else "False"
tradingbot-backend\rest\routes.py:2636:            _os.environ["PROB_MODEL_FILE"] = str(req.model_file)
tradingbot-backend\rest\routes.py:2642:            _os.environ["PROB_MODEL_EV_THRESHOLD"] = str(float(req.ev_threshold))
tradingbot-backend\rest\routes.py:2644:            _os.environ["PROB_MODEL_CONFIDENCE_MIN"] = str(float(req.confidence_min))
tradingbot-backend\rest\routes.py:2646:            _os.environ["PROB_AUTOTRADE_ENABLED"] = "True" if req.autotrade_enabled else "False"
tradingbot-backend\rest\routes.py:2648:            _os.environ["PROB_SIZE_MAX_RISK_PCT"] = str(float(req.size_max_risk_pct))
tradingbot-backend\rest\routes.py:2650:            _os.environ["PROB_SIZE_KELLY_CAP"] = str(float(req.size_kelly_cap))
tradingbot-backend\rest\routes.py:2652:            _os.environ["PROB_SIZE_CONF_WEIGHT"] = str(float(req.size_conf_weight))
tradingbot-backend\rest\routes.py:2654:            _os.environ["POSITION_SIZE_FALLBACK_QUOTE"] = str(float(req.position_size_fallback_quote))
tradingbot-backend\rest\routes.py:2657:            _os.environ["PROB_VALIDATE_ENABLED"] = "True" if req.validate_enabled else "False"
tradingbot-backend\rest\routes.py:2659:            _os.environ["PROB_VALIDATE_SYMBOLS"] = str(req.validate_symbols)
tradingbot-backend\rest\routes.py:2661:            _os.environ["PROB_VALIDATE_TIMEFRAME"] = str(req.validate_timeframe)
tradingbot-backend\rest\routes.py:2663:            _os.environ["PROB_VALIDATE_LIMIT"] = str(int(req.validate_limit))
tradingbot-backend\rest\routes.py:2666:            _os.environ["PROB_RETRAIN_ENABLED"] = "True" if req.retrain_enabled else "False"
tradingbot-backend\rest\routes.py:2668:            _os.environ["PROB_RETRAIN_INTERVAL_HOURS"] = str(int(req.retrain_interval_hours))
tradingbot-backend\rest\routes.py:2670:            _os.environ["PROB_RETRAIN_SYMBOLS"] = str(req.retrain_symbols)
tradingbot-backend\rest\routes.py:2672:            _os.environ["PROB_RETRAIN_TIMEFRAME"] = str(req.retrain_timeframe)
tradingbot-backend\rest\routes.py:2674:            _os.environ["PROB_RETRAIN_LIMIT"] = str(int(req.retrain_limit))
tradingbot-backend\rest\routes.py:2689:async def prob_feature_log(q: ProbFeatureLogQuery, _: bool = Depends(require_auth)):
tradingbot-backend\rest\routes.py:2693:        logs = _ms.get("prob_feature_log", {}) or {}
tradingbot-backend\rest\routes.py:3003:        s = Settings()
tradingbot-backend\rest\routes.py:3019:        s = Settings()
tradingbot-backend\rest\routes.py:3031:        s = Settings()
tradingbot-backend\rest\routes.py:3211:        s = Settings()
tradingbot-backend\rest\routes.py:3231:        s = Settings()
tradingbot-backend\rest\routes.py:4001:        s = Settings()
tradingbot-backend\rest\routes.py:4012:            "dry_run": bool(getattr(s, "DRY_RUN_ENABLED", False)),
tradingbot-backend\rest\routes.py:4195:                s = Settings()
tradingbot-backend\rest\routes.py:4358:        s = Settings()
tradingbot-backend\rest\routes.py:4381:async def get_dry_run(_: bool = Depends(require_auth)):
tradingbot-backend\rest\routes.py:4383:        return {"dry_run_enabled": bool(getattr(settings, "DRY_RUN_ENABLED", False))}
tradingbot-backend\rest\routes.py:4390:async def set_dry_run(payload: CoreModeRequest, _: bool = Depends(require_auth)):
tradingbot-backend\rest\routes.py:4396:            _os.environ["DRY_RUN_ENABLED"] = "True" if payload.enabled else "False"
tradingbot-backend\rest\routes.py:4400:            settings.DRY_RUN_ENABLED = bool(payload.enabled)
tradingbot-backend\rest\routes.py:4404:        return {"dry_run_enabled": bool(getattr(settings, "DRY_RUN_ENABLED", False))}
tradingbot-backend\rest\routes.py:4427:            _os.environ["TRADING_PAUSED"] = "True" if payload.enabled else "False"
tradingbot-backend\rest\routes.py:4451:                enabled = bool(getattr(Settings(), "PROB_MODEL_ENABLED", False))
tradingbot-backend\rest\routes.py:4467:        _os.environ["PROB_MODEL_ENABLED"] = "True" if payload.enabled else "False"
tradingbot-backend\rest\routes.py:4483:        return {"autotrade_enabled": bool(getattr(Settings(), "PROB_AUTOTRADE_ENABLED", False))}
tradingbot-backend\rest\routes.py:4494:        _os.environ["PROB_AUTOTRADE_ENABLED"] = "True" if payload.enabled else "False"
tradingbot-backend\rest\routes.py:4496:        return {"autotrade_enabled": bool(getattr(Settings(), "PROB_AUTOTRADE_ENABLED", False))}
tradingbot-backend\rest\routes.py:4626:        settings = Settings()
tradingbot-backend\rest\routes.py:5011:async def get_feature_flags_status(_: bool = Depends(require_auth)):
tradingbot-backend\rest\routes.py:5014:        from services.feature_flags_service import feature_flags_service
tradingbot-backend\rest\routes.py:5016:        status = feature_flags_service.get_flag_status()
tradingbot-backend\rest\routes.py:5024:async def get_feature_flags_by_category(category: str, _: bool = Depends(require_auth)):
tradingbot-backend\rest\routes.py:5027:        from services.feature_flags_service import feature_flags_service
tradingbot-backend\rest\routes.py:5029:        flags = feature_flags_service.get_flags_by_category(category)
tradingbot-backend\rest\routes.py:5041:async def set_feature_flag(request: dict[str, Any], _: bool = Depends(require_auth)):
tradingbot-backend\rest\routes.py:5052:        from services.feature_flags_service import feature_flags_service
tradingbot-backend\rest\routes.py:5055:        current_value = feature_flags_service.get_flag(name)
tradingbot-backend\rest\routes.py:5064:        success = feature_flags_service.set_flag(name, value)
tradingbot-backend\rest\routes.py:5076:async def reset_feature_flag(name: str | None = None, _: bool = Depends(require_auth)):
tradingbot-backend\rest\routes.py:5079:        from services.feature_flags_service import feature_flags_service
tradingbot-backend\rest\routes.py:5082:            success = feature_flags_service.reset_flag(name)
tradingbot-backend\rest\routes.py:5088:            success = feature_flags_service.reset_all_flags()
tradingbot-backend\rest\routes.py:5102:        from services.feature_flags_service import feature_flags_service
tradingbot-backend\rest\routes.py:5104:        capabilities = feature_flags_service.get_ui_capabilities()
tradingbot-backend\rest\wallet.py:54:        self.settings = Settings()
tradingbot-backend\scripts\start_debug.py:39:        os.environ[key] = value
tradingbot-backend\scripts\test_isolation.py:28:    os.environ["MARKETDATA_MODE"] = "rest_only"
tradingbot-backend\scripts\test_ws_subs.py:8:    settings = Settings()
tradingbot-backend\services\bitfinex_data.py:42:        self.settings = Settings()
tradingbot-backend\services\bitfinex_websocket.py:29:        self.settings = Settings()
tradingbot-backend\services\bracket_manager.py:38:        self.settings = Settings()
tradingbot-backend\services\enhanced_observability_service.py:132:        self.settings = settings or Settings()
tradingbot-backend\services\exchange_client.py:152:        _client_singleton = ExchangeClient(settings=Settings())
tradingbot-backend\services\feature_flags_service.py:66:        self.settings = settings or Settings()
tradingbot-backend\services\feature_flags_service.py:82:        self.flags["dry_run_enabled"] = FeatureFlag(
tradingbot-backend\services\feature_flags_service.py:83:            "dry_run_enabled",
tradingbot-backend\services\feature_flags_service.py:84:            getattr(self.settings, "DRY_RUN_ENABLED", False),
tradingbot-backend\services\feature_flags_service.py:295:                os.environ["PROB_AUTOTRADE_ENABLED"] = "True" if value else "False"
tradingbot-backend\services\feature_flags_service.py:299:                os.environ["TRADING_PAUSED"] = "True" if value else "False"
tradingbot-backend\services\feature_flags_service.py:301:            elif name == "dry_run_enabled":
tradingbot-backend\services\feature_flags_service.py:303:                os.environ["DRY_RUN_ENABLED"] = "True" if value else "False"
tradingbot-backend\services\feature_flags_service.py:388:            "dry_run": self.get_flag("dry_run_enabled"),
tradingbot-backend\services\feature_flags_service.py:436:feature_flags_service = FeatureFlagsService()
tradingbot-backend\services\health_watchdog.py:57:        self.settings = settings or Settings()
tradingbot-backend\services\history_service.py:57:        self.settings = settings or Settings()
tradingbot-backend\services\market_data_facade.py:34:        self.settings = Settings()
tradingbot-backend\services\market_data_facade.py:128:        settings = Settings()
tradingbot-backend\services\notifications.py:19:        self.settings = settings or Settings()
tradingbot-backend\services\performance.py:45:        self.settings = settings or Settings()
tradingbot-backend\services\prob_model.py:17:        self.settings = settings or Settings()
tradingbot-backend\services\regime_ablation.py:59:        self.settings = settings or Settings()
tradingbot-backend\services\risk_guards.py:27:        self.settings = settings or Settings()
tradingbot-backend\services\risk_manager.py:26:        self.settings = settings or Settings()
tradingbot-backend\services\risk_manager.py:197:            os.environ["CB_ENABLED"] = "True" if enabled else "False"
tradingbot-backend\services\risk_manager.py:200:            os.environ["CB_ERROR_WINDOW_SECONDS"] = str(int(window_seconds))
tradingbot-backend\services\risk_manager.py:203:            os.environ["CB_MAX_ERRORS_PER_WINDOW"] = str(int(max_errors_per_window))
tradingbot-backend\services\risk_manager.py:206:            os.environ["CB_NOTIFY"] = "True" if notify else "False"
tradingbot-backend\services\risk_policy_engine.py:24:        self.settings = settings or Settings()
tradingbot-backend\services\scheduler.py:182:            s = Settings()
tradingbot-backend\services\scheduler.py:205:            s = Settings()
tradingbot-backend\services\scheduler.py:313:            s = Settings()
tradingbot-backend\services\strategy.py:70:            s = settings_service.get_settings(symbol=sym)
tradingbot-backend\services\strategy.py:151:        s = ssvc.get_settings(symbol=sym)
tradingbot-backend\services\strategy.py:221:                    base = ssvc.get_settings(symbol=(data.get("symbol") if isinstance(data, dict) else None))
tradingbot-backend\services\strategy.py:337:        current_settings = settings_service.get_settings(symbol=symbol)
tradingbot-backend\services\strategy.py:436:        updated_settings = StrategySettings(
tradingbot-backend\services\strategy.py:445:        settings_service.save_settings(updated_settings, symbol=symbol)
tradingbot-backend\services\strategy.py:532:                    "ema_weight": settings_service.get_settings(symbol=symbol).ema_weight,
tradingbot-backend\services\strategy.py:533:                    "rsi_weight": settings_service.get_settings(symbol=symbol).rsi_weight,
tradingbot-backend\services\strategy.py:534:                    "atr_weight": settings_service.get_settings(symbol=symbol).atr_weight,
tradingbot-backend\services\strategy.py:563:                    "ema_weight": settings_service.get_settings(symbol=symbol).ema_weight,
tradingbot-backend\services\strategy.py:564:                    "rsi_weight": settings_service.get_settings(symbol=symbol).rsi_weight,
tradingbot-backend\services\strategy.py:565:                    "atr_weight": settings_service.get_settings(symbol=symbol).atr_weight,
tradingbot-backend\services\strategy.py:589:                    current_settings = settings_service.get_settings(symbol=symbol)
tradingbot-backend\services\strategy.py:603:                    current_settings = settings_service.get_settings(symbol=symbol)
tradingbot-backend\services\strategy.py:617:                settings_service.update_settings(
tradingbot-backend\services\strategy.py:628:                current_settings = settings_service.get_settings(symbol=symbol)
tradingbot-backend\services\strategy.py:642:                "ema_weight": settings_service.get_settings(symbol=symbol).ema_weight,
tradingbot-backend\services\strategy.py:643:                "rsi_weight": settings_service.get_settings(symbol=symbol).rsi_weight,
tradingbot-backend\services\strategy.py:644:                "atr_weight": settings_service.get_settings(symbol=symbol).atr_weight,
tradingbot-backend\services\strategy_settings.py:37:        return StrategySettings(
tradingbot-backend\services\strategy_settings.py:48:        return StrategySettings(
tradingbot-backend\services\strategy_settings.py:60:        self.settings = settings or Settings()
tradingbot-backend\services\strategy_settings.py:90:    def get_settings(self, symbol: str | None = None) -> StrategySettings:
tradingbot-backend\services\strategy_settings.py:97:            base = StrategySettings()
tradingbot-backend\services\strategy_settings.py:98:            self.save_settings(base)
tradingbot-backend\services\strategy_settings.py:101:            base = StrategySettings()
tradingbot-backend\services\strategy_settings.py:118:    def save_settings(self, settings_obj: StrategySettings, symbol: str | None = None) -> StrategySettings:
tradingbot-backend\services\trade_constraints.py:25:        self.settings = settings or Settings()
tradingbot-backend\services\trade_counter.py:33:        self.settings = settings or Settings()
tradingbot-backend\services\trading_window.py:44:        self.settings = settings or Settings()
tradingbot-backend\services\unified_circuit_breaker_service.py:104:        self.settings = settings or Settings()
tradingbot-backend\services\unified_risk_service.py:66:        self.settings = settings or Settings()
tradingbot-backend\services\unified_signal_service.py:60:            settings = Settings()
tradingbot-backend\services\validation_service.py:63:        self.settings = settings or Settings()
tradingbot-backend\services\watchlist_service.py:56:                env_syms = (Settings().WS_SUBSCRIBE_SYMBOLS or "").strip()
tradingbot-backend\services\watchlist_service.py:105:        env_syms = (Settings().WS_SUBSCRIBE_SYMBOLS or "").strip()
tradingbot-backend\services\ws_first_data_service.py:97:            settings = Settings()
tradingbot-backend\services\ws_first_data_service.py:111:            settings = Settings()
tradingbot-backend\services\ws_first_data_service.py:119:                    tfs = [tf.strip() for tf in Settings().WS_CANDLE_TIMEFRAMES.split(",") if tf.strip()]
tradingbot-backend\services\ws_first_data_service.py:231:                    s = ssvc.get_settings(symbol=symbol)
tradingbot-backend\services\ws_strategy.py:67:# Exportera funktioner för kompatibilitet med feature_flags_service
tradingbot-backend\tests\conftest.py:8:    os.environ["AUTH_REQUIRED"] = "False"
tradingbot-backend\tests\conftest.py:11:    os.environ.pop("AUTH_REQUIRED", None)
tradingbot-backend\tests\test_advanced_rate_limiter_patterns.py:15:    s = Settings()
tradingbot-backend\tests\test_advanced_rate_limiter_patterns.py:30:    s = Settings()
tradingbot-backend\tests\test_bracket_manager_unit.py:98:    monkeypatch.setattr(bm_mod, "Settings", lambda: DummySettings())
tradingbot-backend\tests\test_exchange_client_retry.py:43:    s = Settings()
tradingbot-backend\tests\test_frontend_smoke.py:22:    # Temporärt sätt AUTH_REQUIRED till True för denna test
tradingbot-backend\tests\test_frontend_smoke.py:23:    original_auth = os.environ.get("AUTH_REQUIRED")
tradingbot-backend\tests\test_frontend_smoke.py:24:    os.environ["AUTH_REQUIRED"] = "True"
tradingbot-backend\tests\test_frontend_smoke.py:32:            os.environ["AUTH_REQUIRED"] = original_auth
tradingbot-backend\tests\test_frontend_smoke.py:34:            os.environ.pop("AUTH_REQUIRED", None)
tradingbot-backend\tests\test_prob_api.py:6:os.environ.setdefault("AUTH_REQUIRED", "False")
tradingbot-backend\tests\test_prob_api_extended.py:7:    os.environ.setdefault("AUTH_REQUIRED", "False")
tradingbot-backend\tests\test_prob_config_api.py:7:    os.environ.setdefault("AUTH_REQUIRED", "False")
tradingbot-backend\tests\test_prob_model_extended.py:16:    os.environ.setdefault("AUTH_REQUIRED", "False")
tradingbot-backend\tests\test_prob_retrain_flow.py:8:    os.environ.setdefault("AUTH_REQUIRED", "False")
tradingbot-backend\tests\test_prob_retrain_flow.py:9:    os.environ["PROB_RETRAIN_ENABLED"] = "True"
tradingbot-backend\tests\test_prob_retrain_flow.py:10:    os.environ["PROB_RETRAIN_SYMBOLS"] = "tBTCUSD"
tradingbot-backend\tests\test_prob_retrain_flow.py:11:    os.environ["PROB_RETRAIN_TIMEFRAME"] = "1m"
tradingbot-backend\tests\test_prob_retrain_flow.py:12:    os.environ["PROB_RETRAIN_LIMIT"] = "100"
tradingbot-backend\tests\test_prob_retrain_flow.py:14:    os.environ["PROB_RETRAIN_OUTPUT_DIR"] = str(out_dir)
tradingbot-backend\tests\test_prob_retrain_flow.py:27:    os.environ["PROB_MODEL_ENABLED"] = "True"
tradingbot-backend\tests\test_prob_retrain_flow.py:45:    os.environ["PROB_MODEL_FILE"] = str(created[0])
tradingbot-backend\tests\test_risk_manager.py:58:    s = Settings()
tradingbot-backend\tests\test_risk_manager.py:97:    s = Settings()
tradingbot-backend\tests\test_scheduler_prob_validation.py:6:os.environ.setdefault("AUTH_REQUIRED", "False")
tradingbot-backend\tests\test_scheduler_prob_windows.py:7:    os.environ.setdefault("AUTH_REQUIRED", "False")
tradingbot-backend\tests\test_socketio_polling.py:7:    monkeypatch.setenv("AUTH_REQUIRED", "False")
tradingbot-backend\tests\test_trade_constraints_service_unit.py:8:    svc = TradeConstraintsService(Settings())
tradingbot-backend\tests\test_trade_constraints_service_unit.py:17:    svc = TradeConstraintsService(Settings())
tradingbot-backend\tests\test_trade_constraints_service_unit.py:29:    svc = TradeConstraintsService(Settings())
tradingbot-backend\tests\test_trade_constraints_service_unit.py:48:    svc = TradeConstraintsService(Settings())
tradingbot-backend\tests\test_trade_counter_service_unit.py:16:    s = Settings()
tradingbot-backend\tests\test_trade_counter_service_unit.py:33:    s = Settings()
tradingbot-backend\tests\test_trade_counter_service_unit.py:47:    s = Settings()
tradingbot-backend\tests\test_trading_window.py:15:        s = Settings()
tradingbot-backend\tests\test_trading_window_service_unit.py:20:    s = Settings()
tradingbot-backend\tests\test_trading_window_service_unit.py:27:    s = Settings()
tradingbot-backend\tests\test_trading_window_service_unit.py:39:    s = Settings()
tradingbot-backend\tests\test_trading_window_service_unit.py:52:    s = Settings()
tradingbot-backend\tests\test_trading_window_service_unit.py:58:    tw2 = TradingWindowService(Settings())
tradingbot-backend\utils\advanced_rate_limiter.py:73:        self.settings = settings or Settings()
tradingbot-backend\utils\bitfinex_rate_limiter.py:23:        self.settings = settings or Settings()
tradingbot-backend\utils\logger.py:85:            settings = Settings()
tradingbot-backend\utils\private_concurrency.py:22:            conc = int(getattr(Settings(), "PRIVATE_REST_CONCURRENCY", 2) or 2)
tradingbot-backend\ws\auth.py:20:settings = Settings()
tradingbot-backend\ws\manager.py:28:        settings = Settings()
tradingbot-backend\ws\manager.py:78:        # Respektera AUTH_REQUIRED med runtime-override
tradingbot-backend\ws\manager.py:82:            auth_required = bool(_rc_get_bool("AUTH_REQUIRED", Settings().AUTH_REQUIRED))
tradingbot-backend\ws\manager.py:84:            auth_required = bool(Settings().AUTH_REQUIRED)
tradingbot-backend\ws\manager.py:85:        if auth_required and not authenticate_socket_io(environ):
tradingbot-backend\ws\position_handler.py:30:        self.settings = Settings()
tradingbot-backend\ws\wallet_handler.py:30:        self.settings = Settings()


