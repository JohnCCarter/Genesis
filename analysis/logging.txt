
.venv\Lib\site-packages\nodeenv.py:21:import logging
.venv\Lib\site-packages\nodeenv.py:202:    loggr = logging.getLogger("nodeenv")
.venv\Lib\site-packages\nodeenv.py:203:    loggr.setLevel(logging.INFO)
.venv\Lib\site-packages\nodeenv.py:211:    logging.StreamHandler.emit = emit
.venv\Lib\site-packages\nodeenv.py:214:    ch = logging.StreamHandler()
.venv\Lib\site-packages\nodeenv.py:215:    ch.setLevel(logging.DEBUG)
.venv\Lib\site-packages\nodeenv.py:218:    formatter = logging.Formatter(fmt="%(message)s")
.venv\Lib\site-packages\nodeenv.py:414:        logger.debug(' * Creating: %s ... ', path, extra=dict(continued=True))
.venv\Lib\site-packages\nodeenv.py:416:        logger.debug('done.')
.venv\Lib\site-packages\nodeenv.py:418:        logger.debug(' * Directory %s already exists', path)
.venv\Lib\site-packages\nodeenv.py:436:        logger.debug(' * Writing %s ... ', dest, extra=dict(continued=True))
.venv\Lib\site-packages\nodeenv.py:440:        logger.debug('done.')
.venv\Lib\site-packages\nodeenv.py:446:            logger.debug(' * Content %s already in place', dest)
.venv\Lib\site-packages\nodeenv.py:450:            logger.info(' * File %s exists with different content; '
.venv\Lib\site-packages\nodeenv.py:455:            logger.info(' * Appending data to %s', dest)
.venv\Lib\site-packages\nodeenv.py:460:        logger.info(' * Overwriting %s with new content', dest)
.venv\Lib\site-packages\nodeenv.py:480:    logger.debug(" ** Running command %s" % cmd_desc)
.venv\Lib\site-packages\nodeenv.py:503:        logger.error("Error %s while executing command %s" % (e, cmd_desc))
.venv\Lib\site-packages\nodeenv.py:520:            logger.info(line)
.venv\Lib\site-packages\nodeenv.py:527:                logger.critical(s)
.venv\Lib\site-packages\nodeenv.py:604:            logger.warning(
.venv\Lib\site-packages\nodeenv.py:617:    logger.info('.', extra=dict(continued=True))
.venv\Lib\site-packages\nodeenv.py:619:    logger.info('.', extra=dict(continued=True))
.venv\Lib\site-packages\nodeenv.py:680:    logger.info('.', extra=dict(continued=True))
.venv\Lib\site-packages\nodeenv.py:702:    logger.info('.', extra=dict(continued=True))
.venv\Lib\site-packages\nodeenv.py:728:        logger.debug(' * Temporarily pointing python to %s', python2_path)
.venv\Lib\site-packages\nodeenv.py:751:    logger.info('.', extra=dict(continued=True))
.venv\Lib\site-packages\nodeenv.py:753:    logger.info('.', extra=dict(continued=True))
.venv\Lib\site-packages\nodeenv.py:766:        logger.info('')
.venv\Lib\site-packages\nodeenv.py:775:    logger.info(' * Install %s node (%s) ' % (src_type, args.node),
.venv\Lib\site-packages\nodeenv.py:793:                logger.warning('Failed to download from %s' % node_url)
.venv\Lib\site-packages\nodeenv.py:795:    logger.info('.', extra=dict(continued=True))
.venv\Lib\site-packages\nodeenv.py:802:    logger.info(' done.')
.venv\Lib\site-packages\nodeenv.py:810:    logger.info(' * Install npm.js (%s) ... ' % args.npm,
.venv\Lib\site-packages\nodeenv.py:832:        logger.info(out)
.venv\Lib\site-packages\nodeenv.py:833:    logger.info('done.')
.venv\Lib\site-packages\nodeenv.py:841:    logger.info(' * Install npm.js (%s) ... ' % args.npm,
.venv\Lib\site-packages\nodeenv.py:882:    logger.info(' * Install node.js packages ... ',
.venv\Lib\site-packages\nodeenv.py:902:    logger.info('done.')
.venv\Lib\site-packages\nodeenv.py:983:                logger.error('Error: Failed to create nodejs.exe link')
.venv\Lib\site-packages\nodeenv.py:999:        logger.info(' * Environment already exists: %s', env_dir)
.venv\Lib\site-packages\nodeenv.py:1045:        logger.info('\t'.join(chunk))
.venv\Lib\site-packages\nodeenv.py:1072:            logger.error('No python virtualenv is available')
.venv\Lib\site-packages\nodeenv.py:1096:        logger.error('Installing system node.js on win32 is not supported!')
.venv\Lib\site-packages\pip_requirements_parser.py:31:import logging
.venv\Lib\site-packages\pip_requirements_parser.py:1901:        logger.debug("Ignoring egg= fragment in %s", link)
.venv\Lib\site-packages\pip_requirements_parser.py:2471:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_requirements_parser.py:2822:        line is from, for logging purposes in case of an error.
.venv\Lib\site-packages\typing_extensions.py:1851:           def add_logging(f: Callable[P, T]) -> Callable[P, T]:
.venv\Lib\site-packages\typing_extensions.py:1852:               '''A type-safe decorator to add logging to a function.'''
.venv\Lib\site-packages\typing_extensions.py:1854:                   logging.info(f'{f.__name__} was called')
.venv\Lib\site-packages\typing_extensions.py:1858:           @add_logging
.venv\Lib\site-packages\anyio\streams\tls.py:3:import logging
.venv\Lib\site-packages\anyio\streams\tls.py:284:            logging.getLogger(__name__).exception("Error during TLS handshake")
.venv\Lib\site-packages\astroid\modutils.py:24:import logging
.venv\Lib\site-packages\astroid\modutils.py:42:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\astroid\modutils.py:186:        logger.error(
.venv\Lib\site-packages\astroid\modutils.py:191:        logger.info(
.venv\Lib\site-packages\astroid\raw_building.py:14:import logging
.venv\Lib\site-packages\astroid\raw_building.py:28:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\astroid\raw_building.py:571:                        logger.error(
.venv\Lib\site-packages\astroid\raw_building.py:579:                        logger.info(
.venv\Lib\site-packages\astroid\_backport_stdlib_names.py:189:        "logging",
.venv\Lib\site-packages\bandit\cli\baseline.py:15:import logging
.venv\Lib\site-packages\bandit\cli\baseline.py:31:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\cli\baseline.py:145:# #################### Setup logging ##########################################
.venv\Lib\site-packages\bandit\cli\baseline.py:147:    """Init logger."""
.venv\Lib\site-packages\bandit\cli\baseline.py:149:    log_level = logging.INFO
.venv\Lib\site-packages\bandit\cli\baseline.py:151:    logging.captureWarnings(True)
.venv\Lib\site-packages\bandit\cli\baseline.py:153:    handler = logging.StreamHandler(sys.stdout)
.venv\Lib\site-packages\bandit\cli\baseline.py:154:    handler.setFormatter(logging.Formatter(log_format_string))
.venv\Lib\site-packages\bandit\cli\config_generator.py:7:import logging
.venv\Lib\site-packages\bandit\cli\config_generator.py:16:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\cli\config_generator.py:51:    """Init logger."""
.venv\Lib\site-packages\bandit\cli\config_generator.py:53:    log_level = logging.INFO
.venv\Lib\site-packages\bandit\cli\config_generator.py:55:    logging.captureWarnings(True)
.venv\Lib\site-packages\bandit\cli\config_generator.py:57:    handler = logging.StreamHandler(sys.stdout)
.venv\Lib\site-packages\bandit\cli\config_generator.py:58:    handler.setFormatter(logging.Formatter(log_format_string))
.venv\Lib\site-packages\bandit\cli\main.py:8:import logging
.venv\Lib\site-packages\bandit\cli\main.py:20:LOG = logging.getLogger()
.venv\Lib\site-packages\bandit\cli\main.py:23:def _init_logger(log_level=logging.INFO, log_format=None):
.venv\Lib\site-packages\bandit\cli\main.py:24:    """Initialize the logger.
.venv\Lib\site-packages\bandit\cli\main.py:27:    :return: An instantiated logging instance
.venv\Lib\site-packages\bandit\cli\main.py:37:    logging.captureWarnings(True)
.venv\Lib\site-packages\bandit\cli\main.py:40:    handler = logging.StreamHandler(sys.stderr)
.venv\Lib\site-packages\bandit\cli\main.py:41:    handler.setFormatter(logging.Formatter(log_format_string))
.venv\Lib\site-packages\bandit\cli\main.py:43:    LOG.debug("logging initialized")
.venv\Lib\site-packages\bandit\cli\main.py:136:    # bring our logging stuff up as early as possible
.venv\Lib\site-packages\bandit\cli\main.py:138:        logging.DEBUG
.venv\Lib\site-packages\bandit\cli\main.py:140:        else logging.INFO
.venv\Lib\site-packages\bandit\cli\main.py:609:        _init_logger(log_level=logging.DEBUG, log_format=log_format)
.venv\Lib\site-packages\bandit\cli\main.py:612:        _init_logger(log_level=logging.WARN)
.venv\Lib\site-packages\bandit\core\config.py:5:import logging
.venv\Lib\site-packages\bandit\core\config.py:22:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\core\extension_loader.py:3:import logging
.venv\Lib\site-packages\bandit\core\extension_loader.py:10:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\core\manager.py:9:import logging
.venv\Lib\site-packages\bandit\core\manager.py:26:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\core\manager.py:271:            and LOG.getEffectiveLevel() <= logging.INFO
.venv\Lib\site-packages\bandit\core\manager.py:336:            if not LOG.isEnabledFor(logging.DEBUG):
.venv\Lib\site-packages\bandit\core\meta_ast.py:6:import logging
.venv\Lib\site-packages\bandit\core\meta_ast.py:8:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\core\node_visitor.py:6:import logging
.venv\Lib\site-packages\bandit\core\node_visitor.py:13:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\core\tester.py:6:import logging
.venv\Lib\site-packages\bandit\core\tester.py:14:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\core\test_properties.py:5:import logging
.venv\Lib\site-packages\bandit\core\test_properties.py:9:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\core\test_set.py:6:import logging
.venv\Lib\site-packages\bandit\core\test_set.py:11:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\core\utils.py:6:import logging
.venv\Lib\site-packages\bandit\core\utils.py:15:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\formatters\csv.py:33:import logging
.venv\Lib\site-packages\bandit\formatters\csv.py:38:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\formatters\custom.py:28:import logging
.venv\Lib\site-packages\bandit\formatters\custom.py:36:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\formatters\html.py:149:import logging
.venv\Lib\site-packages\bandit\formatters\html.py:157:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\formatters\json.py:80:import logging
.venv\Lib\site-packages\bandit\formatters\json.py:87:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\formatters\sarif.py:128:import logging
.venv\Lib\site-packages\bandit\formatters\sarif.py:140:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\formatters\sarif.py:156:    log = om.SarifLog(
.venv\Lib\site-packages\bandit\formatters\screen.py:36:import logging
.venv\Lib\site-packages\bandit\formatters\screen.py:58:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\formatters\text.py:36:import logging
.venv\Lib\site-packages\bandit\formatters\text.py:44:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\formatters\xml.py:36:import logging
.venv\Lib\site-packages\bandit\formatters\xml.py:42:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\formatters\yaml.py:65:import logging
.venv\Lib\site-packages\bandit\formatters\yaml.py:73:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:6:B612: Test for insecure use of logging.config.listen
.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:10:``logging.config.listen`` function. The logging.config.listen
.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:19:logging.config.listen provides the ability to verify bytes received
.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:26:    >> Issue: [B612:logging_config_listen] Use of insecure
.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:27:    logging.config.listen detected.
.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:30:       Location: examples/logging_config_insecure_listen.py:3:4
.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:32:    3	t = logging.config.listen(9999)
.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:36: - https://docs.python.org/3/library/logging.config.html#logging.config.listen
.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:48:def logging_config_insecure_listen(context):
.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:50:        context.call_function_name_qual == "logging.config.listen"
.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:57:            text="Use of insecure logging.config.listen detected.",
.venv\Lib\site-packages\bandit\plugins\try_except_continue.py:12:a later point in the program, typically some error handling or logging action
.venv\Lib\site-packages\bandit\plugins\try_except_pass.py:12:a later point in the program, typically some error handling or logging action
.venv\Lib\site-packages\black\concurrency.py:8:import logging
.venv\Lib\site-packages\black\concurrency.py:64:        cf_logger = logging.getLogger("concurrent.futures")
.venv\Lib\site-packages\black\concurrency.py:65:        cf_logger.setLevel(logging.CRITICAL)
.venv\Lib\site-packages\blackd\__init__.py:2:import logging
.venv\Lib\site-packages\blackd\__init__.py:81:    logging.basicConfig(level=logging.INFO)
.venv\Lib\site-packages\blackd\__init__.py:167:        logging.exception("Exception during handling a request")
.venv\Lib\site-packages\blib2to3\pgen2\driver.py:20:import logging
.venv\Lib\site-packages\blib2to3\pgen2\driver.py:27:from logging import Logger
.venv\Lib\site-packages\blib2to3\pgen2\driver.py:112:            logger = logging.getLogger(__name__)
.venv\Lib\site-packages\blib2to3\pgen2\driver.py:152:                self.logger.debug(
.venv\Lib\site-packages\blib2to3\pgen2\driver.py:165:                    self.logger.debug("Stop.")
.venv\Lib\site-packages\blib2to3\pgen2\driver.py:256:        logger = logging.getLogger(__name__)
.venv\Lib\site-packages\blib2to3\pgen2\driver.py:312:    logging.basicConfig(level=logging.INFO, stream=sys.stdout, format="%(message)s")
.venv\Lib\site-packages\bs4\dammit.py:16:import logging
.venv\Lib\site-packages\bs4\dammit.py:583:        self.log = logging.getLogger(__name__)
.venv\Lib\site-packages\bs4\tests\test_dammit.py:3:import logging
.venv\Lib\site-packages\bs4\tests\test_dammit.py:119:        logging.disable(logging.WARNING)
.venv\Lib\site-packages\bs4\tests\test_dammit.py:131:            logging.disable(logging.NOTSET)
.venv\Lib\site-packages\bs4\tests\test_pageelement.py:152:   console.log("< < hey > > ");
.venv\Lib\site-packages\bs4\tests\test_pageelement.py:161:   console.log("< < hey > > ");
.venv\Lib\site-packages\bs4\tests\test_soup.py:5:import logging
.venv\Lib\site-packages\bs4\tests\test_soup.py:470:        logging.disable(logging.WARNING)
.venv\Lib\site-packages\bs4\tests\test_soup.py:483:            logging.disable(logging.NOTSET)
.venv\Lib\site-packages\bs4\tests\__init__.py:1047:        soup.script.string = 'console.log("< < hey > > ");'
.venv\Lib\site-packages\cachecontrol\controller.py:12:import logging
.venv\Lib\site-packages\cachecontrol\controller.py:32:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\cachecontrol\controller.py:120:                logger.debug("Ignoring unknown cache-control directive: %s", directive)
.venv\Lib\site-packages\cachecontrol\controller.py:130:                        logger.debug(
.venv\Lib\site-packages\cachecontrol\controller.py:135:                    logger.debug(
.venv\Lib\site-packages\cachecontrol\controller.py:156:            logger.debug("No cache entry available")
.venv\Lib\site-packages\cachecontrol\controller.py:166:            logger.warning("Cache entry deserialization failed, entry ignored")
.venv\Lib\site-packages\cachecontrol\controller.py:176:        logger.debug('Looking up "%s" in the cache', cache_url)
.venv\Lib\site-packages\cachecontrol\controller.py:181:            logger.debug('Request header has "no-cache", cache bypassed')
.venv\Lib\site-packages\cachecontrol\controller.py:185:            logger.debug('Request header has "max_age" as 0, cache bypassed')
.venv\Lib\site-packages\cachecontrol\controller.py:207:            logger.debug(msg)
.venv\Lib\site-packages\cachecontrol\controller.py:215:                logger.debug("Purging cached response: no date or etag")
.venv\Lib\site-packages\cachecontrol\controller.py:217:            logger.debug("Ignoring cached response: no date")
.venv\Lib\site-packages\cachecontrol\controller.py:225:        logger.debug("Current age based on date: %i", current_age)
.venv\Lib\site-packages\cachecontrol\controller.py:240:            logger.debug("Freshness lifetime from max-age: %i", freshness_lifetime)
.venv\Lib\site-packages\cachecontrol\controller.py:248:                logger.debug("Freshness lifetime from expires: %i", freshness_lifetime)
.venv\Lib\site-packages\cachecontrol\controller.py:255:            logger.debug(
.venv\Lib\site-packages\cachecontrol\controller.py:263:            logger.debug("Adjusted current age from min-fresh: %i", current_age)
.venv\Lib\site-packages\cachecontrol\controller.py:267:            logger.debug('The response is "fresh", returning cached response')
.venv\Lib\site-packages\cachecontrol\controller.py:268:            logger.debug("%i > %i", freshness_lifetime, current_age)
.venv\Lib\site-packages\cachecontrol\controller.py:273:            logger.debug('The cached response is "stale" with no etag, purging')
.venv\Lib\site-packages\cachecontrol\controller.py:350:            logger.debug(
.venv\Lib\site-packages\cachecontrol\controller.py:383:        logger.debug('Updating cache with response from "%s"', cache_url)
.venv\Lib\site-packages\cachecontrol\controller.py:389:            logger.debug('Response header has "no-store"')
.venv\Lib\site-packages\cachecontrol\controller.py:392:            logger.debug('Request header has "no-store"')
.venv\Lib\site-packages\cachecontrol\controller.py:394:            logger.debug('Purging existing cache entry to honor "no-store"')
.venv\Lib\site-packages\cachecontrol\controller.py:405:            logger.debug('Response header has "Vary: *"')
.venv\Lib\site-packages\cachecontrol\controller.py:418:            logger.debug(f"etag object cached for {expires_time} seconds")
.venv\Lib\site-packages\cachecontrol\controller.py:419:            logger.debug("Caching due to etag")
.venv\Lib\site-packages\cachecontrol\controller.py:425:            logger.debug("Caching permanent redirect")
.venv\Lib\site-packages\cachecontrol\controller.py:438:                logger.debug("Caching b/c date exists and max-age > 0")
.venv\Lib\site-packages\cachecontrol\controller.py:458:                    logger.debug(
.venv\Lib\site-packages\cachecontrol\filewrapper.py:67:        # TODO: Add some logging here...
.venv\Lib\site-packages\cachecontrol\_cmd.py:6:import logging
.venv\Lib\site-packages\cachecontrol\_cmd.py:22:def setup_logging() -> None:
.venv\Lib\site-packages\cachecontrol\_cmd.py:23:    logger.setLevel(logging.DEBUG)
.venv\Lib\site-packages\cachecontrol\_cmd.py:24:    handler = logging.StreamHandler()
.venv\Lib\site-packages\cachecontrol\_cmd.py:25:    logger.addHandler(handler)
.venv\Lib\site-packages\cachecontrol\_cmd.py:53:    # Turn on logging
.venv\Lib\site-packages\cachecontrol\_cmd.py:54:    setup_logging()
.venv\Lib\site-packages\cachecontrol\__init__.py:27:import logging
.venv\Lib\site-packages\cachecontrol\__init__.py:29:logging.getLogger(__name__).addHandler(logging.NullHandler())
.venv\Lib\site-packages\charset_normalizer\api.py:3:import logging
.venv\Lib\site-packages\charset_normalizer\api.py:26:logger = logging.getLogger("charset_normalizer")
.venv\Lib\site-packages\charset_normalizer\api.py:27:explain_handler = logging.StreamHandler()
.venv\Lib\site-packages\charset_normalizer\api.py:29:    logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
.venv\Lib\site-packages\charset_normalizer\api.py:60:    Custom logging format and handler can be set manually.
.venv\Lib\site-packages\charset_normalizer\api.py:71:        previous_logger_level: int = logger.level
.venv\Lib\site-packages\charset_normalizer\api.py:72:        logger.addHandler(explain_handler)
.venv\Lib\site-packages\charset_normalizer\api.py:73:        logger.setLevel(TRACE)
.venv\Lib\site-packages\charset_normalizer\api.py:78:        logger.debug("Encoding detection on empty bytes, assuming utf_8 intention.")
.venv\Lib\site-packages\charset_normalizer\api.py:80:            logger.removeHandler(explain_handler)
.venv\Lib\site-packages\charset_normalizer\api.py:81:            logger.setLevel(previous_logger_level or logging.WARNING)
.venv\Lib\site-packages\charset_normalizer\api.py:85:        logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:96:        logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:107:        logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:124:        logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:131:        logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:146:        logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:168:        logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:199:            logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:206:            logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:216:            logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:244:                logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:261:            logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:282:            logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:330:            logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:349:                logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:361:            logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:393:        logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:406:            logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:430:            logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:462:                logger.debug(
.venv\Lib\site-packages\charset_normalizer\api.py:467:                    logger.removeHandler(explain_handler)
.venv\Lib\site-packages\charset_normalizer\api.py:468:                    logger.setLevel(previous_logger_level)
.venv\Lib\site-packages\charset_normalizer\api.py:480:            logger.debug(
.venv\Lib\site-packages\charset_normalizer\api.py:485:                logger.removeHandler(explain_handler)
.venv\Lib\site-packages\charset_normalizer\api.py:486:                logger.setLevel(previous_logger_level)
.venv\Lib\site-packages\charset_normalizer\api.py:491:            logger.debug(
.venv\Lib\site-packages\charset_normalizer\api.py:497:                logger.removeHandler(explain_handler)
.venv\Lib\site-packages\charset_normalizer\api.py:498:                logger.setLevel(previous_logger_level)
.venv\Lib\site-packages\charset_normalizer\api.py:503:            logger.log(
.venv\Lib\site-packages\charset_normalizer\api.py:509:            logger.debug(
.venv\Lib\site-packages\charset_normalizer\api.py:523:            logger.debug("Encoding detection: utf_8 will be used as a fallback match")
.venv\Lib\site-packages\charset_normalizer\api.py:526:            logger.debug("Encoding detection: ascii will be used as a fallback match")
.venv\Lib\site-packages\charset_normalizer\api.py:530:        logger.debug(
.venv\Lib\site-packages\charset_normalizer\api.py:536:        logger.debug("Encoding detection: Unable to determine any suitable charset.")
.venv\Lib\site-packages\charset_normalizer\api.py:539:        logger.removeHandler(explain_handler)
.venv\Lib\site-packages\charset_normalizer\api.py:540:        logger.setLevel(previous_logger_level)
.venv\Lib\site-packages\charset_normalizer\constant.py:573:# Logging LEVEL below DEBUG
.venv\Lib\site-packages\charset_normalizer\md.py:4:from logging import getLogger
.venv\Lib\site-packages\charset_normalizer\md.py:621:        logger.log(
.venv\Lib\site-packages\charset_normalizer\md.py:629:            logger.log(TRACE, f"Starting with: {decoded_sequence[:16]}")
.venv\Lib\site-packages\charset_normalizer\md.py:630:            logger.log(TRACE, f"Ending with: {decoded_sequence[-16::]}")
.venv\Lib\site-packages\charset_normalizer\md.py:633:            logger.log(TRACE, f"{dt.__class__}: {dt.ratio}")
.venv\Lib\site-packages\charset_normalizer\utils.py:4:import logging
.venv\Lib\site-packages\charset_normalizer\utils.py:348:def set_logging_handler(
.venv\Lib\site-packages\charset_normalizer\utils.py:350:    level: int = logging.INFO,
.venv\Lib\site-packages\charset_normalizer\utils.py:353:    logger = logging.getLogger(name)
.venv\Lib\site-packages\charset_normalizer\utils.py:354:    logger.setLevel(level)
.venv\Lib\site-packages\charset_normalizer\utils.py:356:    handler = logging.StreamHandler()
.venv\Lib\site-packages\charset_normalizer\utils.py:357:    handler.setFormatter(logging.Formatter(format_string))
.venv\Lib\site-packages\charset_normalizer\utils.py:358:    logger.addHandler(handler)
.venv\Lib\site-packages\charset_normalizer\__init__.py:24:import logging
.venv\Lib\site-packages\charset_normalizer\__init__.py:29:from .utils import set_logging_handler
.venv\Lib\site-packages\charset_normalizer\__init__.py:42:    "set_logging_handler",
.venv\Lib\site-packages\charset_normalizer\__init__.py:46:# https://docs.python.org/3.3/howto/logging.html#configuring-logging-for-a-library
.venv\Lib\site-packages\charset_normalizer\__init__.py:48:logging.getLogger("charset_normalizer").addHandler(logging.NullHandler())
.venv\Lib\site-packages\click\core.py:1359:        self.format_epilog(ctx, formatter)
.venv\Lib\site-packages\click\core.py:1390:    def format_epilog(self, ctx: Context, formatter: HelpFormatter) -> None:
.venv\Lib\site-packages\coverage\debug.py:399:    """Track process creation for debug logging."""
.venv\Lib\site-packages\coverage\debug.py:542:def log(msg: str, stack: bool = False) -> None:  # pragma: debugging
.venv\Lib\site-packages\coverage\pytracer.py:126:    def log(self, marker: str, *args: Any) -> None:
.venv\Lib\site-packages\coverage\pytracer.py:127:        """For hard-core logging of what this tracer is doing."""
.venv\Lib\site-packages\coverage\pytracer.py:159:        # self.log(":", f"{code.co_filename} {f.f_lineno} {code.co_name}()", event)
.venv\Lib\site-packages\coverage\pytracer.py:166:                self.log("---\nX", f.f_code.co_filename, f.f_lineno)
.venv\Lib\site-packages\coverage\pytracer.py:168:                    self.log(">", f.f_code.co_filename, f.f_lineno, f.f_code.co_name, f.f_trace)
.venv\Lib\site-packages\coverage\pytracer.py:176:                self.log(
.venv\Lib\site-packages\coverage\pytracer.py:185:        #     self.log("---\n*", frame.f_code.co_filename, self.cur_file_name, frame.f_lineno)
.venv\Lib\site-packages\coverage\pytracer.py:343:                # self.log("~", "stopping on different threads")
.venv\Lib\site-packages\coverage\sysmon.py:57:    class LoggingWrapper:
.venv\Lib\site-packages\coverage\sysmon.py:66:                log(f"{self.namespace}.{name}{args}{kwargs}")
.venv\Lib\site-packages\coverage\sysmon.py:71:    sys_monitoring = LoggingWrapper(sys_monitoring, "sys.monitoring")
.venv\Lib\site-packages\coverage\sysmon.py:82:    def log(msg: str) -> None:
.venv\Lib\site-packages\coverage\sysmon.py:83:        """Write a message to our detailed debugging log(s)."""
.venv\Lib\site-packages\coverage\sysmon.py:91:            log(f"New thread {tid} {tslug}:\n{short_stack()}")
.venv\Lib\site-packages\coverage\sysmon.py:123:                    # log(f"{method.__name__}() stack:\n{short_stack()}")
.venv\Lib\site-packages\coverage\sysmon.py:129:                    log(f"{id(self):#x}:{method.__name__}({', '.join(args_reprs)})")
.venv\Lib\site-packages\coverage\sysmon.py:131:                    # log(f" end {id(self):#x}:{method.__name__}({', '.join(args_reprs)})")
.venv\Lib\site-packages\coverage\sysmon.py:134:                    log(f"!!{exc.__class__.__name__}: {exc}")
.venv\Lib\site-packages\coverage\sysmon.py:136:                        log("".join(traceback.format_exception(exc)))
.venv\Lib\site-packages\coverage\sysmon.py:142:                        log("oops, shutting off events with disabled tool id")
.venv\Lib\site-packages\coverage\sysmon.py:151:    def log(msg: str) -> None:
.venv\Lib\site-packages\coverage\sysmon.py:152:        """Write a message to our detailed debugging log(s), but not really."""
.venv\Lib\site-packages\coverage\sysmon.py:385:            # log(f"adding {arc=}")
.venv\Lib\site-packages\coverage\sysmon.py:399:        # log(f"adding {line_number=}")
.venv\Lib\site-packages\coverage\sysmon.py:412:        # log(f"adding {arc=}")
.venv\Lib\site-packages\coverage\sysmon.py:430:            # log(f"branch_trails for {code}:\n    {code_info.branch_trails}")
.venv\Lib\site-packages\coverage\sysmon.py:440:        # log(f"{dest_info = }")
.venv\Lib\site-packages\coverage\sysmon.py:447:                    # log(f"adding {arc=}")
.venv\Lib\site-packages\coverage\sysmon.py:459:                # log(f"adding unforeseen {arc=}")
.venv\Lib\site-packages\dateutil\zoneinfo\rebuild.py:1:import logging
.venv\Lib\site-packages\dateutil\zoneinfo\rebuild.py:72:        logging.error(
.venv\Lib\site-packages\dill\logger.py:9:Logging utilities for dill.
.venv\Lib\site-packages\dill\logger.py:11:The 'logger' object is dill's top-level logger.
.venv\Lib\site-packages\dill\logger.py:49:import logging
.venv\Lib\site-packages\dill\logger.py:62:# Here is some domumentation of the Standard Library's logging internals that
.venv\Lib\site-packages\dill\logger.py:64:# obtained by calling logging.getLogger('dill') and therefore is an instance of
.venv\Lib\site-packages\dill\logger.py:65:# logging.getLoggerClass() at the call time.  As this is controlled by the user,
.venv\Lib\site-packages\dill\logger.py:72:# Python's logging functionality can be conceptually divided into five steps:
.venv\Lib\site-packages\dill\logger.py:73:#   0. Check logging level -> abort if call level is greater than logger level
.venv\Lib\site-packages\dill\logger.py:79:# dill.logging.logger.log ->        # or logger.info, etc.
.venv\Lib\site-packages\dill\logger.py:80:#   Logger.log ->               \
.venv\Lib\site-packages\dill\logger.py:81:#     Logger._log ->             }- accept 'extra' parameter for custom record entries
.venv\Lib\site-packages\dill\logger.py:82:#       Logger.makeRecord ->    /
.venv\Lib\site-packages\dill\logger.py:84:#       Logger.handle ->
.venv\Lib\site-packages\dill\logger.py:85:#         Logger.callHandlers ->
.venv\Lib\site-packages\dill\logger.py:96:# NOTE: All methods from the second line on are from logging.__init__.py
.venv\Lib\site-packages\dill\logger.py:98:class TraceAdapter(logging.LoggerAdapter):
.venv\Lib\site-packages\dill\logger.py:102:    A single instance of this wraps the module's logger, as the logging API
.venv\Lib\site-packages\dill\logger.py:110:    >>> from dill.logger import adapter as logger  #NOTE: not dill.logger.logger
.venv\Lib\site-packages\dill\logger.py:113:    >>>     logger.trace(pickler, "Message with %s and %r etc. placeholders", 'text', obj)
.venv\Lib\site-packages\dill\logger.py:121:        self.logger.addHandler(handler)
.venv\Lib\site-packages\dill\logger.py:123:        self.logger.removeHandler(handler)
.venv\Lib\site-packages\dill\logger.py:131:        if self.isEnabledFor(logging.INFO):
.venv\Lib\site-packages\dill\logger.py:138:            logger.info(msg, *args, **kwargs)
.venv\Lib\site-packages\dill\logger.py:170:class TraceFormatter(logging.Formatter):
.venv\Lib\site-packages\dill\logger.py:205:            power = int(math.log(record.size, 2)) // 10
.venv\Lib\site-packages\dill\logger.py:211:logger = logging.getLogger('dill')
.venv\Lib\site-packages\dill\logger.py:212:logger.propagate = False
.venv\Lib\site-packages\dill\logger.py:214:stderr_handler = logging._StderrHandler()
.venv\Lib\site-packages\dill\logger.py:247:        >>>     log("> D = %r", D)
.venv\Lib\site-packages\dill\logger.py:249:        >>>     log("> squared = %r", squared)
.venv\Lib\site-packages\dill\logger.py:258:    logger.setLevel(logging.INFO if arg else logging.WARNING)
.venv\Lib\site-packages\dill\logger.py:271:                self.handler = logging.StreamHandler(self.file)
.venv\Lib\site-packages\dill\logger.py:273:                self.handler = logging.FileHandler(self.file, self.mode)
.venv\Lib\site-packages\dill\logger.py:277:        adapter.setLevel(logging.INFO)
.venv\Lib\site-packages\dill\_dill.py:384:                    logger.trace(pickler, "Nu: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:387:                    logger.trace(pickler, "# Nu")
.venv\Lib\site-packages\dill\_dill.py:398:                    logger.trace(pickler, "Dt: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:400:                    logger.trace(pickler, "# Dt")
.venv\Lib\site-packages\dill\_dill.py:411:                    logger.trace(pickler, "Nu: (%s, %s)", obj.shape, obj.dtype)
.venv\Lib\site-packages\dill\_dill.py:415:                    logger.trace(pickler, "# Nu")
.venv\Lib\site-packages\dill\_dill.py:427:        logger.trace_setup(self)
.venv\Lib\site-packages\dill\_dill.py:1159:#    logger.trace(pickler, "Co: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1161:#    logger.trace(pickler, "# Co")
.venv\Lib\site-packages\dill\_dill.py:1170:    logger.trace(pickler, "Co: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1233:    logger.trace(pickler, "# Co")
.venv\Lib\site-packages\dill\_dill.py:1244:        logger.trace(pickler, "D1: %s", _repr_dict(obj)) # obj
.venv\Lib\site-packages\dill\_dill.py:1246:        logger.trace(pickler, "# D1")
.venv\Lib\site-packages\dill\_dill.py:1248:        logger.trace(pickler, "D3: %s", _repr_dict(obj)) # obj
.venv\Lib\site-packages\dill\_dill.py:1250:        logger.trace(pickler, "# D3")
.venv\Lib\site-packages\dill\_dill.py:1254:        logger.trace(pickler, "D4: %s", _repr_dict(obj)) # obj
.venv\Lib\site-packages\dill\_dill.py:1256:        logger.trace(pickler, "# D4")
.venv\Lib\site-packages\dill\_dill.py:1258:        logger.trace(pickler, "D2: %s", _repr_dict(obj)) # obj
.venv\Lib\site-packages\dill\_dill.py:1263:        logger.trace(pickler, "# D2")
.venv\Lib\site-packages\dill\_dill.py:1271:                logger.trace(pickler, "Dkvi: <%s>", obj)
.venv\Lib\site-packages\dill\_dill.py:1274:                logger.trace(pickler, "# Dkvi")
.venv\Lib\site-packages\dill\_dill.py:1288:            logger.trace(pickler, "Dk: <%s>", obj)
.venv\Lib\site-packages\dill\_dill.py:1291:            logger.trace(pickler, "# Dk")
.venv\Lib\site-packages\dill\_dill.py:1294:            logger.trace(pickler, "Dv: <%s>", obj)
.venv\Lib\site-packages\dill\_dill.py:1297:            logger.trace(pickler, "# Dv")
.venv\Lib\site-packages\dill\_dill.py:1300:            logger.trace(pickler, "Di: <%s>", obj)
.venv\Lib\site-packages\dill\_dill.py:1302:            logger.trace(pickler, "# Di")
.venv\Lib\site-packages\dill\_dill.py:1325:        logger.trace(pickler, "C1: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1329:        logger.trace(pickler, "# C1")
.venv\Lib\site-packages\dill\_dill.py:1331:        logger.trace(pickler, "C2: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1334:        logger.trace(pickler, "# C2")
.venv\Lib\site-packages\dill\_dill.py:1341:        logger.trace(pickler, "Ga0: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1343:        logger.trace(pickler, "# Ga0")
.venv\Lib\site-packages\dill\_dill.py:1345:        logger.trace(pickler, "Ga1: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1347:        logger.trace(pickler, "# Ga1")
.venv\Lib\site-packages\dill\_dill.py:1349:        logger.trace(pickler, "Ga2: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1351:        logger.trace(pickler, "# Ga2")
.venv\Lib\site-packages\dill\_dill.py:1357:        logger.trace(pickler, "Th: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1359:        logger.trace(pickler, "# Th")
.venv\Lib\site-packages\dill\_dill.py:1364:    logger.trace(pickler, "Lo: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1366:    logger.trace(pickler, "# Lo")
.venv\Lib\site-packages\dill\_dill.py:1371:    logger.trace(pickler, "RL: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1376:    logger.trace(pickler, "# RL")
.venv\Lib\site-packages\dill\_dill.py:1381:    logger.trace(pickler, "So: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1383:    logger.trace(pickler, "# So")
.venv\Lib\site-packages\dill\_dill.py:1418:    logger.trace(pickler, "Fi: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1420:    logger.trace(pickler, "# Fi")
.venv\Lib\site-packages\dill\_dill.py:1426:        logger.trace(pickler, "Fi: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1428:        logger.trace(pickler, "# Fi")
.venv\Lib\site-packages\dill\_dill.py:1436:        logger.trace(pickler, "Fi: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1438:        logger.trace(pickler, "# Fi")
.venv\Lib\site-packages\dill\_dill.py:1444:            logger.trace(pickler, "Fi: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1446:            logger.trace(pickler, "# Fi")
.venv\Lib\site-packages\dill\_dill.py:1457:        logger.trace(pickler, "Io: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1464:        logger.trace(pickler, "# Io")
.venv\Lib\site-packages\dill\_dill.py:1469:        logger.trace(pickler, "Io: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1476:        logger.trace(pickler, "# Io")
.venv\Lib\site-packages\dill\_dill.py:1483:        logger.trace(pickler, "LRU: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1495:        logger.trace(pickler, "# LRU")
.venv\Lib\site-packages\dill\_dill.py:1500:    logger.trace(pickler, "Su: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1502:    logger.trace(pickler, "# Su")
.venv\Lib\site-packages\dill\_dill.py:1512:            logger.trace(pickler, "Me2: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1515:            logger.trace(pickler, "# Me2")
.venv\Lib\site-packages\dill\_dill.py:1518:        logger.trace(pickler, "Me1: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1520:        logger.trace(pickler, "# Me1")
.venv\Lib\site-packages\dill\_dill.py:1525:        logger.trace(pickler, "Me1: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1527:        logger.trace(pickler, "# Me1")
.venv\Lib\site-packages\dill\_dill.py:1537:        logger.trace(pickler, "Wr: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1540:        logger.trace(pickler, "# Wr")
.venv\Lib\site-packages\dill\_dill.py:1546:        logger.trace(pickler, "Wr: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1549:        logger.trace(pickler, "# Wr")
.venv\Lib\site-packages\dill\_dill.py:1557:        logger.trace(pickler, "Ce3: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1573:        logger.trace(pickler, "# Ce3")
.venv\Lib\site-packages\dill\_dill.py:1584:            logger.trace(pickler, "Ce2: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1590:            logger.trace(pickler, "# Ce2")
.venv\Lib\site-packages\dill\_dill.py:1592:    logger.trace(pickler, "Ce1: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1594:    logger.trace(pickler, "# Ce1")
.venv\Lib\site-packages\dill\_dill.py:1600:        logger.trace(pickler, "Mp: %s", _repr_dict(obj)) # obj
.venv\Lib\site-packages\dill\_dill.py:1603:        logger.trace(pickler, "# Mp")
.venv\Lib\site-packages\dill\_dill.py:1608:        logger.trace(pickler, "Mp: %s", _repr_dict(obj)) # obj
.venv\Lib\site-packages\dill\_dill.py:1610:        logger.trace(pickler, "# Mp")
.venv\Lib\site-packages\dill\_dill.py:1615:    logger.trace(pickler, "Sl: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1617:    logger.trace(pickler, "# Sl")
.venv\Lib\site-packages\dill\_dill.py:1624:    logger.trace(pickler, "Si: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1626:    logger.trace(pickler, "# Si")
.venv\Lib\site-packages\dill\_dill.py:1669:    logger.trace(pickler, "R1: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1672:    logger.trace(pickler, "# R1")
.venv\Lib\site-packages\dill\_dill.py:1679:    logger.trace(pickler, "R2: %r" % obj)
.venv\Lib\site-packages\dill\_dill.py:1682:    logger.trace(pickler, "# R2")
.venv\Lib\site-packages\dill\_dill.py:1716:                logger.trace(pickler, "M2: %s with diff", obj)
.venv\Lib\site-packages\dill\_dill.py:1717:                logger.info("Diff: %s", changed.keys())
.venv\Lib\site-packages\dill\_dill.py:1720:                logger.trace(pickler, "# M2")
.venv\Lib\site-packages\dill\_dill.py:1723:        logger.trace(pickler, "M1: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1725:        logger.trace(pickler, "# M1")
.venv\Lib\site-packages\dill\_dill.py:1731:            logger.trace(pickler, "M1: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1742:            logger.trace(pickler, "# M1")
.venv\Lib\site-packages\dill\_dill.py:1744:            logger.trace(pickler, "M2: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1746:            logger.trace(pickler, "# M2")
.venv\Lib\site-packages\dill\_dill.py:1748:            logger.trace(pickler, "M2: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1750:            logger.trace(pickler, "# M2")
.venv\Lib\site-packages\dill\_dill.py:1806:        logger.trace(pickler, "T1: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1810:        logger.trace(pickler, "# T1")
.venv\Lib\site-packages\dill\_dill.py:1813:        logger.trace(pickler, "T6: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1826:        logger.trace(pickler, "# T6")
.venv\Lib\site-packages\dill\_dill.py:1831:        logger.trace(pickler, "T7: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1834:        logger.trace(pickler, "# T7")
.venv\Lib\site-packages\dill\_dill.py:1836:        logger.trace(pickler, "T7: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1838:        logger.trace(pickler, "# T7")
.venv\Lib\site-packages\dill\_dill.py:1840:        logger.trace(pickler, "T7: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1842:        logger.trace(pickler, "# T7")
.venv\Lib\site-packages\dill\_dill.py:1844:        logger.trace(pickler, "T7: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1846:        logger.trace(pickler, "# T7")
.venv\Lib\site-packages\dill\_dill.py:1848:        logger.trace(pickler, "T7: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1850:        logger.trace(pickler, "# T7")
.venv\Lib\site-packages\dill\_dill.py:1861:            logger.trace(pickler, "T2: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1876:                logger.trace(pickler, "ABC: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1878:                logger.trace(pickler, "# ABC")
.venv\Lib\site-packages\dill\_dill.py:1906:            logger.trace(pickler, "# T2")
.venv\Lib\site-packages\dill\_dill.py:1909:            logger.trace(pickler, "T4: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1927:            logger.trace(pickler, "# T4")
.venv\Lib\site-packages\dill\_dill.py:1933:    logger.trace(pickler, "Pr: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1936:    logger.trace(pickler, "# Pr")
.venv\Lib\site-packages\dill\_dill.py:1943:    logger.trace(pickler, "Cm: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1955:    logger.trace(pickler, "# Cm")
.venv\Lib\site-packages\dill\_dill.py:1976:                logger.trace(pickler, "F3: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:1978:                logger.trace(pickler, "# F3")
.venv\Lib\site-packages\dill\_dill.py:1981:        logger.trace(pickler, "F1: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:2063:        logger.trace(pickler, "# F1")
.venv\Lib\site-packages\dill\_dill.py:2065:        logger.trace(pickler, "F2: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:2068:        logger.trace(pickler, "# F2")
.venv\Lib\site-packages\dill\_dill.py:2108:        logger.trace(pickler, "Cap: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:2115:        logger.trace(pickler, "# Cap")
.venv\Lib\site-packages\dill\_dill.py:2130:        logger.trace(pickler, "DcHDF: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:2132:        logger.trace(pickler, "# DcHDF")
.venv\Lib\site-packages\dill\_dill.py:2137:        logger.trace(pickler, "DcM: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:2139:        logger.trace(pickler, "# DcM")
.venv\Lib\site-packages\dill\_dill.py:2144:        logger.trace(pickler, "DcKWO: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:2146:        logger.trace(pickler, "# DcKWO")
.venv\Lib\site-packages\dill\_dill.py:2151:        logger.trace(pickler, "DcFB: %s", obj)
.venv\Lib\site-packages\dill\_dill.py:2153:        logger.trace(pickler, "# DcFB")
.venv\Lib\site-packages\dill\_dill.py:2250:            logger.trace(pickler, "skip: %s", t)
.venv\Lib\site-packages\dill\_objects.py:46:import logging
.venv\Lib\site-packages\dill\_objects.py:47:import logging.handlers
.venv\Lib\site-packages\dill\_objects.py:170:a['LoggerType'] = _logger = logging.getLogger()
.venv\Lib\site-packages\dill\_objects.py:171:a['FormatterType'] = logging.Formatter() # pickle ok
.venv\Lib\site-packages\dill\_objects.py:172:a['FilterType'] = logging.Filter() # pickle ok
.venv\Lib\site-packages\dill\_objects.py:173:a['LogRecordType'] = logging.makeLogRecord(_dict) # pickle ok
.venv\Lib\site-packages\dill\_objects.py:218:a['LoggerAdapterType'] = logging.LoggerAdapter(_logger,_dict) # pickle ok
.venv\Lib\site-packages\dill\_objects.py:233:a['NullHandlerType'] = logging.NullHandler() # pickle ok  # new 2.7
.venv\Lib\site-packages\dill\_objects.py:327:a['NamedLoggerType'] = _logger = logging.getLogger(__name__)
.venv\Lib\site-packages\dill\_objects.py:351:a['FileHandlerType'] = logging.FileHandler(os.devnull)
.venv\Lib\site-packages\dill\_objects.py:352:a['RotatingFileHandlerType'] = logging.handlers.RotatingFileHandler(os.devnull)
.venv\Lib\site-packages\dill\_objects.py:353:a['SocketHandlerType'] = logging.handlers.SocketHandler('localhost',514)
.venv\Lib\site-packages\dill\_objects.py:354:a['MemoryHandlerType'] = logging.handlers.MemoryHandler(1)
.venv\Lib\site-packages\dill\_objects.py:417:a['StreamHandlerType'] = logging.StreamHandler()
.venv\Lib\site-packages\dill\__init__.py:43:logger.trace(False)
.venv\Lib\site-packages\dill\tests\test_logger.py:8:import logging
.venv\Lib\site-packages\dill\tests\test_logger.py:23:def test_logging(should_trace):
.venv\Lib\site-packages\dill\tests\test_logger.py:25:    handler = logging.StreamHandler(buffer)
.venv\Lib\site-packages\dill\tests\test_logger.py:26:    logger.addHandler(handler)
.venv\Lib\site-packages\dill\tests\test_logger.py:39:        logger.removeHandler(handler)
.venv\Lib\site-packages\dill\tests\test_logger.py:57:    logger.removeHandler(stderr_handler)
.venv\Lib\site-packages\dill\tests\test_logger.py:58:    test_logging(should_trace=False)
.venv\Lib\site-packages\dill\tests\test_logger.py:60:    test_logging(should_trace=True)
.venv\Lib\site-packages\dill\tests\test_logger.py:62:    test_logging(should_trace=False)
.venv\Lib\site-packages\dill\tests\test_logger.py:64:    loglevel = logging.ERROR
.venv\Lib\site-packages\dill\tests\test_logger.py:65:    logger.setLevel(loglevel)
.venv\Lib\site-packages\dill\tests\test_logger.py:67:        stream_trace = test_logging(should_trace=True)
.venv\Lib\site-packages\dill\tests\test_logger.py:68:    test_logging(should_trace=False)
.venv\Lib\site-packages\dill\tests\test_logger.py:69:    assert logger.getEffectiveLevel() == loglevel
.venv\Lib\site-packages\dill\tests\test_moduledict.py:26:import logging
.venv\Lib\site-packages\dill\tests\test_moduledict.py:27:logging.basicConfig(level=logging.DEBUG)
.venv\Lib\site-packages\distlib\compat.py:911:    from logging.config import BaseConfigurator, valid_ident
.venv\Lib\site-packages\distlib\database.py:14:import logging
.venv\Lib\site-packages\distlib\database.py:31:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\distlib\database.py:145:                        logger.debug('Found %s', r.path)
.venv\Lib\site-packages\distlib\database.py:149:                        logger.debug('Found %s', r.path)
.venv\Lib\site-packages\distlib\database.py:154:                    logger.warning(msg, r.path, e)
.venv\Lib\site-packages\distlib\database.py:272:                logger.debug('No "provides": %s', dist)
.venv\Lib\site-packages\distlib\database.py:381:        logger.debug('%s: got requirements %r from metadata: %r', self.name, req_attr, reqts)
.venv\Lib\site-packages\distlib\database.py:419:            logger.warning('could not read version %r - using name only', req)
.venv\Lib\site-packages\distlib\database.py:677:        logger.info('creating %s', record_path)
.venv\Lib\site-packages\distlib\database.py:771:        logger.info('creating %s', shared_path)
.venv\Lib\site-packages\distlib\database.py:893:                    logger.warning('Unexpected line: quitting requirement scan: %r', line)
.venv\Lib\site-packages\distlib\database.py:897:                    logger.warning('Not recognised as a requirement: %r', line)
.venv\Lib\site-packages\distlib\database.py:900:                    logger.warning('extra requirements in requires.txt are '
.venv\Lib\site-packages\distlib\database.py:1022:                        logger.warning('Non-existent file: %s', p)
.venv\Lib\site-packages\distlib\database.py:1125:        logger.debug('%s missing %r', distribution, requirement)
.venv\Lib\site-packages\distlib\database.py:1201:            logger.debug('Moving to result: %s', ['%s (%s)' % (d.name, d.version) for d in to_remove])
.venv\Lib\site-packages\distlib\database.py:1231:            logger.debug('Add to provided: %s, %s, %s', name, version, dist)
.venv\Lib\site-packages\distlib\database.py:1242:                logger.warning('could not read version %r - using name only', req)
.venv\Lib\site-packages\distlib\index.py:8:import logging
.venv\Lib\site-packages\distlib\index.py:23:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\distlib\index.py:132:        :param name: The logical name of the stream (used for logging only).
.venv\Lib\site-packages\distlib\index.py:143:            logger.debug('%s: %s' % (name, s))
.venv\Lib\site-packages\distlib\index.py:171:        logger.debug('invoking: %s', ' '.join(cmd))
.venv\Lib\site-packages\distlib\index.py:263:                logger.warning('no signing program available - not signed')
.venv\Lib\site-packages\distlib\index.py:338:        logger.debug('invoking: %s', ' '.join(cmd))
.venv\Lib\site-packages\distlib\index.py:389:            logger.debug('No digest specified')
.venv\Lib\site-packages\distlib\index.py:396:            logger.debug('Digest specified: %s' % digest)
.venv\Lib\site-packages\distlib\index.py:440:            logger.debug('Digest verified: %s', digest)
.venv\Lib\site-packages\distlib\locators.py:11:import logging
.venv\Lib\site-packages\distlib\locators.py:31:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\distlib\locators.py:219:                logger.debug('Not replacing %r with %r', url1, url2)
.venv\Lib\site-packages\distlib\locators.py:221:                logger.debug('Replacing %r with %r', url1, url2)
.venv\Lib\site-packages\distlib\locators.py:245:            logger.debug('%s: version hint in fragment: %r', project_name, frag)
.venv\Lib\site-packages\distlib\locators.py:258:                    logger.debug('Wheel not compatible: %s', path)
.venv\Lib\site-packages\distlib\locators.py:273:                logger.warning('invalid path for wheel: %s', path)
.venv\Lib\site-packages\distlib\locators.py:275:            logger.debug('Not downloadable: %s', path)
.venv\Lib\site-packages\distlib\locators.py:283:                        logger.debug('No match for project/version: %s', path)
.venv\Lib\site-packages\distlib\locators.py:365:        logger.debug('matcher: %s (%s)', matcher, type(matcher).__name__)
.venv\Lib\site-packages\distlib\locators.py:376:                        pass  # logger.debug('%s did not match %r', matcher, k)
.venv\Lib\site-packages\distlib\locators.py:381:                    logger.warning('error matching %s with %r', matcher, k)
.venv\Lib\site-packages\distlib\locators.py:386:                logger.debug('sorted list: %s', slist)
.venv\Lib\site-packages\distlib\locators.py:521:            logger.exception('JSON fetch failed: %s', e)
.venv\Lib\site-packages\distlib\locators.py:660:                logger.debug('Queueing %s', url)
.venv\Lib\site-packages\distlib\locators.py:691:        logger.debug('process_download: %s -> %s', url, info)
.venv\Lib\site-packages\distlib\locators.py:721:        logger.debug('should_queue: %s (%s) from %s -> %s', link, rel, referrer, result)
.venv\Lib\site-packages\distlib\locators.py:743:                                    logger.debug('Queueing %s from %s', link, url)
.venv\Lib\site-packages\distlib\locators.py:753:                # logger.debug('Sentinel seen, quitting.')
.venv\Lib\site-packages\distlib\locators.py:771:            logger.debug('Returning %s from cache: %s', url, result)
.venv\Lib\site-packages\distlib\locators.py:776:                logger.debug('Skipping %s due to bad host %s', url, host)
.venv\Lib\site-packages\distlib\locators.py:780:                    logger.debug('Fetching %s', url)
.venv\Lib\site-packages\distlib\locators.py:782:                    logger.debug('Fetched %s', url)
.venv\Lib\site-packages\distlib\locators.py:804:                        logger.exception('Fetch failed: %s: %s', url, e)
.venv\Lib\site-packages\distlib\locators.py:806:                    logger.exception('Fetch failed: %s: %s', url, e)
.venv\Lib\site-packages\distlib\locators.py:810:                    logger.exception('Fetch failed: %s: %s', url, e)
.venv\Lib\site-packages\distlib\locators.py:1084:        logger.debug('adding distribution %s', dist)
.venv\Lib\site-packages\distlib\locators.py:1090:            logger.debug('Add to provided: %s, %s, %s', name, version, dist)
.venv\Lib\site-packages\distlib\locators.py:1099:        logger.debug('removing distribution %s', dist)
.venv\Lib\site-packages\distlib\locators.py:1105:            logger.debug('Remove from provided: %s, %s, %s', name, version, dist)
.venv\Lib\site-packages\distlib\locators.py:1229:            logger.debug('passed %s as requirement', odist)
.venv\Lib\site-packages\distlib\locators.py:1234:            logger.debug('located %s', odist)
.venv\Lib\site-packages\distlib\locators.py:1262:                    logger.debug('No providers found for %r', r)
.venv\Lib\site-packages\distlib\locators.py:1269:                        logger.debug('Cannot satisfy %r', r)
.venv\Lib\site-packages\distlib\locators.py:1278:                            logger.debug('Adding %s to install_dists', provider.name_and_version)
.venv\Lib\site-packages\distlib\locators.py:1293:                logger.debug('%s is a build-time dependency only.', dist.name_and_version)
.venv\Lib\site-packages\distlib\locators.py:1294:        logger.debug('find done for %s', odist)
.venv\Lib\site-packages\distlib\manifest.py:12:import logging
.venv\Lib\site-packages\distlib\manifest.py:24:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\distlib\manifest.py:112:            logger.debug('add_dir added %s', d)
.venv\Lib\site-packages\distlib\manifest.py:155:                    logger.warning('no files found matching %r', pattern)
.venv\Lib\site-packages\distlib\manifest.py:164:                    logger.warning('no files found matching %r '
.venv\Lib\site-packages\distlib\manifest.py:174:                    logger.warning('no files found matching %r '
.venv\Lib\site-packages\distlib\manifest.py:183:                logger.warning('no directories found matching %r',
.venv\Lib\site-packages\distlib\manifest.py:188:                logger.warning('no previously-included directories found '
.venv\Lib\site-packages\distlib\metadata.py:15:import logging
.venv\Lib\site-packages\distlib\metadata.py:24:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\distlib\metadata.py:134:            logger.debug('Removed 1.0 due to %s', key)
.venv\Lib\site-packages\distlib\metadata.py:137:            logger.debug('Removed 1.1 due to %s', key)
.venv\Lib\site-packages\distlib\metadata.py:140:            logger.debug('Removed 1.2 due to %s', key)
.venv\Lib\site-packages\distlib\metadata.py:143:            logger.debug('Removed 1.3 due to %s', key)
.venv\Lib\site-packages\distlib\metadata.py:147:                logger.debug('Removed 2.1 due to %s', key)
.venv\Lib\site-packages\distlib\metadata.py:150:            logger.debug('Removed 2.2 due to %s', key)
.venv\Lib\site-packages\distlib\metadata.py:153:        # logger.debug('Removed 2.0 due to %s', key)
.venv\Lib\site-packages\distlib\metadata.py:159:        logger.debug('Out of options - unknown metadata set: %s', fields)
.venv\Lib\site-packages\distlib\metadata.py:354:        # logger.debug('Attempting to set metadata for %s', self)
.venv\Lib\site-packages\distlib\metadata.py:434:        if logger.isEnabledFor(logging.WARNING):
.venv\Lib\site-packages\distlib\metadata.py:442:                        logger.warning("'%s': '%s' is not valid (field '%s')", project_name, v, name)
.venv\Lib\site-packages\distlib\metadata.py:446:                    logger.warning("'%s': '%s' is not a valid version (field '%s')", project_name, value, name)
.venv\Lib\site-packages\distlib\metadata.py:449:                    logger.warning("'%s': '%s' is not a valid version (field '%s')", project_name, value, name)
.venv\Lib\site-packages\distlib\metadata.py:885:                logger.warning('Metadata: missing: %s, warnings: %s', missing, warnings)
.venv\Lib\site-packages\distlib\resources.py:11:import logging
.venv\Lib\site-packages\distlib\resources.py:21:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\distlib\resources.py:239:            logger.debug('_find failed: %r %r', path, self.loader.prefix)
.venv\Lib\site-packages\distlib\resources.py:241:            logger.debug('_find worked: %r %r', path, self.loader.prefix)
.venv\Lib\site-packages\distlib\scripts.py:8:import logging
.venv\Lib\site-packages\distlib\scripts.py:20:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\distlib\scripts.py:132:                logger.warning('Failed to open %s', executable)
.venv\Lib\site-packages\distlib\scripts.py:290:                    logger.warning('Failed to write executable - trying to '
.venv\Lib\site-packages\distlib\scripts.py:297:                    logger.debug('Able to replace executable using '
.venv\Lib\site-packages\distlib\scripts.py:307:                    logger.warning('Skipping existing file %s', outname)
.venv\Lib\site-packages\distlib\scripts.py:347:            logger.debug('not copying %s (up-to-date)', script)
.venv\Lib\site-packages\distlib\scripts.py:362:                logger.warning('%s is an empty file (skipping)', script)
.venv\Lib\site-packages\distlib\scripts.py:378:            logger.info('copying and adjusting %s -> %s', script, self.target_dir)
.venv\Lib\site-packages\distlib\util.py:12:import logging
.venv\Lib\site-packages\distlib\util.py:38:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\distlib\util.py:525:        logger.info('Copying %s to %s', infile, outfile)
.venv\Lib\site-packages\distlib\util.py:541:        logger.info('Copying stream %s to %s', instream, outfile)
.venv\Lib\site-packages\distlib\util.py:571:                    logger.info("changing mode of %s", f)
.venv\Lib\site-packages\distlib\util.py:574:                    logger.info("changing mode of %s to %o", f, mode)
.venv\Lib\site-packages\distlib\util.py:585:            logger.info('Creating %s' % path)
.venv\Lib\site-packages\distlib\util.py:593:        logger.info('Byte-compiling %s to %s', path, dpath)
.venv\Lib\site-packages\distlib\util.py:613:                logger.debug('Removing directory tree at %s', path)
.venv\Lib\site-packages\distlib\util.py:624:                logger.debug('Removing %s %s', s, path)
.venv\Lib\site-packages\distlib\util.py:778:            logger.warning('Directory exists but is not writable: %s', result)
.venv\Lib\site-packages\distlib\util.py:784:            logger.warning('Unable to create %s', result, exc_info=True)
.venv\Lib\site-packages\distlib\util.py:788:        logger.warning('Default location unusable, using %s', result)
.venv\Lib\site-packages\distlib\util.py:911:                logger.warning('undeclared extra: %s' % unwanted)
.venv\Lib\site-packages\distlib\util.py:916:                logger.warning('undeclared extra: %s' % r)
.venv\Lib\site-packages\distlib\util.py:936:            logger.debug('Unexpected response for JSON request: %s', ct)
.venv\Lib\site-packages\distlib\util.py:943:        logger.exception('Failed to get external data for %s: %s', url, e)
.venv\Lib\site-packages\distlib\util.py:981:            logger.warning('Directory \'%s\' is not private', base)
.venv\Lib\site-packages\distlib\util.py:1070:                logger.exception('Exception during event publication')
.venv\Lib\site-packages\distlib\util.py:1073:        logger.debug('publish %s: args = %s, kwargs = %s, result = %s', event, args, kwargs, result)
.venv\Lib\site-packages\distlib\util.py:1485:                    logger.debug('Host verified: %s', self.host)
.venv\Lib\site-packages\distlib\version.py:11:import logging
.venv\Lib\site-packages\distlib\version.py:22:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\distlib\version.py:641:            logger.warning('Cannot compute compatible match for version %s '
.venv\Lib\site-packages\distlib\wheel.py:15:import logging
.venv\Lib\site-packages\distlib\wheel.py:32:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\distlib\wheel.py:367:                logger.debug('Wrote %s to %s in wheel', p, ap)
.venv\Lib\site-packages\distlib\wheel.py:603:                        logger.debug('lib_only: skipping %s', u_arcname)
.venv\Lib\site-packages\distlib\wheel.py:642:                                logger.warning('Byte-compilation failed', exc_info=True)
.venv\Lib\site-packages\distlib\wheel.py:656:                    logger.debug('lib_only: returning None')
.venv\Lib\site-packages\distlib\wheel.py:683:                            logger.warning('Unable to read legacy script '
.venv\Lib\site-packages\distlib\wheel.py:694:                            logger.warning('Unable to read JSON metadata, so '
.venv\Lib\site-packages\distlib\wheel.py:733:                logger.exception('installation failed.')
.venv\Lib\site-packages\distlib\wheel.py:802:            logger.debug('%s already in path', pathname)
.venv\Lib\site-packages\distlib\wheel.py:817:            logger.debug('%s not in path', pathname)
.venv\Lib\site-packages\distlib\wheel.py:921:                logger.debug('Cannot update non-compliant (PEP-440) '
.venv\Lib\site-packages\distlib\wheel.py:928:                logger.debug('Version updated from %r to %r', version, updated)
.venv\Lib\site-packages\distlib\__init__.py:7:import logging
.venv\Lib\site-packages\distlib\__init__.py:17:    from logging import NullHandler
.venv\Lib\site-packages\distlib\__init__.py:20:    class NullHandler(logging.Handler):
.venv\Lib\site-packages\distlib\__init__.py:32:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\distlib\__init__.py:33:logger.addHandler(NullHandler())
.venv\Lib\site-packages\dotenv\main.py:2:import logging
.venv\Lib\site-packages\dotenv\main.py:21:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\dotenv\main.py:27:            logger.warning(
.venv\Lib\site-packages\dotenv\main.py:61:                logger.info(
.venv\Lib\site-packages\dotenv\main.py:111:            logger.warning("Key %s not found in %s.", key, self.dotenv_path)
.venv\Lib\site-packages\dotenv\main.py:209:        logger.warning("Can't delete from %s - it doesn't exist.", dotenv_path)
.venv\Lib\site-packages\dotenv\main.py:221:        logger.warning("Key %s not removed from %s - key doesn't exist.", key_to_unset, dotenv_path)
.venv\Lib\site-packages\engineio\async_client.py:52:    :param logger: To enable logging set to ``True`` or pass a logger object to
.venv\Lib\site-packages\engineio\async_client.py:53:                   use. To disable logging set to ``False``. The default is
.venv\Lib\site-packages\engineio\async_client.py:115:                self.logger.warning('Signal handler is unsupported')
.venv\Lib\site-packages\engineio\async_client.py:236:            self.logger.error('aiohttp not installed -- cannot make HTTP '
.venv\Lib\site-packages\engineio\async_client.py:240:        self.logger.info('Attempting polling connection to ' + self.base_url)
.venv\Lib\site-packages\engineio\async_client.py:267:        self.logger.info(
.venv\Lib\site-packages\engineio\async_client.py:296:            self.logger.error('aiohttp package not installed')
.venv\Lib\site-packages\engineio\async_client.py:301:            self.logger.info(
.venv\Lib\site-packages\engineio\async_client.py:308:            self.logger.info(
.venv\Lib\site-packages\engineio\async_client.py:345:                self.logger.warning(
.venv\Lib\site-packages\engineio\async_client.py:355:                self.logger.warning(
.venv\Lib\site-packages\engineio\async_client.py:362:                self.logger.warning(
.venv\Lib\site-packages\engineio\async_client.py:368:                self.logger.warning(
.venv\Lib\site-packages\engineio\async_client.py:375:                self.logger.warning(
.venv\Lib\site-packages\engineio\async_client.py:380:            self.logger.info('WebSocket upgrade was successful')
.venv\Lib\site-packages\engineio\async_client.py:390:            self.logger.info(
.venv\Lib\site-packages\engineio\async_client.py:412:        self.logger.info(
.venv\Lib\site-packages\engineio\async_client.py:425:            self.logger.error('Received unexpected packet of type %s',
.venv\Lib\site-packages\engineio\async_client.py:433:        self.logger.info(
.venv\Lib\site-packages\engineio\async_client.py:456:            self.logger.info('HTTP %s request to %s failed with error %s.',
.venv\Lib\site-packages\engineio\async_client.py:487:                        self.logger.exception(event + ' async handler error')
.venv\Lib\site-packages\engineio\async_client.py:514:                        self.logger.exception(event + ' handler error')
.venv\Lib\site-packages\engineio\async_client.py:524:            self.logger.info(
.venv\Lib\site-packages\engineio\async_client.py:530:                self.logger.warning(
.venv\Lib\site-packages\engineio\async_client.py:535:                self.logger.warning('Unexpected status code %s in server '
.venv\Lib\site-packages\engineio\async_client.py:543:                self.logger.warning(
.venv\Lib\site-packages\engineio\async_client.py:551:            self.logger.info('Waiting for write loop task to end')
.venv\Lib\site-packages\engineio\async_client.py:561:        self.logger.info('Exiting read loop task')
.venv\Lib\site-packages\engineio\async_client.py:572:                    self.logger.warning(
.venv\Lib\site-packages\engineio\async_client.py:581:                self.logger.warning(
.venv\Lib\site-packages\engineio\async_client.py:586:                self.logger.info(
.venv\Lib\site-packages\engineio\async_client.py:591:                self.logger.info(
.venv\Lib\site-packages\engineio\async_client.py:599:                self.logger.info(
.venv\Lib\site-packages\engineio\async_client.py:606:            self.logger.info('Waiting for write loop task to end')
.venv\Lib\site-packages\engineio\async_client.py:616:        self.logger.info('Exiting read loop task')
.venv\Lib\site-packages\engineio\async_client.py:631:                self.logger.error('packet queue is empty, aborting')
.venv\Lib\site-packages\engineio\async_client.py:660:                    self.logger.warning(
.venv\Lib\site-packages\engineio\async_client.py:664:                    self.logger.warning('Unexpected status code %s in server '
.venv\Lib\site-packages\engineio\async_client.py:679:                    self.logger.info(
.venv\Lib\site-packages\engineio\async_client.py:683:        self.logger.info('Exiting write loop task')
.venv\Lib\site-packages\engineio\async_server.py:63:    :param logger: To enable logging set to ``True`` or pass a logger object to
.venv\Lib\site-packages\engineio\async_server.py:64:                   use. To disable logging set to ``False``. Note that fatal
.venv\Lib\site-packages\engineio\async_server.py:118:            self.logger.warning('Cannot send to sid %s', sid)
.venv\Lib\site-packages\engineio\async_server.py:337:                    self.logger.exception('post request handler error')
.venv\Lib\site-packages\engineio\async_server.py:342:            self.logger.warning('Method %s not supported', method)
.venv\Lib\site-packages\engineio\async_server.py:364:        self.logger.info('Socket.IO is shutting down')
.venv\Lib\site-packages\engineio\async_server.py:469:            self.logger.warning('Application rejected connection')
.venv\Lib\site-packages\engineio\async_server.py:521:                        self.logger.exception(event + ' async handler error')
.venv\Lib\site-packages\engineio\async_server.py:547:                        self.logger.exception(event + ' handler error')
.venv\Lib\site-packages\engineio\async_server.py:602:                self.logger.info('service task canceled')
.venv\Lib\site-packages\engineio\async_server.py:606:                    self.logger.info('event loop is closed, exiting service '
.venv\Lib\site-packages\engineio\async_server.py:611:                self.logger.exception('service task exception')
.venv\Lib\site-packages\engineio\async_socket.py:37:        self.server.logger.info('%s: Received packet %s data %s',
.venv\Lib\site-packages\engineio\async_socket.py:61:            self.server.logger.info('%s: Client is gone, closing socket',
.venv\Lib\site-packages\engineio\async_socket.py:77:        self.server.logger.info('%s: Sending packet %s data %s',
.venv\Lib\site-packages\engineio\async_socket.py:89:            self.server.logger.info('%s: Received request to upgrade to %s',
.venv\Lib\site-packages\engineio\async_socket.py:170:                self.server.logger.info(
.venv\Lib\site-packages\engineio\async_socket.py:185:                self.server.logger.info(
.venv\Lib\site-packages\engineio\async_socket.py:217:        self.server.logger.info(
.venv\Lib\site-packages\engineio\async_socket.py:251:                self.server.logger.info('Receive error -- socket is closed')
.venv\Lib\site-packages\engineio\async_socket.py:256:                self.server.logger.exception('Unknown receive error')
.venv\Lib\site-packages\engineio\base_client.py:1:import logging
.venv\Lib\site-packages\engineio\base_client.py:8:default_logger = logging.getLogger('engineio.client')
.venv\Lib\site-packages\engineio\base_client.py:77:            if self.logger.level == logging.NOTSET:
.venv\Lib\site-packages\engineio\base_client.py:79:                    self.logger.setLevel(logging.INFO)
.venv\Lib\site-packages\engineio\base_client.py:81:                    self.logger.setLevel(logging.ERROR)
.venv\Lib\site-packages\engineio\base_client.py:82:                self.logger.addHandler(logging.StreamHandler())
.venv\Lib\site-packages\engineio\base_server.py:5:import logging
.venv\Lib\site-packages\engineio\base_server.py:12:default_logger = logging.getLogger('engineio.server')
.venv\Lib\site-packages\engineio\base_server.py:70:            if self.logger.level == logging.NOTSET:
.venv\Lib\site-packages\engineio\base_server.py:72:                    self.logger.setLevel(logging.INFO)
.venv\Lib\site-packages\engineio\base_server.py:74:                    self.logger.setLevel(logging.ERROR)
.venv\Lib\site-packages\engineio\base_server.py:75:                self.logger.addHandler(logging.StreamHandler())
.venv\Lib\site-packages\engineio\base_server.py:112:        self.logger.info('Server initialized for %s.', self.async_mode)
.venv\Lib\site-packages\engineio\base_server.py:348:        """Log message with logging.ERROR level the first time, then log
.venv\Lib\site-packages\engineio\base_server.py:351:            self.logger.error(message + ' (further occurrences of this error '
.venv\Lib\site-packages\engineio\base_server.py:355:            self.logger.info(message)
.venv\Lib\site-packages\engineio\client.py:3:import logging
.venv\Lib\site-packages\engineio\client.py:23:default_logger = logging.getLogger('engineio.client')
.venv\Lib\site-packages\engineio\client.py:32:    :param logger: To enable logging set to ``True`` or pass a logger object to
.venv\Lib\site-packages\engineio\client.py:33:                   use. To disable logging set to ``False``. The default is
.venv\Lib\site-packages\engineio\client.py:180:            self.logger.error('requests package is not installed -- cannot '
.venv\Lib\site-packages\engineio\client.py:184:        self.logger.info('Attempting polling connection to ' + self.base_url)
.venv\Lib\site-packages\engineio\client.py:210:        self.logger.info(
.venv\Lib\site-packages\engineio\client.py:241:            self.logger.error('websocket-client package not installed, only '
.venv\Lib\site-packages\engineio\client.py:246:            self.logger.info(
.venv\Lib\site-packages\engineio\client.py:253:            self.logger.info(
.venv\Lib\site-packages\engineio\client.py:338:                self.logger.warning(
.venv\Lib\site-packages\engineio\client.py:348:                self.logger.warning(
.venv\Lib\site-packages\engineio\client.py:355:                self.logger.warning(
.venv\Lib\site-packages\engineio\client.py:361:                self.logger.warning(
.venv\Lib\site-packages\engineio\client.py:368:                self.logger.warning(
.venv\Lib\site-packages\engineio\client.py:373:            self.logger.info('WebSocket upgrade was successful')
.venv\Lib\site-packages\engineio\client.py:383:            self.logger.info(
.venv\Lib\site-packages\engineio\client.py:407:        self.logger.info(
.venv\Lib\site-packages\engineio\client.py:419:            self.logger.error('Received unexpected packet of type %s',
.venv\Lib\site-packages\engineio\client.py:427:        self.logger.info(
.venv\Lib\site-packages\engineio\client.py:443:            self.logger.info('HTTP %s request to %s failed with error %s.',
.venv\Lib\site-packages\engineio\client.py:466:                    self.logger.exception(event + ' handler error')
.venv\Lib\site-packages\engineio\client.py:471:            self.logger.info(
.venv\Lib\site-packages\engineio\client.py:477:                self.logger.warning(
.venv\Lib\site-packages\engineio\client.py:482:                self.logger.warning('Unexpected status code %s in server '
.venv\Lib\site-packages\engineio\client.py:489:                self.logger.warning(
.venv\Lib\site-packages\engineio\client.py:497:            self.logger.info('Waiting for write loop task to end')
.venv\Lib\site-packages\engineio\client.py:507:        self.logger.info('Exiting read loop task')
.venv\Lib\site-packages\engineio\client.py:519:                self.logger.warning(
.venv\Lib\site-packages\engineio\client.py:524:                self.logger.warning(
.venv\Lib\site-packages\engineio\client.py:530:                    self.logger.info(
.venv\Lib\site-packages\engineio\client.py:533:                    self.logger.info(
.venv\Lib\site-packages\engineio\client.py:541:                self.logger.info(
.venv\Lib\site-packages\engineio\client.py:548:            self.logger.info('Waiting for write loop task to end')
.venv\Lib\site-packages\engineio\client.py:558:        self.logger.info('Exiting read loop task')
.venv\Lib\site-packages\engineio\client.py:573:                self.logger.error('packet queue is empty, aborting')
.venv\Lib\site-packages\engineio\client.py:600:                    self.logger.warning(
.venv\Lib\site-packages\engineio\client.py:604:                    self.logger.warning('Unexpected status code %s in server '
.venv\Lib\site-packages\engineio\client.py:620:                    self.logger.warning(
.venv\Lib\site-packages\engineio\client.py:623:        self.logger.info('Exiting write loop task')
.venv\Lib\site-packages\engineio\server.py:1:import logging
.venv\Lib\site-packages\engineio\server.py:9:default_logger = logging.getLogger('engineio.server')
.venv\Lib\site-packages\engineio\server.py:62:    :param logger: To enable logging set to ``True`` or pass a logger object to
.venv\Lib\site-packages\engineio\server.py:63:                   use. To disable logging set to ``False``. The default is
.venv\Lib\site-packages\engineio\server.py:103:            self.logger.warning('Cannot send to sid %s', sid)
.venv\Lib\site-packages\engineio\server.py:316:                    self.logger.exception('post request handler error')
.venv\Lib\site-packages\engineio\server.py:321:            self.logger.warning('Method %s not supported', method)
.venv\Lib\site-packages\engineio\server.py:346:        self.logger.info('Socket.IO is shutting down')
.venv\Lib\site-packages\engineio\server.py:412:            self.logger.warning('Application rejected connection')
.venv\Lib\site-packages\engineio\server.py:460:                    self.logger.exception(event + ' handler error')
.venv\Lib\site-packages\engineio\server.py:499:                self.logger.info('service task canceled')
.venv\Lib\site-packages\engineio\server.py:503:                self.logger.exception('service task exception')
.venv\Lib\site-packages\engineio\socket.py:39:        self.server.logger.info('%s: Received packet %s data %s',
.venv\Lib\site-packages\engineio\socket.py:62:            self.server.logger.info('%s: Client is gone, closing socket',
.venv\Lib\site-packages\engineio\socket.py:78:        self.server.logger.info('%s: Sending packet %s data %s',
.venv\Lib\site-packages\engineio\socket.py:90:            self.server.logger.info('%s: Received request to upgrade to %s',
.venv\Lib\site-packages\engineio\socket.py:176:                self.server.logger.info(
.venv\Lib\site-packages\engineio\socket.py:187:                self.server.logger.info(
.venv\Lib\site-packages\engineio\socket.py:219:        self.server.logger.info(
.venv\Lib\site-packages\engineio\socket.py:230:                    self.server.logger.info(
.venv\Lib\site-packages\engineio\socket.py:243:                self.server.logger.info('Receive error -- socket is closed')
.venv\Lib\site-packages\engineio\socket.py:248:                self.server.logger.exception('Unknown receive error')
.venv\Lib\site-packages\fastapi\applications.py:882:            logger.warning(
.venv\Lib\site-packages\fastapi\logger.py:1:import logging
.venv\Lib\site-packages\fastapi\logger.py:3:logger = logging.getLogger("fastapi")
.venv\Lib\site-packages\fastapi\dependencies\utils.py:97:                logger.error(multipart_incorrect_install_error)
.venv\Lib\site-packages\fastapi\dependencies\utils.py:100:            logger.error(multipart_not_installed_error)
.venv\Lib\site-packages\fastapi\openapi\models.py:31:            logger.warning(
.venv\Lib\site-packages\fastapi\openapi\models.py:39:            logger.warning(
.venv\Lib\site-packages\filelock\asyncio.py:7:import logging
.venv\Lib\site-packages\filelock\asyncio.py:32:_LOGGER = logging.getLogger("filelock")
.venv\Lib\site-packages\filelock\asyncio.py:230:                    _LOGGER.debug("Attempting to acquire lock %s on %s", lock_id, lock_filename)
.venv\Lib\site-packages\filelock\asyncio.py:233:                    _LOGGER.debug("Lock %s acquired on %s", lock_id, lock_filename)
.venv\Lib\site-packages\filelock\asyncio.py:236:                    _LOGGER.debug("Failed to immediately acquire lock %s on %s", lock_id, lock_filename)
.venv\Lib\site-packages\filelock\asyncio.py:239:                    _LOGGER.debug("Timeout on acquiring lock %s on %s", lock_id, lock_filename)
.venv\Lib\site-packages\filelock\asyncio.py:242:                _LOGGER.debug(msg, lock_id, lock_filename, poll_interval)
.venv\Lib\site-packages\filelock\asyncio.py:263:                _LOGGER.debug("Attempting to release lock %s on %s", lock_id, lock_filename)
.venv\Lib\site-packages\filelock\asyncio.py:266:                _LOGGER.debug("Lock %s released on %s", lock_id, lock_filename)
.venv\Lib\site-packages\filelock\_api.py:5:import logging
.venv\Lib\site-packages\filelock\_api.py:27:_LOGGER = logging.getLogger("filelock")
.venv\Lib\site-packages\filelock\_api.py:331:                    _LOGGER.debug("Attempting to acquire lock %s on %s", lock_id, lock_filename)
.venv\Lib\site-packages\filelock\_api.py:334:                    _LOGGER.debug("Lock %s acquired on %s", lock_id, lock_filename)
.venv\Lib\site-packages\filelock\_api.py:337:                    _LOGGER.debug("Failed to immediately acquire lock %s on %s", lock_id, lock_filename)
.venv\Lib\site-packages\filelock\_api.py:340:                    _LOGGER.debug("Timeout on acquiring lock %s on %s", lock_id, lock_filename)
.venv\Lib\site-packages\filelock\_api.py:343:                _LOGGER.debug(msg, lock_id, lock_filename, poll_interval)
.venv\Lib\site-packages\filelock\_api.py:364:                _LOGGER.debug("Attempting to release lock %s on %s", lock_id, lock_filename)
.venv\Lib\site-packages\filelock\_api.py:367:                _LOGGER.debug("Lock %s released on %s", lock_id, lock_filename)
.venv\Lib\site-packages\git\cmd.py:13:import logging
.venv\Lib\site-packages\git\cmd.py:92:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\git\cmd.py:167:            _logger.error(f"Pumping {name!r} of cmd({remove_password_if_present(cmdline)}) failed due to: {ex!r}")
.venv\Lib\site-packages\git\cmd.py:359:            _logger.info("Ignored error after process had died: %r", ex)
.venv\Lib\site-packages\git\cmd.py:372:            _logger.info("Ignored error after process had died: %r", ex)
.venv\Lib\site-packages\git\cmd.py:418:            _logger.debug("AutoInterrupt wait stderr: %r" % (errstr,))
.venv\Lib\site-packages\git\cmd.py:841:                            - %s: for a warning message (logging level CRITICAL, displayed by default)
.venv\Lib\site-packages\git\cmd.py:858:                        _logger.critical(err)
.venv\Lib\site-packages\git\cmd.py:868:                            - %s: for a warning message (logging level CRITICAL, displayed by default)
.venv\Lib\site-packages\git\cmd.py:1228:            _logger.info(" ".join(redacted_command))
.venv\Lib\site-packages\git\cmd.py:1270:        _logger.debug(
.venv\Lib\site-packages\git\cmd.py:1392:                _logger.info(
.venv\Lib\site-packages\git\cmd.py:1400:                _logger.info("%s -> %d; stdout: '%s'", cmdstr, status, as_text(stdout_value))
.venv\Lib\site-packages\git\cmd.py:1402:                _logger.info("%s -> %d", cmdstr, status)
.venv\Lib\site-packages\git\config.py:16:import logging
.venv\Lib\site-packages\git\config.py:64:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\git\config.py:425:            _logger.error("Exception during destruction of GitConfigParser", exc_info=True)
.venv\Lib\site-packages\git\config.py:737:            _logger.debug(
.venv\Lib\site-packages\git\remote.py:11:import logging
.venv\Lib\site-packages\git\remote.py:57:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\git\remote.py:904:            _logger.warning("Error lines received while fetching: %s", stderr_text)
.venv\Lib\site-packages\git\remote.py:925:            _logger.debug(msg)
.venv\Lib\site-packages\git\remote.py:926:            _logger.debug(b"info lines: " + str(fetch_info_lines).encode("UTF-8"))
.venv\Lib\site-packages\git\remote.py:927:            _logger.debug(b"head info: " + str(fetch_head_info).encode("UTF-8"))
.venv\Lib\site-packages\git\remote.py:939:                _logger.debug("Caught error while parsing line: %s", exc)
.venv\Lib\site-packages\git\remote.py:940:                _logger.warning("Git informed while fetching: %s", err_line.strip())
.venv\Lib\site-packages\git\remote.py:982:                _logger.warning("Error lines received while fetching: %s", stderr_text)
.venv\Lib\site-packages\git\util.py:36:import logging
.venv\Lib\site-packages\git\util.py:112:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\git\util.py:126:    _logger.warning(
.venv\Lib\site-packages\git\util.py:137:    _logger.warning("%s has unrecognized value %r, treating as %r.", name, value, default)
.venv\Lib\site-packages\git\util.py:469:                _logger.debug(f"Failed checking if running in CYGWIN: {uname_cmd} is not an executable")
.venv\Lib\site-packages\git\util.py:478:            _logger.debug("Failed checking if running in CYGWIN due to: %r", ex)
.venv\Lib\site-packages\git\util.py:494:    _logger.debug(f"sys.platform={sys.platform!r}, git_executable={git_executable!r}")
.venv\Lib\site-packages\git\objects\commit.py:11:import logging
.venv\Lib\site-packages\git\objects\commit.py:64:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\git\objects\commit.py:848:            _logger.error(
.venv\Lib\site-packages\git\objects\commit.py:862:            _logger.error(
.venv\Lib\site-packages\git\objects\commit.py:876:            _logger.error(
.venv\Lib\site-packages\git\objects\submodule\base.py:8:import logging
.venv\Lib\site-packages\git\objects\submodule\base.py:74:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\git\objects\submodule\base.py:846:                        _logger.warning("Failed to checkout tracking branch %s", self.branch_path)
.venv\Lib\site-packages\git\objects\submodule\base.py:878:                        _logger.error(
.venv\Lib\site-packages\git\objects\submodule\base.py:885:                    _logger.error("%s there was no local tracking branch", msg_base)
.venv\Lib\site-packages\git\objects\submodule\base.py:905:                            _logger.debug(msg)
.venv\Lib\site-packages\git\objects\submodule\base.py:913:                            _logger.info(msg)
.venv\Lib\site-packages\git\objects\submodule\base.py:953:            _logger.error(str(err))
.venv\Lib\site-packages\git\objects\submodule\root.py:6:import logging
.venv\Lib\site-packages\git\objects\submodule\root.py:26:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\git\objects\submodule\root.py:345:                                    _logger.warning(
.venv\Lib\site-packages\git\objects\submodule\root.py:420:            _logger.error(str(err))
.venv\Lib\site-packages\git\refs\log.py:151:class RefLog(List[RefLogEntry], Serializable):
.venv\Lib\site-packages\git\refs\symbolic.py:540:    def log(self) -> "RefLog":
.venv\Lib\site-packages\git\repo\base.py:11:import logging
.venv\Lib\site-packages\git\repo\base.py:95:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\git\repo\base.py:860:                    _logger.debug(
.venv\Lib\site-packages\git\repo\base.py:869:            _logger.debug("Commit hash is invalid.")
.venv\Lib\site-packages\git\repo\base.py:1413:            _logger.debug("Cmd(%s)'s unused stdout: %s", cmdline, stdout)
.venv\Lib\site-packages\gitdb\test\lib.py:20:import logging
.venv\Lib\site-packages\gitdb\test\lib.py:49:            logging.info(
.venv\Lib\site-packages\gotrue\types.py:614:    the value. Avoid logging this value to the console.
.venv\Lib\site-packages\gotrue\types.py:620:    scan the QR code. Avoid logging this value to the console.
.venv\Lib\site-packages\h2\config.py:35:    A Logger object that does not actual logging, hence a DummyLogger.
.venv\Lib\site-packages\h2\config.py:39:    logging functions when no logger is passed into the corresponding object.
.venv\Lib\site-packages\h2\config.py:47:        No-op logging. Only level needed for now.
.venv\Lib\site-packages\h2\config.py:52:        No-op logging. Only level needed for now.
.venv\Lib\site-packages\h2\config.py:151:    :type logger: ``logging.Logger``
.venv\Lib\site-packages\h2\connection.py:481:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:503:        self.config.logger.debug("Stream ID %d created", stream_id)
.venv\Lib\site-packages\h2\connection.py:507:        self.config.logger.debug("Current streams: %s", self.streams.keys())
.venv\Lib\site-packages\h2\connection.py:521:        self.config.logger.debug("Initializing connection")
.venv\Lib\site-packages\h2\connection.py:531:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:570:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:602:        self.config.logger.debug("Process input %s", connection_input)
.venv\Lib\site-packages\h2\connection.py:676:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:789:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:874:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:887:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:906:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:923:        self.config.logger.debug("End stream ID %d", stream_id)
.venv\Lib\site-packages\h2\connection.py:958:            self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:968:            self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:999:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:1038:        self.config.logger.debug("Send Ping frame")
.venv\Lib\site-packages\h2\connection.py:1066:        self.config.logger.debug("Reset stream ID %d", stream_id)
.venv\Lib\site-packages\h2\connection.py:1090:        self.config.logger.debug("Close connection")
.venv\Lib\site-packages\h2\connection.py:1115:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:1357:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:1504:        self.config.logger.trace(
.venv\Lib\site-packages\h2\connection.py:1537:        self.config.logger.trace("Received frame: %s", repr(frame))
.venv\Lib\site-packages\h2\connection.py:1715:            self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:1724:        self.config.logger.debug(
.venv\Lib\site-packages\h2\connection.py:1973:        self.config.logger.debug(
.venv\Lib\site-packages\h2\stream.py:115:        for logging purposes.
.venv\Lib\site-packages\h2\stream.py:847:        self.config.logger.debug("Upgrading %r", self)
.venv\Lib\site-packages\h2\stream.py:866:        self.config.logger.debug("Send headers %s on %r", headers, self)
.venv\Lib\site-packages\h2\stream.py:922:        self.config.logger.debug("Push stream %r", self)
.venv\Lib\site-packages\h2\stream.py:964:        self.config.logger.debug(
.venv\Lib\site-packages\h2\stream.py:989:        self.config.logger.debug("End stream %r", self)
.venv\Lib\site-packages\h2\stream.py:1001:        self.config.logger.debug(
.venv\Lib\site-packages\h2\stream.py:1013:        self.config.logger.debug(
.venv\Lib\site-packages\h2\stream.py:1033:        self.config.logger.debug(
.venv\Lib\site-packages\h2\stream.py:1055:        self.config.logger.debug("%r pushed by remote peer", self)
.venv\Lib\site-packages\h2\stream.py:1110:        self.config.logger.debug(
.venv\Lib\site-packages\h2\stream.py:1134:        self.config.logger.debug(
.venv\Lib\site-packages\h2\stream.py:1173:        self.config.logger.debug("Receive Continuation frame on %r", self)
.venv\Lib\site-packages\h2\stream.py:1185:        self.config.logger.debug(
.venv\Lib\site-packages\h2\stream.py:1211:        self.config.logger.debug(
.venv\Lib\site-packages\h2\stream.py:1224:        self.config.logger.debug(
.venv\Lib\site-packages\h2\stream.py:1241:        self.config.logger.debug(
.venv\Lib\site-packages\hpack\hpack.py:6:import logging
.venv\Lib\site-packages\hpack\hpack.py:19:log = logging.getLogger(__name__)
.venv\Lib\site-packages\hpack\table.py:3:import logging
.venv\Lib\site-packages\hpack\table.py:8:log = logging.getLogger(__name__)
.venv\Lib\site-packages\html5lib\html5parser.py:398:    def log(function):
.venv\Lib\site-packages\httpcore\_trace.py:4:import logging
.venv\Lib\site-packages\httpcore\_trace.py:15:        logger: logging.Logger,
.venv\Lib\site-packages\httpcore\_trace.py:24:        self.debug = self.logger.isEnabledFor(logging.DEBUG)
.venv\Lib\site-packages\httpcore\_trace.py:28:        self.prefix = self.logger.name.split(".")[-1]
.venv\Lib\site-packages\httpcore\_trace.py:47:            self.logger.debug(message)
.venv\Lib\site-packages\httpcore\_trace.py:87:            self.logger.debug(message)
.venv\Lib\site-packages\httpcore\_async\connection.py:4:import logging
.venv\Lib\site-packages\httpcore\_async\connection.py:22:logger = logging.getLogger("httpcore.connection")
.venv\Lib\site-packages\httpcore\_async\http11.py:4:import logging
.venv\Lib\site-packages\httpcore\_async\http11.py:25:logger = logging.getLogger("httpcore.http11")
.venv\Lib\site-packages\httpcore\_async\http2.py:4:import logging
.venv\Lib\site-packages\httpcore\_async\http2.py:26:logger = logging.getLogger("httpcore.http2")
.venv\Lib\site-packages\httpcore\_async\http_proxy.py:4:import logging
.venv\Lib\site-packages\httpcore\_async\http_proxy.py:32:logger = logging.getLogger("httpcore.proxy")
.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:3:import logging
.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:19:logger = logging.getLogger("httpcore.socks")
.venv\Lib\site-packages\httpcore\_sync\connection.py:4:import logging
.venv\Lib\site-packages\httpcore\_sync\connection.py:22:logger = logging.getLogger("httpcore.connection")
.venv\Lib\site-packages\httpcore\_sync\http11.py:4:import logging
.venv\Lib\site-packages\httpcore\_sync\http11.py:25:logger = logging.getLogger("httpcore.http11")
.venv\Lib\site-packages\httpcore\_sync\http2.py:4:import logging
.venv\Lib\site-packages\httpcore\_sync\http2.py:26:logger = logging.getLogger("httpcore.http2")
.venv\Lib\site-packages\httpcore\_sync\http_proxy.py:4:import logging
.venv\Lib\site-packages\httpcore\_sync\http_proxy.py:32:logger = logging.getLogger("httpcore.proxy")
.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:3:import logging
.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:19:logger = logging.getLogger("httpcore.socks")
.venv\Lib\site-packages\httpx\_client.py:3:import logging
.venv\Lib\site-packages\httpx\_client.py:87:logger = logging.getLogger("httpx")
.venv\Lib\site-packages\httpx\_client.py:1013:        logger.info(
.venv\Lib\site-packages\httpx\_client.py:1729:        logger.info(
.venv\Lib\site-packages\httpx\_config.py:1:import logging
.venv\Lib\site-packages\httpx\_config.py:35:logger = logging.getLogger("httpx")
.venv\Lib\site-packages\httpx\_config.py:78:        logger.debug(
.venv\Lib\site-packages\httpx\_config.py:144:            logger.debug("load_verify_locations cafile=%r", cafile)
.venv\Lib\site-packages\httpx\_config.py:148:            logger.debug("load_verify_locations capath=%r", capath)
.venv\Lib\site-packages\idna\intranges.py:5:in the original list?" in time O(log(# runs)).
.venv\Lib\site-packages\isort\stdlibs\py27.py:164:    "logging",
.venv\Lib\site-packages\isort\stdlibs\py310.py:100:    "logging",
.venv\Lib\site-packages\isort\stdlibs\py311.py:99:    "logging",
.venv\Lib\site-packages\isort\stdlibs\py312.py:95:    "logging",
.venv\Lib\site-packages\isort\stdlibs\py313.py:87:    "logging",
.venv\Lib\site-packages\isort\stdlibs\py36.py:99:    "logging",
.venv\Lib\site-packages\isort\stdlibs\py37.py:100:    "logging",
.venv\Lib\site-packages\isort\stdlibs\py38.py:101:    "logging",
.venv\Lib\site-packages\isort\stdlibs\py39.py:101:    "logging",
.venv\Lib\site-packages\license_expression\_pyahocorasick.py:25:import logging
.venv\Lib\site-packages\license_expression\_pyahocorasick.py:30:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\license_expression\_pyahocorasick.py:40:        return logger.debug(" ".join(isinstance(a, str) and a or repr(a) for a in args))
.venv\Lib\site-packages\license_expression\_pyahocorasick.py:44:    logging.basicConfig(stream=sys.stdout)
.venv\Lib\site-packages\license_expression\_pyahocorasick.py:45:    logger.setLevel(logging.DEBUG)
.venv\Lib\site-packages\lxml\isoschematron\__init__.py:295:        self._clear_error_log()
.venv\Lib\site-packages\markdown_it\parser_block.py:6:import logging
.venv\Lib\site-packages\markdown_it\parser_block.py:18:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\markdown_it\rules_block\blockquote.py:4:import logging
.venv\Lib\site-packages\markdown_it\rules_block\blockquote.py:9:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\markdown_it\rules_block\blockquote.py:13:    LOGGER.debug(
.venv\Lib\site-packages\markdown_it\rules_block\code.py:3:import logging
.venv\Lib\site-packages\markdown_it\rules_block\code.py:7:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\markdown_it\rules_block\code.py:11:    LOGGER.debug("entering code: %s, %s, %s, %s", state, startLine, endLine, silent)
.venv\Lib\site-packages\markdown_it\rules_block\fence.py:2:import logging
.venv\Lib\site-packages\markdown_it\rules_block\fence.py:6:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\markdown_it\rules_block\fence.py:10:    LOGGER.debug("entering fence: %s, %s, %s, %s", state, startLine, endLine, silent)
.venv\Lib\site-packages\markdown_it\rules_block\heading.py:5:import logging
.venv\Lib\site-packages\markdown_it\rules_block\heading.py:10:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\markdown_it\rules_block\heading.py:14:    LOGGER.debug("entering heading: %s, %s, %s, %s", state, startLine, endLine, silent)
.venv\Lib\site-packages\markdown_it\rules_block\hr.py:6:import logging
.venv\Lib\site-packages\markdown_it\rules_block\hr.py:11:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\markdown_it\rules_block\hr.py:15:    LOGGER.debug("entering hr: %s, %s, %s, %s", state, startLine, endLine, silent)
.venv\Lib\site-packages\markdown_it\rules_block\html_block.py:4:import logging
.venv\Lib\site-packages\markdown_it\rules_block\html_block.py:11:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\markdown_it\rules_block\html_block.py:35:    LOGGER.debug(
.venv\Lib\site-packages\markdown_it\rules_block\lheading.py:2:import logging
.venv\Lib\site-packages\markdown_it\rules_block\lheading.py:6:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\markdown_it\rules_block\lheading.py:10:    LOGGER.debug("entering lheading: %s, %s, %s, %s", state, startLine, endLine, silent)
.venv\Lib\site-packages\markdown_it\rules_block\list.py:2:import logging
.venv\Lib\site-packages\markdown_it\rules_block\list.py:7:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\markdown_it\rules_block\list.py:102:    LOGGER.debug("entering list: %s, %s, %s, %s", state, startLine, endLine, silent)
.venv\Lib\site-packages\markdown_it\rules_block\paragraph.py:3:import logging
.venv\Lib\site-packages\markdown_it\rules_block\paragraph.py:7:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\markdown_it\rules_block\paragraph.py:11:    LOGGER.debug(
.venv\Lib\site-packages\markdown_it\rules_block\reference.py:1:import logging
.venv\Lib\site-packages\markdown_it\rules_block\reference.py:6:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\markdown_it\rules_block\reference.py:10:    LOGGER.debug(
.venv\Lib\site-packages\markdown_it\rules_core\replacements.py:19:import logging
.venv\Lib\site-packages\markdown_it\rules_core\replacements.py:25:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\mypy\build.py:275:        manager.log(
.venv\Lib\site-packages\mypy\build.py:846:            self.log("Bailing due to parse errors")
.venv\Lib\site-packages\mypy\build.py:872:    def log(self, *message: str) -> None:
.venv\Lib\site-packages\mypy\build.py:884:            self.log("fine-grained:", *message)
.venv\Lib\site-packages\mypy\build.py:957:        manager.log("Writing deps cache", deps_json)
.venv\Lib\site-packages\mypy\build.py:959:            manager.log(f"Error writing fine-grained deps JSON file {deps_json}")
.venv\Lib\site-packages\mypy\build.py:979:        manager.log(f"Error writing fine-grained deps meta JSON file {DEPS_META_FILE}")
.venv\Lib\site-packages\mypy\build.py:1063:        manager.log(f"Could not load plugins snapshot: cache is not a dict: {type(snapshot)}")
.venv\Lib\site-packages\mypy\build.py:1115:        manager.log("Fine-grained dependencies cache inconsistent, ignoring")
.venv\Lib\site-packages\mypy\build.py:1127:                manager.log(f"Invalid or missing fine-grained deps cache: {meta['path']}")
.venv\Lib\site-packages\mypy\build.py:1136:    """A simple helper to read a JSON file with logging."""
.venv\Lib\site-packages\mypy\build.py:1141:        manager.log(log_error + file)
.venv\Lib\site-packages\mypy\build.py:1144:    # Only bother to compute the log message if we are logging it, since it could be big
.venv\Lib\site-packages\mypy\build.py:1279:        manager.log(f"Could not load cache for {id}: meta cache is not a dict: {repr(meta)}")
.venv\Lib\site-packages\mypy\build.py:1299:        manager.log(f"Metadata abandoned for {id}: attributes are missing")
.venv\Lib\site-packages\mypy\build.py:1309:        manager.log(f"Metadata abandoned for {id}: new attributes are missing")
.venv\Lib\site-packages\mypy\build.py:1323:        manager.log(f"Metadata abandoned for {id}: options differ")
.venv\Lib\site-packages\mypy\build.py:1336:            manager.log(f"Metadata abandoned for {id}: plugins differ")
.venv\Lib\site-packages\mypy\build.py:1345:        manager.log(f"Metadata abandoned for {id}: plugin configuration differs")
.venv\Lib\site-packages\mypy\build.py:1368:        manager.log(f"Metadata not found for {id}")
.venv\Lib\site-packages\mypy\build.py:1372:        manager.log(f"Metadata abandoned for {id}: errors were previously ignored")
.venv\Lib\site-packages\mypy\build.py:1383:            manager.log(f"Metadata abandoned for {id}: failed to stat data_json")
.venv\Lib\site-packages\mypy\build.py:1386:            manager.log(f"Metadata abandoned for {id}: data cache is modified")
.venv\Lib\site-packages\mypy\build.py:1397:        manager.log(f"Metadata abandoned for {id}: file or directory {path} does not exist")
.venv\Lib\site-packages\mypy\build.py:1420:        manager.log(f"Metadata abandoned for {id}: file {path} has different size")
.venv\Lib\site-packages\mypy\build.py:1433:                manager.log(f"Metadata fresh (by quickstart) for {id}: file {path}")
.venv\Lib\site-packages\mypy\build.py:1449:                manager.log(f"Using stale metadata for {id}: file {path}")
.venv\Lib\site-packages\mypy\build.py:1452:                manager.log(f"Metadata abandoned for {id}: file {path} has different hash")
.venv\Lib\site-packages\mypy\build.py:1481:            manager.log(
.venv\Lib\site-packages\mypy\build.py:1492:    manager.log(f"Metadata fresh for {id}: file {path}")
.venv\Lib\site-packages\mypy\build.py:1555:    manager.log(f"Writing {id} {path} {meta_json} {data_json}")
.venv\Lib\site-packages\mypy\build.py:1573:        manager.log(f"Cannot get stat for {path}: {err}")
.venv\Lib\site-packages\mypy\build.py:1593:            manager.log(f"Error writing data JSON file {data_json}")
.venv\Lib\site-packages\mypy\build.py:1607:        manager.log(f"Error in os.stat({data_json!r}), skipping cache write")
.venv\Lib\site-packages\mypy\build.py:1643:        manager.log(f"Error writing meta JSON file {meta_json}")
.venv\Lib\site-packages\mypy\build.py:1660:    manager.log(f"Deleting {id} {path} {' '.join(x for x in cache_paths if x)}")
.venv\Lib\site-packages\mypy\build.py:1667:                manager.log(f"Error deleting cache file {filename}: {e.strerror}")
.venv\Lib\site-packages\mypy\build.py:1991:                manager.log(f"Deferring module to fine-grained update {path} ({id})")
.venv\Lib\site-packages\mypy\build.py:2047:            self.manager.log("Bailing due to blocking errors")
.venv\Lib\site-packages\mypy\build.py:2129:            manager.log(f"Parsing {self.xpath} ({self.id})")
.venv\Lib\site-packages\mypy\build.py:2131:            manager.log(f"Using cached AST for {self.xpath} ({self.id})")
.venv\Lib\site-packages\mypy\build.py:2516:            self.manager.log(f"Cached module {self.id} has same interface")
.venv\Lib\site-packages\mypy\build.py:2518:            self.manager.log(f"Cached module {self.id} has changed interface")
.venv\Lib\site-packages\mypy\build.py:2645:            manager.log(f"Silencing {result} ({id})")
.venv\Lib\site-packages\mypy\build.py:2649:                manager.log(f"Skipping {result} ({id})")
.venv\Lib\site-packages\mypy\build.py:2852:    manager.log()
.venv\Lib\site-packages\mypy\build.py:2864:        manager.log(f"{conf_name + ':':24}{conf_value}")
.venv\Lib\site-packages\mypy\build.py:2867:        manager.log(f"{'Found source:':24}{source}")
.venv\Lib\site-packages\mypy\build.py:2897:        manager.log("Redoing load_graph without cache because too much was missing")
.venv\Lib\site-packages\mypy\build.py:2911:    manager.log(f"Loaded graph with {len(graph)} nodes ({t1 - t0:.3f} sec)")
.venv\Lib\site-packages\mypy\build.py:2932:            manager.log("Error reading fine-grained dependencies cache -- aborting cache load")
.venv\Lib\site-packages\mypy\build.py:2934:            manager.log("Falling back to full run -- reloading graph...")
.venv\Lib\site-packages\mypy\build.py:3210:    manager.log("Found %d SCCs; largest has %d nodes" % (len(sccs), max(len(scc) for scc in sccs)))
.venv\Lib\site-packages\mypy\build.py:3316:                manager.log(f"Processing {len(fresh_scc_queue)} queued fresh SCCs")
.venv\Lib\site-packages\mypy\build.py:3336:                manager.log(f"Processing SCC singleton ({scc_str}) as {fresh_msg}")
.venv\Lib\site-packages\mypy\build.py:3338:                manager.log("Processing SCC of size %d (%s) as %s" % (size, scc_str, fresh_msg))
.venv\Lib\site-packages\mypy\build.py:3345:        manager.log(
.venv\Lib\site-packages\mypy\build.py:3352:        manager.log("No fresh SCCs left in queue")
.venv\Lib\site-packages\mypy\checker.py:7974:    runtime of O(n*log(n)): 'add_mapping()' and 'items()' are worst-case O(k*log(n) + v) and
.venv\Lib\site-packages\mypy\checker.py:7975:    O(k*log(n)) respectively. This happens only in the rare case where the user keeps repeatedly
.venv\Lib\site-packages\mypy\dmypy_server.py:395:        manager.log(f"fine-grained increment: cmd_recheck: {t1 - t0:.3f}s")
.venv\Lib\site-packages\mypy\dmypy_server.py:584:        manager.log(f"fine-grained increment: find_changed: {t1 - t0:.3f}s")
.venv\Lib\site-packages\mypy\dmypy_server.py:587:        manager.log(f"fine-grained increment: update: {t2 - t1:.3f}s")
.venv\Lib\site-packages\mypy\dmypy_server.py:617:        manager.log(f"fine-grained increment: find_changed: {t1 - t0:.3f}s")
.venv\Lib\site-packages\mypy\dmypy_server.py:707:        manager.log(f"fine-grained increment: update: {t5 - t1:.3f}s")
.venv\Lib\site-packages\mypy\stats.py:368:            self.log("  !! Any type around line %d" % self.line)
.venv\Lib\site-packages\mypy\stats.py:372:            self.log("  !! Imprecise type around line %d" % self.line)
.venv\Lib\site-packages\mypy\stats.py:408:    def log(self, string: str) -> None:
.venv\Lib\site-packages\mypy\suggestions.py:124:    def log(self, ctx: FunctionContext | MethodContext) -> Type:
.venv\Lib\site-packages\mypyc\primitives\float_ops.py:98:# math.log(float)
.venv\Lib\site-packages\numpy\array_api\_elementwise_functions.py:453:def log(x: Array, /) -> Array:
.venv\Lib\site-packages\numpy\array_api\_elementwise_functions.py:461:    return Array._new(np.log(x._array))
.venv\Lib\site-packages\numpy\core\fromnumeric.py:918:    'heapsort'     3     O(n*log(n))       0          no
.venv\Lib\site-packages\numpy\core\fromnumeric.py:919:    'mergesort'    2     O(n*log(n))      ~n/2        yes
.venv\Lib\site-packages\numpy\core\fromnumeric.py:920:    'timsort'      2     O(n*log(n))      ~n/2        yes
.venv\Lib\site-packages\numpy\core\fromnumeric.py:953:    This implementation makes quicksort O(n*log(n)) in the worst case.
.venv\Lib\site-packages\numpy\core\function_base.py:451:    # necessary because np.exp(np.log(x)) is not necessarily equal to x.
.venv\Lib\site-packages\numpy\core\_ufunc_config.py:289:    >>> log = Log()
.venv\Lib\site-packages\numpy\core\tests\test_function_base.py:147:        # np.exp(np.log(x)) isn't necessarily exactly equal to x
.venv\Lib\site-packages\numpy\core\tests\test_ufunc.py:2794:    # adding inf and -inf (or log(-inf) creates an invalid float and warns
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1348:            assert_almost_equal(np.log(xf), yf)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1352:        xf = np.log(x)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1353:        assert_almost_equal(np.log(x, out=x), xf)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1355:        # test log() of max for dtype does not raise
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1360:                    np.log(x)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1367:                        " np.log(np.finfo(np.longdouble).max)"
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1380:            y_true = np.log(x_f64)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1381:            y_special = np.log(x_special)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1383:                assert_array_almost_equal_nulp(np.log(x_f64[::jj]), y_true[::jj], nulp=2)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1384:                assert_array_almost_equal_nulp(np.log(x_special[::jj]), y_special[::jj], nulp=2)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1446:                assert_equal(np.log(yf), xf)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1484:            np.log(a)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1974:        assert_array_max_ulp(np.log(x_f32), np.float32(np.log(x_f64)), maxulp=4)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:2003:            log_true = np.log(x_f32)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:2008:                assert_array_almost_equal_nulp(np.log(x_f32[::jj]), log_true[::jj], nulp=2)
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:2018:            xf = np.log(np.array(x, dtype=dt))
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:2019:            yf = np.log(np.array(y, dtype=dt))
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:2020:            zf = np.log(np.array(z, dtype=dt))
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:2059:        assert_almost_equal(ncu.log1p(0.2), ncu.log(1.2))
.venv\Lib\site-packages\numpy\core\tests\test_umath.py:2060:        assert_almost_equal(ncu.log1p(1e-6), ncu.log(1+1e-6))
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:22:                            or (np.log(complex(np.NZERO, 0)).imag != np.pi))
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:135:        y_r = np.log(np.abs(x)) + 1j * np.angle(x)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:136:        y = np.log(x)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:149:        # clog(-0 + i0) returns -inf + i pi and raises the 'divide-by-zero'
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:156:            assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:161:        # clog(+0 + i0) returns -inf + i0 and raises the 'divide-by-zero'
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:168:            assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:173:        # clog(x + i inf returns +inf + i pi /2, for finite x.
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:176:        assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:181:        assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:185:        # clog(x + iNaN) returns NaN + iNaN and optionally raises the
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:192:            assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:201:            assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:206:        # clog(- inf + iy) returns +inf + ipi , for finite positive-signed y.
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:209:        assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:213:        # clog(+ inf + iy) returns +inf + i0, for finite positive-signed y.
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:216:        assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:220:        # clog(- inf + i inf) returns +inf + i3pi /4.
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:223:        assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:227:        # clog(+ inf + i inf) returns +inf + ipi /4.
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:230:        assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:234:        # clog(+/- inf + iNaN) returns +inf + iNaN.
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:237:        assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:242:        assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:246:        # clog(NaN + iy) returns NaN + iNaN and optionally raises the
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:250:        assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:254:        # clog(NaN + i inf) returns +inf + iNaN.
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:257:        assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:261:        # clog(NaN + iNaN) returns NaN + iNaN.
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:264:        assert_almost_equal(np.log(x), y)
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:268:        # clog(conj(z)) = conj(clog(z)).
.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:273:                assert_almost_equal(np.log(xa[i].conj()), ya[i].conj())
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:637:            self.dist_log(str(e), stderr=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:692:    def dist_log(*args, stderr=False):
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:708:            _Distutils.dist_log(e, stderr=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:813:            self.dist_log("cache is disabled by `Config`")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:820:                self.dist_log("load cache from file ->", cache_path)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:823:                    self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:829:                    self.dist_log("invalid cache file", stderr=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:831:                    self.dist_log("hit the file cache")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:836:                    self.dist_log("miss the file cache")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:841:                self.dist_log("hit the memory cache")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:864:        self.dist_log("write cache to path ->", self._cache_path)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1025:            self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1033:            self.dist_log("Optimization is disabled by the Config", stderr=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1041:            self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1086:        self.dist_log("testing flags", flags)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1090:            self.dist_log("testing failed", stderr=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1098:        self.dist_log("testing compiler expression", cexpr)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1109:            self.dist_log("testing failed", stderr=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1253:                self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1560:        self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1576:            self.dist_log("testing failed", stderr=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1640:        self.dist_log("Testing extra checks for feature '%s'" % name, extra_checks)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1658:            self.dist_log("testing failed for checks", not_available, stderr=True)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1795:        self.dist_log("check requested baseline")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1804:        self.dist_log("check requested dispatch-able features")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1816:                self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1820:        self.dist_log("initialize targets groups")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1822:            self.dist_log("parse target group", group_name)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1862:        self.dist_log("looking for '@targets' inside -> ", source)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2033:            self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2046:                self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2057:                self.dist_log("policy '%s' is ON" % p)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2145:            self.dist_log("skip baseline features", skipped)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2151:        self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2166:            self.dist_log("debug mode is detected, policy 'maxopt' is skipped.")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2168:            self.dist_log("optimization is disabled, policy 'maxopt' is skipped.")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2172:                self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2184:            self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2189:            self.dist_log("compiler warnings are treated as errors")
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2209:            self.dist_log("skip non auto-vectorized features", skipped)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2226:            self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2366:        self.dist_log("generate CPU dispatch header: (%s)" % header_path)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2375:            self.dist_log(
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2562:        self.dist_log("wrap dispatch-able target -> ", wrap_path)
.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2602:        self.dist_log("generate dispatched config -> ", config_path)
.venv\Lib\site-packages\numpy\distutils\log.py:19:class Log(old_Log):
.venv\Lib\site-packages\numpy\distutils\log.py:20:    def _log(self, level, msg, args):
.venv\Lib\site-packages\numpy\distutils\command\build_src.py:55:         "change logging level from WARN to INFO which will show all " +
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt.py:74:    def dist_log(*args, stderr=False):
.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:30:    def dist_log(*args, stderr=False):
.venv\Lib\site-packages\numpy\doc\constants.py:126:    >>> np.log(-1)
.venv\Lib\site-packages\numpy\doc\constants.py:128:    >>> np.log([-1, 1, 2])
.venv\Lib\site-packages\numpy\doc\constants.py:327:    >>> np.log(0)
.venv\Lib\site-packages\numpy\fft\_pocketfft.py:810:    >>> plt.imshow(np.log(np.abs(np.fft.fftshift(FS))**2))
.venv\Lib\site-packages\numpy\lib\scimath.py:10:  >>> np.emath.log(-math.exp(1)) == (1+1j*math.pi)
.venv\Lib\site-packages\numpy\lib\scimath.py:46:_ln2 = nx.log(2.0)
.venv\Lib\site-packages\numpy\lib\scimath.py:252:def log(x):
.venv\Lib\site-packages\numpy\lib\scimath.py:257:    of :math:`log_e(x)`. For real `x > 0`, this is a real number (``log(0)``
.venv\Lib\site-packages\numpy\lib\scimath.py:258:    returns ``-inf`` and ``log(np.inf)`` returns ``inf``). Otherwise, the
.venv\Lib\site-packages\numpy\lib\scimath.py:278:    For a log() that returns ``NAN`` when real `x < 0`, use `numpy.log`
.venv\Lib\site-packages\numpy\lib\scimath.py:285:    >>> np.emath.log(np.exp(1))
.venv\Lib\site-packages\numpy\lib\scimath.py:289:    ``exp(log(x)) == x`` does *not* hold for real ``x < 0``):
.venv\Lib\site-packages\numpy\lib\scimath.py:291:    >>> np.emath.log(-np.exp(1)) == (1 + np.pi * 1j)
.venv\Lib\site-packages\numpy\lib\scimath.py:296:    return nx.log(x)
.venv\Lib\site-packages\numpy\lib\scimath.py:386:    return nx.log(x)/nx.log(n)
.venv\Lib\site-packages\numpy\lib\twodim_base.py:766:    >>> y = 2*np.log(x) + np.random.rand(n) - 0.5
.venv\Lib\site-packages\numpy\lib\twodim_base.py:777:    >>> ax1.plot(x, 2*np.log(x), 'k-')
.venv\Lib\site-packages\numpy\lib\twodim_base.py:787:    >>> ax2.plot(x, 2*np.log(x), 'k-')
.venv\Lib\site-packages\numpy\ma\tests\test_core.py:1163:        assert_equal(np.log(abs(x)), log(xm))
.venv\Lib\site-packages\numpy\ma\tests\test_core.py:1912:        control = masked_array([np.nan, np.nan, 0, np.log(2), -1],
.venv\Lib\site-packages\numpy\ma\tests\test_core.py:1915:        test = log(a)
.venv\Lib\site-packages\numpy\ma\tests\test_core.py:1920:        test = np.log(a)
.venv\Lib\site-packages\numpy\ma\tests\test_core.py:2572:            log(m)
.venv\Lib\site-packages\numpy\ma\tests\test_old_ma.py:142:            assert_(eq(np.log(abs(x)), log(xm)))
.venv\Lib\site-packages\numpy\ma\tests\test_subclassing.py:206:            assert_(isinstance(log(mx), msubarray))
.venv\Lib\site-packages\numpy\ma\tests\test_subclassing.py:207:            assert_equal(log(x), np.log(x))
.venv\Lib\site-packages\numpy\ma\tests\test_subclassing.py:430:            assert_(isinstance(np.log(wm), WrappedArray))
.venv\Lib\site-packages\numpy\matrixlib\tests\test_masked_matrix.py:190:            assert_(isinstance(log(mx), MMatrix))
.venv\Lib\site-packages\numpy\matrixlib\tests\test_masked_matrix.py:191:            assert_equal(log(x), np.log(x))
.venv\Lib\site-packages\numpy\random\tests\test_direct.py:125:        f = np.sqrt(-2.0 * np.log(r2) / r2)
.venv\Lib\site-packages\numpy\random\tests\test_smoke.py:198:    def test_standard_exponential_float_log(self):
.venv\Lib\site-packages\numpy\random\_examples\numba\extending.py:21:        f = np.sqrt(-2.0 * np.log(r2) / r2)
.venv\Lib\site-packages\numpy\tests\test_public_api.py:386:        'numpy.distutils.log.logging',
.venv\Lib\site-packages\packaging\tags.py:7:import logging
.venv\Lib\site-packages\packaging\tags.py:25:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\packaging\tags.py:115:        logger.debug(
.venv\Lib\site-packages\pandas\core\nanops.py:159:        # unlike numpy which implements pairwise summation, which has O(log(n)) loss
.venv\Lib\site-packages\pandas\core\sorting.py:698:    np.argsort(kind='mergesort') is O(count x log(count)) where count is the
.venv\Lib\site-packages\pandas\core\sorting.py:719:    do_groupsort = count > 0 and ((alpha + beta * ngroups) < (count * np.log(count)))
.venv\Lib\site-packages\pandas\core\window\ewm.py:88:        decay = 1 - np.exp(np.log(0.5) / halflife)
.venv\Lib\site-packages\pandas\tests\test_downstream.py:142:    smf.ols("Lottery ~ Literacy + np.log(Pop1831)", data=df).fit()
.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_operators.py:413:            np.log(s)
.venv\Lib\site-packages\pandas\tests\groupby\test_apply.py:344:            logged = np.log(piece)
.venv\Lib\site-packages\pandas\tests\io\conftest.py:109:        # pipe to null to avoid logging in terminal
.venv\Lib\site-packages\pandas\tests\io\parser\test_network.py:9:import logging
.venv\Lib\site-packages\pandas\tests\io\parser\test_network.py:316:        with caplog.at_level(logging.DEBUG, logger="s3fs"):
.venv\Lib\site-packages\pandas\tests\plotting\test_series.py:282:    def test_bar_log(self, axis, meth):
.venv\Lib\site-packages\pandas\tests\plotting\frame\test_frame.py:435:    def test_negative_log(self):
.venv\Lib\site-packages\pandas\tests\scalar\test_na_scalar.py:230:    assert np.log(NA) is NA
.venv\Lib\site-packages\pandas\tests\series\methods\test_reindex.py:423:def test_reindexing_with_float64_NA_log():
.venv\Lib\site-packages\pandas\tests\series\methods\test_reindex.py:431:        result_log = np.log(s_reindex)
.venv\Lib\site-packages\pip\_internal\build_env.py:5:import logging
.venv\Lib\site-packages\pip\_internal\build_env.py:22:from pip._internal.utils.logging import VERBOSE
.venv\Lib\site-packages\pip\_internal\build_env.py:31:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\build_env.py:135:        if logger.getEffectiveLevel() <= logging.DEBUG:
.venv\Lib\site-packages\pip\_internal\build_env.py:137:        elif logger.getEffectiveLevel() <= VERBOSE:
.venv\Lib\site-packages\pip\_internal\cache.py:7:import logging
.venv\Lib\site-packages\pip\_internal\cache.py:22:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\cache.py:147:                logger.debug(
.venv\Lib\site-packages\pip\_internal\cache.py:201:                logger.warning(
.venv\Lib\site-packages\pip\_internal\cache.py:273:                logger.warning(
.venv\Lib\site-packages\pip\_internal\cache.py:283:                    logger.warning(
.venv\Lib\site-packages\pip\_internal\configuration.py:29:from pip._internal.utils.logging import getLogger
.venv\Lib\site-packages\pip\_internal\configuration.py:220:            logger.info("Writing to %s", fname)
.venv\Lib\site-packages\pip\_internal\configuration.py:242:        logger.debug("Will be working with %s variant only", self.load_only)
.venv\Lib\site-packages\pip\_internal\configuration.py:260:            logger.debug(
.venv\Lib\site-packages\pip\_internal\configuration.py:271:                    logger.debug("Skipping file '%s' (variant: %s)", fname, variant)
.venv\Lib\site-packages\pip\_internal\configuration.py:280:        logger.verbose("For variant '%s', will try loading '%s'", variant, fname)
.venv\Lib\site-packages\pip\_internal\exceptions.py:13:import logging
.venv\Lib\site-packages\pip\_internal\exceptions.py:36:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\exceptions.py:739:            exc_info = logger.isEnabledFor(VERBOSE)
.venv\Lib\site-packages\pip\_internal\exceptions.py:740:            logger.warning("Failed to read %s", config, exc_info=exc_info)
.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:7:import logging
.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:39:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:207:            logger.debug("No remote pip version found")
.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:212:    logger.debug("Remote version of pip: %s", remote_version)
.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:213:    logger.debug("Local version of pip:  %s", local_version)
.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:216:    logger.debug("Was pip installed by pip? %s", pip_installed_by_pip)
.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:254:        logger.warning("%s", upgrade_prompt, extra={"rich": True})
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:5:import logging
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:23:from pip._internal.utils.logging import indent_log
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:31:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:163:        logger.warning(
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:180:            logger.warning("Built %s for %s is invalid: %s", artifact, req.name, e)
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:198:                logger.warning(
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:202:                logger.warning(
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:235:                logger.info(
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:242:                logger.info("Stored in directory: %s", output_dir)
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:245:                logger.warning(
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:262:    logger.info("Running setup.py clean for %s", req.name)
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:269:        logger.error("Failed cleaning build dir for %s", req.name)
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:289:    logger.info(
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:294:    with indent_log():
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:324:        logger.info(
.venv\Lib\site-packages\pip\_internal\wheel_builder.py:329:        logger.info(
.venv\Lib\site-packages\pip\_internal\__init__.py:5:# init_logging() must be called before any call to logging.getLogger()
.venv\Lib\site-packages\pip\_internal\__init__.py:7:_log.init_logging()
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:5:import logging
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:6:import logging.config
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:35:from pip._internal.utils.logging import BrokenStdoutLoggingError, setup_logging
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:43:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:111:            logger.error("%s", exc, extra={"rich": True})
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:112:            logger.debug("Exception information:", exc_info=True)
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:116:            logger.critical(str(exc))
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:117:            logger.debug("Exception information:", exc_info=True)
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:125:            logger.critical(str(exc))
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:126:            logger.debug("Exception information:", exc_info=True)
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:130:            logger.critical("%s", exc)
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:131:            logger.debug("Exception information:", exc_info=True)
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:134:        except BrokenStdoutLoggingError:
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:138:            if level_number <= logging.DEBUG:
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:143:            logger.critical("Operation cancelled by user")
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:144:            logger.debug("Exception information:", exc_info=True)
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:148:            logger.critical("Exception:", exc_info=True)
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:161:            logging.shutdown()
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:183:        level_number = setup_logging(
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:193:            logger.warning(
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:204:            logger.critical(
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:222:                logger.critical("Could not find an activated virtualenv (required).")
.venv\Lib\site-packages\pip\_internal\cli\base_command.py:228:                logger.warning(
.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:15:import logging
.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:35:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:140:        "instead of logging them to stderr."
.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:221:        " times (corresponding to WARNING, ERROR, and CRITICAL logging"
.venv\Lib\site-packages\pip\_internal\cli\index_command.py:11:import logging
.venv\Lib\site-packages\pip\_internal\cli\index_command.py:28:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\cli\index_command.py:34:        logger.debug("Disabling truststore because Python version isn't 3.10+")
.venv\Lib\site-packages\pip\_internal\cli\index_command.py:40:        logger.warning("Disabling truststore since ssl support is missing")
.venv\Lib\site-packages\pip\_internal\cli\index_command.py:46:        logger.warning("Disabling truststore because platform isn't supported")
.venv\Lib\site-packages\pip\_internal\cli\index_command.py:174:            logger.warning("There was an error checking the latest version of pip.")
.venv\Lib\site-packages\pip\_internal\cli\index_command.py:175:            logger.debug("See below for error", exc_info=True)
.venv\Lib\site-packages\pip\_internal\cli\main.py:6:import logging
.venv\Lib\site-packages\pip\_internal\cli\main.py:17:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\cli\main.py:77:        logger.debug("Ignoring error %s when setting locale", e)
.venv\Lib\site-packages\pip\_internal\cli\parser.py:5:import logging
.venv\Lib\site-packages\pip\_internal\cli\parser.py:18:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\cli\parser.py:91:    def format_epilog(self, epilog: str | None) -> str:
.venv\Lib\site-packages\pip\_internal\cli\parser.py:196:                    logger.debug(
.venv\Lib\site-packages\pip\_internal\cli\progress_bars.py:24:from pip._internal.utils.logging import get_console, get_indentation
.venv\Lib\site-packages\pip\_internal\cli\req_command.py:10:import logging
.venv\Lib\site-packages\pip\_internal\cli\req_command.py:44:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\cli\req_command.py:120:                logger.warning(
.venv\Lib\site-packages\pip\_internal\cli\req_command.py:131:                logger.warning(
.venv\Lib\site-packages\pip\_internal\cli\req_command.py:323:            logger.info(locations)
.venv\Lib\site-packages\pip\_internal\cli\spinners.py:5:import logging
.venv\Lib\site-packages\pip\_internal\cli\spinners.py:22:from pip._internal.utils.logging import get_console, get_indentation
.venv\Lib\site-packages\pip\_internal\cli\spinners.py:24:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\cli\spinners.py:101:        logger.info("%s: %s", self._message, status)
.venv\Lib\site-packages\pip\_internal\cli\spinners.py:134:    # through the logging system, but it acts like it has level INFO,
.venv\Lib\site-packages\pip\_internal\cli\spinners.py:136:    # Non-interactive spinner goes through the logging system, so it is always
.venv\Lib\site-packages\pip\_internal\cli\spinners.py:137:    # in sync with logging configuration.
.venv\Lib\site-packages\pip\_internal\cli\spinners.py:138:    if sys.stdout.isatty() and logger.getEffectiveLevel() <= logging.INFO:
.venv\Lib\site-packages\pip\_internal\cli\spinners.py:195:    if not logger.isEnabledFor(logging.INFO):
.venv\Lib\site-packages\pip\_internal\cli\spinners.py:228:    elif not file.isatty() or logger.getEffectiveLevel() > logging.INFO:
.venv\Lib\site-packages\pip\_internal\commands\cache.py:10:from pip._internal.utils.logging import getLogger
.venv\Lib\site-packages\pip\_internal\commands\cache.py:65:            logger.error("pip cache commands can not function since cache is disabled.")
.venv\Lib\site-packages\pip\_internal\commands\cache.py:70:            logger.error(
.venv\Lib\site-packages\pip\_internal\commands\cache.py:82:            logger.error(e.args[0])
.venv\Lib\site-packages\pip\_internal\commands\cache.py:91:        logger.info(options.cache_dir)
.venv\Lib\site-packages\pip\_internal\commands\cache.py:133:        logger.info(message)
.venv\Lib\site-packages\pip\_internal\commands\cache.py:152:            logger.info("No locally built wheels cached.")
.venv\Lib\site-packages\pip\_internal\commands\cache.py:160:        logger.info("Cache contents:\n")
.venv\Lib\site-packages\pip\_internal\commands\cache.py:161:        logger.info("\n".join(sorted(results)))
.venv\Lib\site-packages\pip\_internal\commands\cache.py:165:            logger.info("\n".join(sorted(files)))
.venv\Lib\site-packages\pip\_internal\commands\cache.py:185:            logger.warning(no_matching_msg)
.venv\Lib\site-packages\pip\_internal\commands\cache.py:191:            logger.verbose("Removed %s", filename)
.venv\Lib\site-packages\pip\_internal\commands\cache.py:192:        logger.info("Files removed: %s (%s)", len(files), format_size(bytes_removed))
.venv\Lib\site-packages\pip\_internal\commands\check.py:1:import logging
.venv\Lib\site-packages\pip\_internal\commands\check.py:15:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:3:import logging
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:18:from pip._internal.utils.logging import indent_log
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:21:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:113:            logger.error(
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:128:            logger.error(e.args[0])
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:141:            logger.error(e.args[0])
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:211:                with indent_log():
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:220:            with indent_log():
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:228:        with indent_log():
.venv\Lib\site-packages\pip\_internal\commands\configuration.py:275:            logger.exception(
.venv\Lib\site-packages\pip\_internal\commands\debug.py:4:import logging
.venv\Lib\site-packages\pip\_internal\commands\debug.py:22:from pip._internal.utils.logging import indent_log
.venv\Lib\site-packages\pip\_internal\commands\debug.py:25:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\debug.py:29:    logger.info("%s: %s", name, value)
.venv\Lib\site-packages\pip\_internal\commands\debug.py:33:    logger.info("sys.implementation:")
.venv\Lib\site-packages\pip\_internal\commands\debug.py:35:    with indent_log():
.venv\Lib\site-packages\pip\_internal\commands\debug.py:102:        logger.info("%s==%s%s", module_name, actual_version, extra_message)
.venv\Lib\site-packages\pip\_internal\commands\debug.py:106:    logger.info("vendored library versions:")
.venv\Lib\site-packages\pip\_internal\commands\debug.py:109:    with indent_log():
.venv\Lib\site-packages\pip\_internal\commands\debug.py:126:    logger.info(msg)
.venv\Lib\site-packages\pip\_internal\commands\debug.py:134:    with indent_log():
.venv\Lib\site-packages\pip\_internal\commands\debug.py:136:            logger.info(str(tag))
.venv\Lib\site-packages\pip\_internal\commands\debug.py:140:            logger.info(msg)
.venv\Lib\site-packages\pip\_internal\commands\debug.py:175:        logger.warning(
.venv\Lib\site-packages\pip\_internal\commands\download.py:1:import logging
.venv\Lib\site-packages\pip\_internal\commands\download.py:14:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\hash.py:2:import logging
.venv\Lib\site-packages\pip\_internal\commands\hash.py:11:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\index.py:4:import logging
.venv\Lib\site-packages\pip\_internal\commands\index.py:26:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\index.py:66:            logger.error(
.venv\Lib\site-packages\pip\_internal\commands\index.py:78:            logger.error(e.args[0])
.venv\Lib\site-packages\pip\_internal\commands\inspect.py:1:import logging
.venv\Lib\site-packages\pip\_internal\commands\inspect.py:16:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\install.py:48:from pip._internal.utils.logging import getLogger
.venv\Lib\site-packages\pip\_internal\commands\install.py:276:                "to avoid mixing pip logging output with JSON output."
.venv\Lib\site-packages\pip\_internal\commands\install.py:308:        logger.verbose("Using %s", get_pip_version())
.venv\Lib\site-packages\pip\_internal\commands\install.py:517:            logger.error(message, exc_info=show_traceback)
.venv\Lib\site-packages\pip\_internal\commands\install.py:562:                        logger.warning(
.venv\Lib\site-packages\pip\_internal\commands\install.py:569:                        logger.warning(
.venv\Lib\site-packages\pip\_internal\commands\install.py:590:            logger.exception(
.venv\Lib\site-packages\pip\_internal\commands\install.py:644:        logger.critical("\n".join(parts))
.venv\Lib\site-packages\pip\_internal\commands\install.py:690:        logger.debug("Non-user install by explicit request")
.venv\Lib\site-packages\pip\_internal\commands\install.py:704:        logger.debug("User install by explicit request")
.venv\Lib\site-packages\pip\_internal\commands\install.py:712:        logger.debug("Non-user install due to --prefix or --target option")
.venv\Lib\site-packages\pip\_internal\commands\install.py:717:        logger.debug("Non-user install because user site-packages disabled")
.venv\Lib\site-packages\pip\_internal\commands\install.py:723:        logger.debug("Non-user install because site-packages writeable")
.venv\Lib\site-packages\pip\_internal\commands\install.py:726:    logger.info(
.venv\Lib\site-packages\pip\_internal\commands\list.py:4:import logging
.venv\Lib\site-packages\pip\_internal\commands\list.py:39:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\lock.py:17:from pip._internal.utils.logging import getLogger
.venv\Lib\site-packages\pip\_internal\commands\lock.py:93:        logger.verbose("Using %s", get_pip_version())
.venv\Lib\site-packages\pip\_internal\commands\lock.py:95:        logger.warning(
.venv\Lib\site-packages\pip\_internal\commands\lock.py:157:                logger.warning(
.venv\Lib\site-packages\pip\_internal\commands\search.py:3:import logging
.venv\Lib\site-packages\pip\_internal\commands\search.py:22:from pip._internal.utils.logging import indent_log
.venv\Lib\site-packages\pip\_internal\commands\search.py:32:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\search.py:118:        with indent_log():
.venv\Lib\site-packages\pip\_internal\commands\show.py:3:import logging
.venv\Lib\site-packages\pip\_internal\commands\show.py:17:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\show.py:52:            logger.warning("ERROR: Please provide a package name or names.")
.venv\Lib\site-packages\pip\_internal\commands\show.py:100:        logger.warning("Package(s) not found: %s", ", ".join(missing))
.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:1:import logging
.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:22:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:76:                logger.warning(
.venv\Lib\site-packages\pip\_internal\commands\wheel.py:1:import logging
.venv\Lib\site-packages\pip\_internal\commands\wheel.py:20:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\commands\wheel.py:172:                logger.warning(
.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:3:import logging
.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:16:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:92:            logger.warning(
.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:96:            logger.warning(
.venv\Lib\site-packages\pip\_internal\index\collector.py:12:import logging
.venv\Lib\site-packages\pip\_internal\index\collector.py:41:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\index\collector.py:124:    logger.debug("Getting page %s", redact_auth_from_url(url))
.venv\Lib\site-packages\pip\_internal\index\collector.py:162:    logger.debug(
.venv\Lib\site-packages\pip\_internal\index\collector.py:302:        meth = logger.debug
.venv\Lib\site-packages\pip\_internal\index\collector.py:325:        logger.warning(
.venv\Lib\site-packages\pip\_internal\index\collector.py:344:        logger.debug(" file: URL is directory, getting %s", url)
.venv\Lib\site-packages\pip\_internal\index\collector.py:349:        logger.warning(
.venv\Lib\site-packages\pip\_internal\index\collector.py:355:        logger.warning(
.venv\Lib\site-packages\pip\_internal\index\collector.py:370:        _handle_get_simple_fail(link, reason, meth=logger.info)
.venv\Lib\site-packages\pip\_internal\index\collector.py:415:            logger.debug(
.venv\Lib\site-packages\pip\_internal\index\collector.py:474:        if logger.isEnabledFor(logging.DEBUG):
.venv\Lib\site-packages\pip\_internal\index\collector.py:484:            logger.debug("\n".join(lines))
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:8:import logging
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:42:from pip._internal.utils.logging import indent_log
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:79:        logger.debug(
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:88:                logger.verbose(
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:96:            logger.debug(
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:266:        logger.debug("Found link %s, version: %s", link, version)
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:292:        logger.debug(
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:302:    # Collect the non-matches for logging purposes.
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:331:    logger.debug(
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:765:            logger.debug("Skipping link: %s: %s", detail, link)
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:806:        logger.debug(
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:816:        with indent_log():
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:865:        if logger.isEnabledFor(logging.DEBUG) and file_candidates:
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:874:            logger.debug("Local files found: %s", ", ".join(paths))
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:967:            logger.critical(
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:987:                logger.debug(
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:994:                logger.debug(
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:1002:            logger.debug(
.venv\Lib\site-packages\pip\_internal\index\package_finder.py:1010:        logger.debug(
.venv\Lib\site-packages\pip\_internal\index\sources.py:3:import logging
.venv\Lib\site-packages\pip\_internal\index\sources.py:23:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\index\sources.py:253:        logger.warning(msg, location)
.venv\Lib\site-packages\pip\_internal\index\sources.py:283:    logger.warning(
.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:19:import logging
.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:33:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:61:            logger.warning(
.venv\Lib\site-packages\pip\_internal\locations\_sysconfig.py:3:import logging
.venv\Lib\site-packages\pip\_internal\locations\_sysconfig.py:14:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\locations\__init__.py:4:import logging
.venv\Lib\site-packages\pip\_internal\locations\__init__.py:40:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\locations\__init__.py:73:    _MISMATCH_LEVEL = logging.WARNING
.venv\Lib\site-packages\pip\_internal\locations\__init__.py:75:    _MISMATCH_LEVEL = logging.DEBUG
.venv\Lib\site-packages\pip\_internal\locations\__init__.py:187:    logger.log(_MISMATCH_LEVEL, message, key, issue_url, old, new)
.venv\Lib\site-packages\pip\_internal\locations\__init__.py:213:    logger.log(_MISMATCH_LEVEL, "\n".join(parts), user, home, root, prefix)
.venv\Lib\site-packages\pip\_internal\metadata\base.py:7:import logging
.venv\Lib\site-packages\pip\_internal\metadata\base.py:41:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\metadata\base.py:305:            logger.warning(
.venv\Lib\site-packages\pip\_internal\metadata\base.py:433:            logger.warning(message, self.raw_name, e)
.venv\Lib\site-packages\pip\_internal\metadata\base.py:620:                logger.warning(
.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:5:import logging
.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:34:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:232:            logger.warning("No metadata found in %s", displaying_path)
.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:4:import logging
.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:25:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:72:                logger.warning("Skipping %s due to %s", info_location, e.reason)
.venv\Lib\site-packages\pip\_internal\models\link.py:5:import logging
.venv\Lib\site-packages\pip\_internal\models\link.py:32:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\models\link.py:368:                logger.debug(
.venv\Lib\site-packages\pip\_internal\models\link.py:593:        logger.debug("Ignoring egg= fragment in %s", link)
.venv\Lib\site-packages\pip\_internal\models\search_scope.py:2:import logging
.venv\Lib\site-packages\pip\_internal\models\search_scope.py:14:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\models\search_scope.py:58:                    logger.warning(
.venv\Lib\site-packages\pip\_internal\models\search_scope.py:87:                    logger.warning(
.venv\Lib\site-packages\pip\_internal\network\auth.py:9:import logging
.venv\Lib\site-packages\pip\_internal\network\auth.py:26:from pip._internal.utils.logging import getLogger
.venv\Lib\site-packages\pip\_internal\network\auth.py:86:            logger.debug("Getting credentials from keyring for %s", url)
.venv\Lib\site-packages\pip\_internal\network\auth.py:93:            logger.debug("Getting password from keyring for %s", url)
.venv\Lib\site-packages\pip\_internal\network\auth.py:164:    logger.verbose("Keyring provider requested: %s", provider)
.venv\Lib\site-packages\pip\_internal\network\auth.py:172:            logger.verbose("Keyring provider set: import")
.venv\Lib\site-packages\pip\_internal\network\auth.py:182:            logger.warning(msg, exc, exc_info=logger.isEnabledFor(logging.DEBUG))
.venv\Lib\site-packages\pip\_internal\network\auth.py:217:            logger.verbose("Keyring provider set: subprocess with executable %s", cli)
.venv\Lib\site-packages\pip\_internal\network\auth.py:220:    logger.verbose("Keyring provider set: disabled")
.venv\Lib\site-packages\pip\_internal\network\auth.py:276:            logger.debug("Keyring is skipped due to an exception", exc_info=True)
.venv\Lib\site-packages\pip\_internal\network\auth.py:278:            logger.warning(
.venv\Lib\site-packages\pip\_internal\network\auth.py:351:            logger.debug("Found credentials in url for %s", netloc)
.venv\Lib\site-packages\pip\_internal\network\auth.py:361:                logger.debug("Found index url %s", index_url)
.venv\Lib\site-packages\pip\_internal\network\auth.py:367:                logger.debug("Found credentials in index url for %s", netloc)
.venv\Lib\site-packages\pip\_internal\network\auth.py:374:                logger.debug("Found credentials in netrc for %s", netloc)
.venv\Lib\site-packages\pip\_internal\network\auth.py:387:                logger.debug("Found credentials in keyring for %s", netloc)
.venv\Lib\site-packages\pip\_internal\network\auth.py:544:            logger.warning(
.venv\Lib\site-packages\pip\_internal\network\auth.py:559:                logger.info("Saving credentials to keyring")
.venv\Lib\site-packages\pip\_internal\network\auth.py:564:                logger.exception("Failed to save credentials")
.venv\Lib\site-packages\pip\_internal\network\download.py:6:import logging
.venv\Lib\site-packages\pip\_internal\network\download.py:29:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\network\download.py:70:        logger.info("Using cached %s", logged_url)
.venv\Lib\site-packages\pip\_internal\network\download.py:72:        logger.info("Resuming download %s", logged_url)
.venv\Lib\site-packages\pip\_internal\network\download.py:74:        logger.info("Downloading %s", logged_url)
.venv\Lib\site-packages\pip\_internal\network\download.py:76:    if logger.getEffectiveLevel() > logging.INFO:
.venv\Lib\site-packages\pip\_internal\network\download.py:219:            logger.warning("Connection timed out while downloading.")
.venv\Lib\site-packages\pip\_internal\network\download.py:229:            logger.warning(
.venv\Lib\site-packages\pip\_internal\network\download.py:277:            logger.debug(
.venv\Lib\site-packages\pip\_internal\network\download.py:313:        logger.debug(
.venv\Lib\site-packages\pip\_internal\network\download.py:338:            logger.critical(
.venv\Lib\site-packages\pip\_internal\network\session.py:12:import logging
.venv\Lib\site-packages\pip\_internal\network\session.py:57:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\network\session.py:407:            self.add_trusted_host(host, suppress_logging=True)
.venv\Lib\site-packages\pip\_internal\network\session.py:417:        self, host: str, source: str | None = None, suppress_logging: bool = False
.venv\Lib\site-packages\pip\_internal\network\session.py:422:        :param source: An optional source string, for logging where the host
.venv\Lib\site-packages\pip\_internal\network\session.py:425:        if not suppress_logging:
.venv\Lib\site-packages\pip\_internal\network\session.py:429:            logger.info(msg)
.venv\Lib\site-packages\pip\_internal\network\session.py:510:        logger.warning(
.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:3:import logging
.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:17:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:56:            logger.critical(
.venv\Lib\site-packages\pip\_internal\operations\check.py:5:import logging
.venv\Lib\site-packages\pip\_internal\operations\check.py:25:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\operations\check.py:56:            logger.warning("Error parsing dependencies of %s: %s", name, e)
.venv\Lib\site-packages\pip\_internal\operations\freeze.py:4:import logging
.venv\Lib\site-packages\pip\_internal\operations\freeze.py:22:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\operations\freeze.py:105:                        logger.info(
.venv\Lib\site-packages\pip\_internal\operations\freeze.py:111:                        logger.info(
.venv\Lib\site-packages\pip\_internal\operations\freeze.py:121:                                logger.warning(
.venv\Lib\site-packages\pip\_internal\operations\freeze.py:139:                logger.warning(
.venv\Lib\site-packages\pip\_internal\operations\freeze.py:176:        logger.debug(
.venv\Lib\site-packages\pip\_internal\operations\freeze.py:207:        logger.warning(
.venv\Lib\site-packages\pip\_internal\operations\freeze.py:215:        logger.warning("Error when trying to get requirement for VCS system %s", exc)
.venv\Lib\site-packages\pip\_internal\operations\freeze.py:219:    logger.warning("Could not determine repository location of %s", location)
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:48:from pip._internal.utils.logging import indent_log
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:210:    logger.info("File was already downloaded %s", download_path)
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:216:                logger.warning(
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:310:            logger.info(message, information)
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:313:            with indent_log():
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:314:                logger.info("Using cached %s", req.link.filename)
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:376:            logger.debug(
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:381:            logger.debug(
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:400:        logger.verbose(
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:440:            logger.debug(
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:448:        logger.info(
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:457:            logger.debug("%s does not support range requests", url)
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:480:            logger.debug("Downloading link %s to %s", link, filepath)
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:507:        with indent_log():
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:594:                logger.warning(
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:671:            logger.debug(
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:685:            logger.info("Saved %s", download_path)
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:694:        logger.info("Obtaining %s", req)
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:696:        with indent_log():
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:731:        logger.info(
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:734:        with indent_log():
.venv\Lib\site-packages\pip\_internal\operations\prepare.py:736:                logger.debug(
.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:5:import logging
.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:13:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:49:            logger.debug("Initialized build tracking at %s", root)
.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:71:        logger.debug("Created build tracker: %s", self._root)
.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:74:        logger.debug("Entered build tracker: %s", self._root)
.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:114:        logger.debug("Added %s to build tracker %r", req, self._root)
.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:123:        logger.debug("Removed %s from build tracker %r", req, self._root)
.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:129:        logger.debug("Removed build tracker: %r", self._root)
.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:3:import logging
.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:17:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:46:    logger.debug(
.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:3:import logging
.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:10:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:25:        logger.debug("Destination directory: %s", tempd)
.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:36:        logger.error("Failed building wheel for %s", name)
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:3:import logging
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:10:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:25:        logger.debug("Destination directory: %s", tempd)
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:37:                logger.error(
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:45:        logger.error("Failed building editable for %s", name)
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:3:import logging
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:11:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:18:    """Format command information for logging."""
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:24:    elif logger.getEffectiveLevel() > logging.DEBUG:
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:47:        logger.warning(msg)
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:56:        logger.warning(msg)
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:97:        logger.debug("Destination directory: %s", tempd)
.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:108:            logger.error("Failed building wheel for %s", name)
.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:5:import logging
.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:9:from pip._internal.utils.logging import indent_log
.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:13:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:31:    logger.info("Running setup.py develop for %s", name)
.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:42:    with indent_log():
.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:10:import logging
.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:66:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:247:            logger.warning("RECORD line has more than three elements: %s", row)
.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:443:        logging
.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:631:        logger.debug(stdout.getvalue())
.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:662:            logger.warning(msg)
.venv\Lib\site-packages\pip\_internal\req\constructors.py:14:import logging
.venv\Lib\site-packages\pip\_internal\req\constructors.py:42:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\req\constructors.py:185:        logger.debug("Cannot parse '%s' as requirements file", req)
.venv\Lib\site-packages\pip\_internal\req\constructors.py:302:    logger.warning(
.venv\Lib\site-packages\pip\_internal\req\constructors.py:405:        for logging purposes in case of an error.
.venv\Lib\site-packages\pip\_internal\req\req_file.py:9:import logging
.venv\Lib\site-packages\pip\_internal\req\req_file.py:99:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\req\req_file.py:228:        logger.warning(
.venv\Lib\site-packages\pip\_internal\req\req_file.py:610:        logging.warning(
.venv\Lib\site-packages\pip\_internal\req\req_install.py:4:import logging
.venv\Lib\site-packages\pip\_internal\req\req_install.py:65:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\req\req_install.py:190:                logger.warning(
.venv\Lib\site-packages\pip\_internal\req\req_install.py:377:            logger.debug("Creating directory %s", build_dir)
.venv\Lib\site-packages\pip\_internal\req\req_install.py:420:        logger.warning(
.venv\Lib\site-packages\pip\_internal\req\req_install.py:625:            logger.warning(
.venv\Lib\site-packages\pip\_internal\req\req_install.py:631:            logger.debug(
.venv\Lib\site-packages\pip\_internal\req\req_install.py:685:            logger.debug(
.venv\Lib\site-packages\pip\_internal\req\req_install.py:721:            logger.warning("Skipping %s as it is not installed.", self.name)
.venv\Lib\site-packages\pip\_internal\req\req_install.py:723:        logger.info("Found existing installation: %s", dist)
.venv\Lib\site-packages\pip\_internal\req\req_install.py:765:                logger.warning("Deleting %s", display_path(archive_path))
.venv\Lib\site-packages\pip\_internal\req\req_install.py:769:                logger.warning(
.venv\Lib\site-packages\pip\_internal\req\req_install.py:808:        logger.info("Saved %s", display_path(archive_path))
.venv\Lib\site-packages\pip\_internal\req\req_install.py:847:                logger.warning(
.venv\Lib\site-packages\pip\_internal\req\req_install.py:933:        logger.warning(
.venv\Lib\site-packages\pip\_internal\req\req_set.py:1:import logging
.venv\Lib\site-packages\pip\_internal\req\req_set.py:8:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:16:from pip._internal.utils.logging import getLogger, indent_log
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:277:            logger.info("Moving to %s\n from %s", *p)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:281:                logger.debug("Replacing %s from %s", new_path, path)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:288:                logger.error("Failed to restore %s", new_path)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:289:                logger.debug("Exception: %s", ex)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:357:            logger.info(
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:364:        logger.info("Uninstalling %s:", dist_name_version)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:366:        with indent_log():
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:374:                    logger.verbose("Removing file or directory %s", path)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:379:                logger.info("Successfully uninstalled %s", dist_name_version)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:388:            logger.info(msg)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:389:            with indent_log():
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:391:                    logger.info(path)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:412:            logger.error(
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:417:        logger.info("Rolling back uninstall of %s", self._dist.raw_name)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:431:            logger.info(
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:439:            logger.info(
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:452:            logger.info(
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:547:            logger.debug(
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:606:        logger.verbose("Removing pth entries from %s:", self.file)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:610:            logger.warning("Cannot remove entries from nonexistent file %s", self.file)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:625:                logger.verbose("Removing entry: %s", entry)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:634:            logger.error("Cannot roll back changes to %s, none were made", self.file)
.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:636:        logger.debug("Rolling %s back to previous state", self.file)
.venv\Lib\site-packages\pip\_internal\req\__init__.py:4:import logging
.venv\Lib\site-packages\pip\_internal\req\__init__.py:9:from pip._internal.utils.logging import indent_log
.venv\Lib\site-packages\pip\_internal\req\__init__.py:22:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\req\__init__.py:57:        logger.info(
.venv\Lib\site-packages\pip\_internal\req\__init__.py:64:    show_progress = logger.isEnabledFor(logging.INFO) and len(to_install) > 1
.venv\Lib\site-packages\pip\_internal\req\__init__.py:73:    with indent_log():
.venv\Lib\site-packages\pip\_internal\req\__init__.py:78:                logger.info("Attempting uninstall: %s", req_name)
.venv\Lib\site-packages\pip\_internal\req\__init__.py:79:                with indent_log():
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:15:import logging
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:49:from pip._internal.utils.logging import indent_log
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:53:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:88:        logger.warning(
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:98:        logger.debug(
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:217:            logger.info(
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:300:        logger.debug(
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:399:            logger.warning(msg)
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:429:            logger.debug("Using cached wheel link: %s", cache_entry.link)
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:482:                logger.info(
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:533:        with indent_log():
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:548:                    logger.debug(
.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:556:                    logger.warning(
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:3:import logging
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:35:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:280:            logger.debug("Using cached wheel link: %s", cache_entry.link)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:362:        # This is just logging some messages, so we can do it eagerly.
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:521:            logger.warning(
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:5:import logging
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:77:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:213:                    logger.info(
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:234:                    logger.info(
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:479:            logger.info(
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:688:            logger.critical(
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:693:            logger.critical(
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:698:        logger.critical(
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:705:            logger.info(
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:782:        logger.critical(msg)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:808:        logger.info(msg)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\found_candidates.py:13:import logging
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\found_candidates.py:23:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\found_candidates.py:41:            logger.warning(
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:4:from logging import getLogger
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:45:        logger.info("INFO: %s", message.format(package_name=candidate.name))
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:57:        logger.debug(msg)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:64:        logger.info("Reporter.starting()")
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:67:        logger.info("Reporter.starting_round(%r)", index)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:70:        logger.info("Reporter.ending_round(%r, state)", index)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:71:        logger.debug("Reporter.ending_round(%r, %r)", index, state)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:74:        logger.info("Reporter.ending(%r)", state)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:79:        logger.info("Reporter.adding_requirement(%r, %r)", requirement, parent)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:82:        logger.info("Reporter.rejecting_candidate(%r, %r)", criterion, candidate)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:85:        logger.info("Reporter.pinning(%r)", candidate)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:5:import logging
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:38:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:152:                    logger.info(
.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:179:                logger.warning(msg)
.venv\Lib\site-packages\pip\_internal\utils\compat.py:5:import logging
.venv\Lib\site-packages\pip\_internal\utils\compat.py:13:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:7:import logging
.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:25:# Warnings <-> Logging Integration
.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:40:        logger = logging.getLogger("pip._internal.deprecations")
.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:41:        logger.warning(message)
.venv\Lib\site-packages\pip\_internal\utils\logging.py:5:import logging
.venv\Lib\site-packages\pip\_internal\utils\logging.py:6:import logging.handlers
.venv\Lib\site-packages\pip\_internal\utils\logging.py:13:from logging import Filter
.venv\Lib\site-packages\pip\_internal\utils\logging.py:25:from pip._vendor.rich.logging import RichHandler
.venv\Lib\site-packages\pip\_internal\utils\logging.py:40:class BrokenStdoutLoggingError(Exception):
.venv\Lib\site-packages\pip\_internal\utils\logging.py:42:    Raised if BrokenPipeError occurs for the stdout stream while logging.
.venv\Lib\site-packages\pip\_internal\utils\logging.py:60:def indent_log(num: int = 2) -> Generator[None, None, None]:
.venv\Lib\site-packages\pip\_internal\utils\logging.py:78:class IndentingFormatter(logging.Formatter):
.venv\Lib\site-packages\pip\_internal\utils\logging.py:88:        A logging.Formatter that obeys the indent_log() context manager.
.venv\Lib\site-packages\pip\_internal\utils\logging.py:101:        if levelno < logging.WARNING:
.venv\Lib\site-packages\pip\_internal\utils\logging.py:107:        if levelno < logging.ERROR:
.venv\Lib\site-packages\pip\_internal\utils\logging.py:112:    def format(self, record: logging.LogRecord) -> str:
.venv\Lib\site-packages\pip\_internal\utils\logging.py:174:    def emit(self, record: logging.LogRecord) -> None:
.venv\Lib\site-packages\pip\_internal\utils\logging.py:192:                if record.levelno >= logging.ERROR:
.venv\Lib\site-packages\pip\_internal\utils\logging.py:194:                elif record.levelno >= logging.WARNING:
.venv\Lib\site-packages\pip\_internal\utils\logging.py:202:    def handleError(self, record: logging.LogRecord) -> None:
.venv\Lib\site-packages\pip\_internal\utils\logging.py:203:        """Called when logging is unable to log some output."""
.venv\Lib\site-packages\pip\_internal\utils\logging.py:207:        # stdout stream in logging's Handler.emit(), then raise our special
.venv\Lib\site-packages\pip\_internal\utils\logging.py:208:        # exception so we can handle it in main() instead of logging the
.venv\Lib\site-packages\pip\_internal\utils\logging.py:216:            raise BrokenStdoutLoggingError()
.venv\Lib\site-packages\pip\_internal\utils\logging.py:221:class BetterRotatingFileHandler(logging.handlers.RotatingFileHandler):
.venv\Lib\site-packages\pip\_internal\utils\logging.py:231:    def filter(self, record: logging.LogRecord) -> bool:
.venv\Lib\site-packages\pip\_internal\utils\logging.py:237:    A logging Filter that excludes records from a logger (or its children).
.venv\Lib\site-packages\pip\_internal\utils\logging.py:240:    def filter(self, record: logging.LogRecord) -> bool:
.venv\Lib\site-packages\pip\_internal\utils\logging.py:246:def setup_logging(verbosity: int, no_color: bool, user_log_file: str | None) -> int:
.venv\Lib\site-packages\pip\_internal\utils\logging.py:247:    """Configures and sets up all of the logging
.venv\Lib\site-packages\pip\_internal\utils\logging.py:249:    Returns the requested logging level, as its integer value.
.venv\Lib\site-packages\pip\_internal\utils\logging.py:252:    # Determine the level to be logging at.
.venv\Lib\site-packages\pip\_internal\utils\logging.py:254:        level_number = logging.DEBUG
.venv\Lib\site-packages\pip\_internal\utils\logging.py:258:        level_number = logging.WARNING
.venv\Lib\site-packages\pip\_internal\utils\logging.py:260:        level_number = logging.ERROR
.venv\Lib\site-packages\pip\_internal\utils\logging.py:262:        level_number = logging.CRITICAL
.venv\Lib\site-packages\pip\_internal\utils\logging.py:264:        level_number = logging.INFO
.venv\Lib\site-packages\pip\_internal\utils\logging.py:266:    level = logging.getLevelName(level_number)
.venv\Lib\site-packages\pip\_internal\utils\logging.py:278:    # Disable any logging besides WARNING unless we have DEBUG level logging
.venv\Lib\site-packages\pip\_internal\utils\logging.py:284:        "stream": "pip._internal.utils.logging.RichPipStreamHandler",
.venv\Lib\site-packages\pip\_internal\utils\logging.py:285:        "file": "pip._internal.utils.logging.BetterRotatingFileHandler",
.venv\Lib\site-packages\pip\_internal\utils\logging.py:294:    logging.config.dictConfig(
.venv\Lib\site-packages\pip\_internal\utils\logging.py:300:                    "()": "pip._internal.utils.logging.MaxLevelFilter",
.venv\Lib\site-packages\pip\_internal\utils\logging.py:301:                    "level": logging.WARNING,
.venv\Lib\site-packages\pip\_internal\utils\logging.py:304:                    "()": "logging.Filter",
.venv\Lib\site-packages\pip\_internal\utils\logging.py:305:                    "name": subprocess_logger.name,
.venv\Lib\site-packages\pip\_internal\utils\logging.py:308:                    "()": "pip._internal.utils.logging.ExcludeLoggerFilter",
.venv\Lib\site-packages\pip\_internal\utils\logging.py:309:                    "name": subprocess_logger.name,
.venv\Lib\site-packages\pip\_internal\utils\logging.py:338:                # A handler responsible for logging to the console messages
.venv\Lib\site-packages\pip\_internal\utils\logging.py:339:                # from the "subprocessor" logger.
.venv\Lib\site-packages\pip\_internal\utils\misc.py:6:import logging
.venv\Lib\site-packages\pip\_internal\utils\misc.py:58:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\utils\misc.py:367:    logger.info(msg, *args)
.venv\Lib\site-packages\pip\_internal\utils\misc.py:757:    logger.warning(
.venv\Lib\site-packages\pip\_internal\utils\packaging.py:4:import logging
.venv\Lib\site-packages\pip\_internal\utils\packaging.py:9:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:3:import logging
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:14:from pip._internal.utils.logging import VERBOSE, subprocess_logger
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:83:        logging of both stdout and stderr occurs when the subprocess has
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:84:        terminated, else logging occurs as subprocess output is produced.
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:95:    # - If DEBUG logging isn't enabled (e.g. if --verbose logging wasn't
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:100:    #   (e.g. if --verbose logging wasn't enabled).  This way we don't log
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:107:        log_subprocess: Callable[..., None] = subprocess_logger.info
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:108:        used_level = logging.INFO
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:112:        log_subprocess = subprocess_logger.verbose
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:116:    showing_subprocess = subprocess_logger.getEffectiveLevel() <= used_level
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:141:            subprocess_logger.critical(
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:200:                subprocess_logger.error("%s", error, extra={"rich": True})
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:201:                subprocess_logger.verbose(
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:206:                subprocess_logger.verbose(
.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:214:            subprocess_logger.warning(
.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:5:import logging
.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:20:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:176:        logger.debug("Created temporary directory: %s", path)
.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:198:                logger.debug(
.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:204:                logger.debug("%s failed with %s.", func.__qualname__, formatted_exc)
.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:215:                logger.warning(
.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:293:        logger.debug("Created temporary directory: %s", path)
.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:5:import logging
.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:24:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:34:    logger.debug("bz2 module is not available")
.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:42:    logger.debug("lzma module is not available")
.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:174:        logger.warning(
.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:277:                logger.warning(
.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:290:                logger.warning(
.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:330:        logger.critical(
.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:3:import logging
.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:9:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:67:        logger.warning(
.venv\Lib\site-packages\pip\_internal\utils\wheel.py:3:import logging
.venv\Lib\site-packages\pip\_internal\utils\wheel.py:15:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\utils\wheel.py:129:        logger.warning(
.venv\Lib\site-packages\pip\_internal\utils\_log.py:1:"""Customize logging
.venv\Lib\site-packages\pip\_internal\utils\_log.py:3:Defines custom logger class for the `logger.verbose(...)` method.
.venv\Lib\site-packages\pip\_internal\utils\_log.py:5:init_logging() must be called before any other modules that call logging.getLogger.
.venv\Lib\site-packages\pip\_internal\utils\_log.py:8:import logging
.venv\Lib\site-packages\pip\_internal\utils\_log.py:16:class VerboseLogger(logging.Logger):
.venv\Lib\site-packages\pip\_internal\utils\_log.py:23:        return self.log(VERBOSE, msg, *args, **kwargs)
.venv\Lib\site-packages\pip\_internal\utils\_log.py:27:    """logging.getLogger, but ensures our VerboseLogger class is returned"""
.venv\Lib\site-packages\pip\_internal\utils\_log.py:28:    return cast(VerboseLogger, logging.getLogger(name))
.venv\Lib\site-packages\pip\_internal\utils\_log.py:31:def init_logging() -> None:
.venv\Lib\site-packages\pip\_internal\utils\_log.py:37:    logging.setLoggerClass(VerboseLogger)
.venv\Lib\site-packages\pip\_internal\utils\_log.py:38:    logging.addLevelName(VERBOSE, "VERBOSE")
.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:3:import logging
.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:16:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:41:        logger.info(
.venv\Lib\site-packages\pip\_internal\vcs\git.py:3:import logging
.venv\Lib\site-packages\pip\_internal\vcs\git.py:29:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\vcs\git.py:114:            logger.warning("Can't parse git version: %s", version)
.venv\Lib\site-packages\pip\_internal\vcs\git.py:239:            logger.info(
.venv\Lib\site-packages\pip\_internal\vcs\git.py:277:        logger.info("Cloning %s%s to %s", url, rev_display, display_path(dest))
.venv\Lib\site-packages\pip\_internal\vcs\git.py:304:            logger.debug("Rev options %s, branch_name %s", rev_options, branch_name)
.venv\Lib\site-packages\pip\_internal\vcs\git.py:331:        logger.info("Resolved %s to commit %s", url, rev_options.rev)
.venv\Lib\site-packages\pip\_internal\vcs\git.py:555:            logger.debug(
.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:4:import logging
.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:18:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:41:        logger.info(
.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:81:            logger.warning("Could not switch Mercurial repository to %s: %s", url, exc)
.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:175:            logger.debug(
.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:3:import logging
.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:23:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:118:                logger.warning(
.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:283:        logger.info(
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:5:import logging
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:40:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:89:            logger.warning(
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:197:            logger.warning("Cannot register VCS %s", cls.__name__)
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:201:            logger.debug("Registered VCS backend: %s", cls.name)
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:217:            logger.debug("Determine that %s uses VCS: %s", location, vcs_backend.name)
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:514:                logger.debug(
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:521:                    logger.info(
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:529:                    logger.info("Skipping because already up-to-date.")
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:532:            logger.warning(
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:541:            logger.warning(
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:550:        logger.warning(
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:561:            logger.warning("Deleting %s", display_path(dest))
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:568:            logger.warning("Backing up %s to %s", display_path(dest), dest_dir)
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:575:            logger.info(
.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:676:        logger.debug("Checking in %s for %s (%s)...", path, cls.dirname, cls.name)
.venv\Lib\site-packages\pip\_vendor\__init__.py:107:    vendored("rich.logging")
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:12:import logging
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:32:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:120:                logger.debug("Ignoring unknown cache-control directive: %s", directive)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:130:                        logger.debug(
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:135:                    logger.debug(
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:156:            logger.debug("No cache entry available")
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:166:            logger.warning("Cache entry deserialization failed, entry ignored")
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:176:        logger.debug('Looking up "%s" in the cache', cache_url)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:181:            logger.debug('Request header has "no-cache", cache bypassed')
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:185:            logger.debug('Request header has "max_age" as 0, cache bypassed')
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:207:            logger.debug(msg)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:215:                logger.debug("Purging cached response: no date or etag")
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:217:            logger.debug("Ignoring cached response: no date")
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:225:        logger.debug("Current age based on date: %i", current_age)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:240:            logger.debug("Freshness lifetime from max-age: %i", freshness_lifetime)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:248:                logger.debug("Freshness lifetime from expires: %i", freshness_lifetime)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:255:            logger.debug(
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:263:            logger.debug("Adjusted current age from min-fresh: %i", current_age)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:267:            logger.debug('The response is "fresh", returning cached response')
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:268:            logger.debug("%i > %i", freshness_lifetime, current_age)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:273:            logger.debug('The cached response is "stale" with no etag, purging')
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:350:            logger.debug(
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:383:        logger.debug('Updating cache with response from "%s"', cache_url)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:389:            logger.debug('Response header has "no-store"')
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:392:            logger.debug('Request header has "no-store"')
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:394:            logger.debug('Purging existing cache entry to honor "no-store"')
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:405:            logger.debug('Response header has "Vary: *"')
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:418:            logger.debug(f"etag object cached for {expires_time} seconds")
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:419:            logger.debug("Caching due to etag")
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:425:            logger.debug("Caching permanent redirect")
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:438:                logger.debug("Caching b/c date exists and max-age > 0")
.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:458:                    logger.debug(
.venv\Lib\site-packages\pip\_vendor\cachecontrol\filewrapper.py:67:        # TODO: Add some logging here...
.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:6:import logging
.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:22:def setup_logging() -> None:
.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:23:    logger.setLevel(logging.DEBUG)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:24:    handler = logging.StreamHandler()
.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:25:    logger.addHandler(handler)
.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:53:    # Turn on logging
.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:54:    setup_logging()
.venv\Lib\site-packages\pip\_vendor\cachecontrol\__init__.py:27:import logging
.venv\Lib\site-packages\pip\_vendor\cachecontrol\__init__.py:29:logging.getLogger(__name__).addHandler(logging.NullHandler())
.venv\Lib\site-packages\pip\_vendor\distlib\compat.py:911:    from logging.config import BaseConfigurator, valid_ident
.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:11:import logging
.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:21:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:239:            logger.debug('_find failed: %r %r', path, self.loader.prefix)
.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:241:            logger.debug('_find worked: %r %r', path, self.loader.prefix)
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:8:import logging
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:20:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:132:                logger.warning('Failed to open %s', executable)
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:290:                    logger.warning('Failed to write executable - trying to '
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:297:                    logger.debug('Able to replace executable using '
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:307:                    logger.warning('Skipping existing file %s', outname)
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:347:            logger.debug('not copying %s (up-to-date)', script)
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:362:                logger.warning('%s is an empty file (skipping)', script)
.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:378:            logger.info('copying and adjusting %s -> %s', script, self.target_dir)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:12:import logging
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:38:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:525:        logger.info('Copying %s to %s', infile, outfile)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:541:        logger.info('Copying stream %s to %s', instream, outfile)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:571:                    logger.info("changing mode of %s", f)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:574:                    logger.info("changing mode of %s to %o", f, mode)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:585:            logger.info('Creating %s' % path)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:593:        logger.info('Byte-compiling %s to %s', path, dpath)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:613:                logger.debug('Removing directory tree at %s', path)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:624:                logger.debug('Removing %s %s', s, path)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:778:            logger.warning('Directory exists but is not writable: %s', result)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:784:            logger.warning('Unable to create %s', result, exc_info=True)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:788:        logger.warning('Default location unusable, using %s', result)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:911:                logger.warning('undeclared extra: %s' % unwanted)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:916:                logger.warning('undeclared extra: %s' % r)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:936:            logger.debug('Unexpected response for JSON request: %s', ct)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:943:        logger.exception('Failed to get external data for %s: %s', url, e)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:981:            logger.warning('Directory \'%s\' is not private', base)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1070:                logger.exception('Exception during event publication')
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1073:        logger.debug('publish %s: args = %s, kwargs = %s, result = %s', event, args, kwargs, result)
.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1485:                    logger.debug('Host verified: %s', self.host)
.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:7:import logging
.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:17:    from logging import NullHandler
.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:20:    class NullHandler(logging.Handler):
.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:32:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:33:logger.addHandler(NullHandler())
.venv\Lib\site-packages\pip\_vendor\distro\distro.py:33:import logging
.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1363:    logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1364:    logger.setLevel(logging.DEBUG)
.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1365:    logger.addHandler(logging.StreamHandler(sys.stdout))
.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1393:        logger.info(json.dumps(dist.info(), indent=4, sort_keys=True))
.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1395:        logger.info("Name: %s", dist.name(pretty=True))
.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1397:        logger.info("Version: %s", distribution_version)
.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1399:        logger.info("Codename: %s", distribution_codename)
.venv\Lib\site-packages\pip\_vendor\idna\intranges.py:5:in the original list?" in time O(log(# runs)).
.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:7:import logging
.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:115:        logger.debug(
.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:142:# Set default logging handler to avoid "No handler found" warnings.
.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:143:import logging
.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:144:from logging import NullHandler
.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:176:logging.getLogger(__name__).addHandler(NullHandler())
.venv\Lib\site-packages\pip\_vendor\rich\console.py:612:        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.
.venv\Lib\site-packages\pip\_vendor\rich\console.py:613:        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.
.venv\Lib\site-packages\pip\_vendor\rich\console.py:1103:        """A context manager to *capture* the result of print() or log() in a string,
.venv\Lib\site-packages\pip\_vendor\rich\console.py:1932:    def log(
.venv\Lib\site-packages\pip\_vendor\rich\console.py:1956:            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``
.venv\Lib\site-packages\pip\_vendor\rich\console.py:2630:    console.log(
.venv\Lib\site-packages\pip\_vendor\rich\console.py:2645:    console.log("Hello, World!", "{'a': 1}", repr(console))
.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:53:    "logging.keyword": Style(bold=True, color="yellow"),
.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:54:    "logging.level.notset": Style(dim=True),
.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:55:    "logging.level.debug": Style(color="green"),
.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:56:    "logging.level.info": Style(color="blue"),
.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:57:    "logging.level.warning": Style(color="yellow"),
.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:58:    "logging.level.error": Style(color="red", bold=True),
.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:59:    "logging.level.critical": Style(color="red", bold=True, reverse=True),
.venv\Lib\site-packages\pip\_vendor\rich\diagnose.py:30:        "VSCODE_VERBOSE_LOGGING",
.venv\Lib\site-packages\pip\_vendor\rich\live.py:378:                    console.log(next(examples))
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:1:import logging
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:3:from logging import Handler, LogRecord
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:19:    """A logging handler that renders output with Rich. The time / level / message and file are displayed in columns.
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:23:        Be careful when enabling console markup in log messages if you have configured logging for libraries not
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:27:        level (Union[int, str], optional): Log level. Defaults to logging.NOTSET.
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:67:        level: Union[int, str] = logging.NOTSET,
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:128:            level_name.ljust(8), f"logging.level.{level_name.lower()}"
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:133:        """Invoked by logging."""
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:186:            record (LogRecord): logging Record.
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:203:            message_text.highlight_words(self.keywords, "logging.keyword")
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:217:            record (LogRecord): logging Record.
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:247:    logging.basicConfig(
.venv\Lib\site-packages\pip\_vendor\rich\logging.py:253:    log = logging.getLogger("rich")
.venv\Lib\site-packages\pip\_vendor\rich\progress.py:1715:                progress.log(next(examples))
.venv\Lib\site-packages\pip\_vendor\rich\segment.py:4:from logging import getLogger
.venv\Lib\site-packages\pip\_vendor\rich\status.py:117:        console.log("Importing advanced AI")
.venv\Lib\site-packages\pip\_vendor\rich\status.py:119:        console.log("Advanced Covid AI Ready")
.venv\Lib\site-packages\pip\_vendor\rich\status.py:123:        console.log("Found 10,000,000,000 copies of Covid32.exe")
.venv\Lib\site-packages\pip\_vendor\rich\_log_render.py:94:    c.log("[on blue]hello", justify="right")
.venv\Lib\site-packages\pip\_vendor\rich\__main__.py:204:        """Progress bars, columns, styled logging handler, tracebacks, etc...""",
.venv\Lib\site-packages\pip\_vendor\urllib3\connection.py:4:import logging
.venv\Lib\site-packages\pip\_vendor\urllib3\connection.py:65:log = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\urllib3\connectionpool.py:4:import logging
.venv\Lib\site-packages\pip\_vendor\urllib3\connectionpool.py:63:log = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\urllib3\poolmanager.py:5:import logging
.venv\Lib\site-packages\pip\_vendor\urllib3\poolmanager.py:26:log = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\urllib3\response.py:4:import logging
.venv\Lib\site-packages\pip\_vendor\urllib3\response.py:32:log = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:6:# Set default logging handler to avoid "No handler found" warnings.
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:7:import logging
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:9:from logging import NullHandler
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:60:logging.getLogger(__name__).addHandler(NullHandler())
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:63:def add_stderr_logger(level=logging.DEBUG):
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:65:    Helper for quickly adding a StreamHandler to the logger. Useful for
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:72:    logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:73:    handler = logging.StreamHandler()
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:74:    handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(message)s"))
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:75:    logger.addHandler(handler)
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:76:    logger.setLevel(level)
.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:77:    logger.debug("Added a stderr logging handler to logger: %s", __name__)
.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\appengine.py:44:import logging
.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\appengine.py:68:log = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\ntlmpool.py:9:from logging import getLogger
.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\pyopenssl.py:73:import logging
.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\pyopenssl.py:127:log = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\urllib3\util\retry.py:4:import logging
.venv\Lib\site-packages\pip\_vendor\urllib3\util\retry.py:22:log = logging.getLogger(__name__)
.venv\Lib\site-packages\pip\_vendor\urllib3\util\ssl_.py:354:    # Enable logging of TLS session keys via defacto standard environment variable
.venv\Lib\site-packages\pip_api\_vendor\packaging\tags.py:5:import logging
.venv\Lib\site-packages\pip_api\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_api\_vendor\packaging\tags.py:115:        logger.debug(
.venv\Lib\site-packages\pip_audit\_audit.py:6:import logging
.venv\Lib\site-packages\pip_audit\_audit.py:13:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_audit\_audit.py:64:            logger.info(f"Dry run: would have audited {len(list(specs))} packages")
.venv\Lib\site-packages\pip_audit\_cache.py:7:import logging
.venv\Lib\site-packages\pip_audit\_cache.py:23:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_audit\_cache.py:69:            logger.warning(
.venv\Lib\site-packages\pip_audit\_cache.py:94:                logger.warning(
.venv\Lib\site-packages\pip_audit\_cache.py:105:                logger.warning(
.venv\Lib\site-packages\pip_audit\_cache.py:139:                logger.warning(
.venv\Lib\site-packages\pip_audit\_cli.py:9:import logging
.venv\Lib\site-packages\pip_audit\_cli.py:39:logging.basicConfig()
.venv\Lib\site-packages\pip_audit\_cli.py:40:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_audit\_cli.py:43:# to avoid overly verbose logging in third-party code by default.
.venv\Lib\site-packages\pip_audit\_cli.py:44:package_logger = logging.getLogger("pip_audit")
.venv\Lib\site-packages\pip_audit\_cli.py:45:package_logger.setLevel(os.environ.get("PIP_AUDIT_LOGLEVEL", "INFO").upper())
.venv\Lib\site-packages\pip_audit\_cli.py:166:    logger.error(msg)
.venv\Lib\site-packages\pip_audit\_cli.py:270:        help="run with additional debug logging; supply multiple times to increase verbosity",
.venv\Lib\site-packages\pip_audit\_cli.py:343:    # Configure logging upfront, so that we don't miss anything.
.venv\Lib\site-packages\pip_audit\_cli.py:345:        package_logger.setLevel("DEBUG")
.venv\Lib\site-packages\pip_audit\_cli.py:347:        logging.getLogger().setLevel("DEBUG")
.venv\Lib\site-packages\pip_audit\_cli.py:349:    logger.debug(f"parsed arguments: {args}")
.venv\Lib\site-packages\pip_audit\_cli.py:395:        logger.warning("The --no-deps flag is redundant when used with --require-hashes")
.venv\Lib\site-packages\pip_audit\_cli.py:398:        logger.warning("The --no-deps flag is redundant when used with --disable-pip")
.venv\Lib\site-packages\pip_audit\_cli.py:401:        logger.warning(
.venv\Lib\site-packages\pip_audit\_cli.py:407:        logger.warning(
.venv\Lib\site-packages\pip_audit\_cli.py:411:        logger.warning(
.venv\Lib\site-packages\pip_audit\_cli.py:473:                    logger.debug(f"Auditing {spec.name} ({spec.version})")
.venv\Lib\site-packages\pip_audit\_cli.py:488:            logger.error(str(e))
.venv\Lib\site-packages\pip_audit\_cli.py:504:                        logger.info(
.venv\Lib\site-packages\pip_audit\_cli.py:510:                        logger.info(
.venv\Lib\site-packages\pip_audit\_cli.py:523:                        logger.debug(skip_reason)
.venv\Lib\site-packages\pip_audit\_fix.py:6:import logging
.venv\Lib\site-packages\pip_audit\_fix.py:20:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_audit\_fix.py:84:            logger.debug(skip_reason)
.venv\Lib\site-packages\pip_audit\_state.py:7:import logging
.venv\Lib\site-packages\pip_audit\_state.py:9:from logging.handlers import MemoryHandler
.venv\Lib\site-packages\pip_audit\_state.py:174:            # Limit the logging output to the 10 most recent lines.
.venv\Lib\site-packages\pip_audit\_state.py:215:        self._spinner = StatusLog(
.venv\Lib\site-packages\pip_audit\_state.py:222:            0, flushLevel=logging.ERROR, target=None, flushOnClose=False
.venv\Lib\site-packages\pip_audit\_state.py:224:        self.prev_handlers: list[logging.Handler] = []
.venv\Lib\site-packages\pip_audit\_state.py:235:        Redirect logging to an in-memory log handler so that it doesn't get mixed in with the
.venv\Lib\site-packages\pip_audit\_state.py:243:        root_logger = logging.root
.venv\Lib\site-packages\pip_audit\_state.py:244:        for handler in root_logger.handlers:
.venv\Lib\site-packages\pip_audit\_state.py:247:            root_logger.removeHandler(handler)
.venv\Lib\site-packages\pip_audit\_state.py:249:        # Redirect logging to our in-memory handler that will buffer the log lines
.venv\Lib\site-packages\pip_audit\_state.py:250:        root_logger.addHandler(self.log_handler)
.venv\Lib\site-packages\pip_audit\_state.py:263:        root_logger = logging.root
.venv\Lib\site-packages\pip_audit\_state.py:264:        stream_handler = logging.StreamHandler()
.venv\Lib\site-packages\pip_audit\_state.py:265:        stream_handler.setFormatter(logging.Formatter(logging.BASIC_FORMAT))
.venv\Lib\site-packages\pip_audit\_state.py:270:        root_logger.removeHandler(self.log_handler)
.venv\Lib\site-packages\pip_audit\_state.py:272:            root_logger.addHandler(handler)
.venv\Lib\site-packages\pip_audit\_virtual_env.py:8:import logging
.venv\Lib\site-packages\pip_audit\_virtual_env.py:19:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_audit\_virtual_env.py:134:                logger.error(f"internal pip failure: {cpe.stderr}")
.venv\Lib\site-packages\pip_audit\_dependency_source\pip.py:6:import logging
.venv\Lib\site-packages\pip_audit\_dependency_source\pip.py:21:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_audit\_dependency_source\pip.py:86:            logger.warning(
.venv\Lib\site-packages\pip_audit\_dependency_source\pip.py:95:            logger.warning(
.venv\Lib\site-packages\pip_audit\_dependency_source\pip.py:128:                        logger.debug(skip_reason)
.venv\Lib\site-packages\pip_audit\_dependency_source\pyproject.py:6:import logging
.venv\Lib\site-packages\pip_audit\_dependency_source\pyproject.py:22:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_audit\_dependency_source\pyproject.py:70:                logger.warning(
.venv\Lib\site-packages\pip_audit\_dependency_source\pyproject.py:118:                logger.warning(
.venv\Lib\site-packages\pip_audit\_dependency_source\requirement.py:7:import logging
.venv\Lib\site-packages\pip_audit\_dependency_source\requirement.py:33:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_audit\_dependency_source\requirement.py:207:                logger.warning(
.venv\Lib\site-packages\pip_audit\_dependency_source\requirement.py:264:                logger.warning(
.venv\Lib\site-packages\pip_audit\_dependency_source\requirement.py:284:                logger.warning(f"encountered an exception during file recovery: {e}")
.venv\Lib\site-packages\pip_audit\_format\cyclonedx.py:7:import logging
.venv\Lib\site-packages\pip_audit\_format\cyclonedx.py:20:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_audit\_format\cyclonedx.py:90:            logger.warning("--fix output is unsupported by CycloneDX formats")
.venv\Lib\site-packages\pip_audit\_service\osv.py:7:import logging
.venv\Lib\site-packages\pip_audit\_service\osv.py:24:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_audit\_service\osv.py:90:                logger.warning(f"Unsupported OSV schema version: {schema_version}")
.venv\Lib\site-packages\pip_audit\_service\osv.py:98:                logger.debug(f"OSV vuln entry '{id}' marked as withdrawn at {withdrawn_at}")
.venv\Lib\site-packages\pip_audit\_service\osv.py:119:                logger.warning(f"OSV vuln entry '{id}' is missing 'affected' list")
.venv\Lib\site-packages\pip_audit\_service\pypi.py:7:import logging
.venv\Lib\site-packages\pip_audit\_service\pypi.py:25:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pip_audit\_service\pypi.py:81:                logger.debug(skip_reason)
.venv\Lib\site-packages\pip_audit\_service\pypi.py:99:                logger.debug(f"PyPI vuln entry '{id}' marked as withdrawn at {withdrawn_at}")
.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:1235:    `side_effect` can be used for logging, updating progress bars, or anything
.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3475:    # "Reservoir-Sampling Algorithms of Time Complexity O(n(1+log(N/n)))".
.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3482:    W = exp(log(random()) / k)
.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3486:    next_index = k + floor(log(random()) / log(1 - W))
.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3493:            W *= exp(log(random()) / k)
.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3494:            next_index += floor(log(random()) / log(1 - W)) + 1
.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3504:    weight_keys = (log(random()) / weight for weight in weights)
.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3514:    weights_to_skip = log(random()) / smallest_weight_key
.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3523:            weight_key = log(r_2) / weight
.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3526:            weights_to_skip = log(random()) / smallest_weight_key
.venv\Lib\site-packages\pkg_resources\_vendor\packaging\tags.py:5:import logging
.venv\Lib\site-packages\pkg_resources\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pkg_resources\_vendor\packaging\tags.py:115:        logger.debug(
.venv\Lib\site-packages\pre_commit\clientlib.py:4:import logging
.venv\Lib\site-packages\pre_commit\clientlib.py:20:logger = logging.getLogger('pre_commit')
.venv\Lib\site-packages\pre_commit\clientlib.py:165:                logger.warning(
.venv\Lib\site-packages\pre_commit\clientlib.py:181:            logger.warning(
.venv\Lib\site-packages\pre_commit\clientlib.py:188:                logger.warning(
.venv\Lib\site-packages\pre_commit\clientlib.py:200:            logger.warning(
.venv\Lib\site-packages\pre_commit\clientlib.py:206:                logger.warning(
.venv\Lib\site-packages\pre_commit\clientlib.py:226:    logger.warning(f'Unexpected key(s) present at root: {", ".join(extra)}')
.venv\Lib\site-packages\pre_commit\clientlib.py:234:    logger.warning(
.venv\Lib\site-packages\pre_commit\git.py:3:import logging
.venv\Lib\site-packages\pre_commit\git.py:13:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pre_commit\git.py:115:    logger.info('Checking merge-conflict files only.')
.venv\Lib\site-packages\pre_commit\git.py:222:            logger.warn(
.venv\Lib\site-packages\pre_commit\hook.py:3:import logging
.venv\Lib\site-packages\pre_commit\hook.py:10:logger = logging.getLogger('pre_commit')
.venv\Lib\site-packages\pre_commit\hook.py:53:            logger.warning(
.venv\Lib\site-packages\pre_commit\logging_handler.py:4:import logging
.venv\Lib\site-packages\pre_commit\logging_handler.py:10:logger = logging.getLogger('pre_commit')
.venv\Lib\site-packages\pre_commit\logging_handler.py:20:class LoggingHandler(logging.Handler):
.venv\Lib\site-packages\pre_commit\logging_handler.py:25:    def emit(self, record: logging.LogRecord) -> None:
.venv\Lib\site-packages\pre_commit\logging_handler.py:35:def logging_handler(use_color: bool) -> Generator[None, None, None]:
.venv\Lib\site-packages\pre_commit\logging_handler.py:36:    handler = LoggingHandler(use_color)
.venv\Lib\site-packages\pre_commit\logging_handler.py:37:    logger.addHandler(handler)
.venv\Lib\site-packages\pre_commit\logging_handler.py:38:    logger.setLevel(logging.INFO)
.venv\Lib\site-packages\pre_commit\logging_handler.py:42:        logger.removeHandler(handler)
.venv\Lib\site-packages\pre_commit\main.py:4:import logging
.venv\Lib\site-packages\pre_commit\main.py:28:from pre_commit.logging_handler import logging_handler
.venv\Lib\site-packages\pre_commit\main.py:32:logger = logging.getLogger('pre_commit')
.venv\Lib\site-packages\pre_commit\main.py:364:    with error_handler(), logging_handler(args.color):
.venv\Lib\site-packages\pre_commit\repository.py:4:import logging
.venv\Lib\site-packages\pre_commit\repository.py:23:logger = logging.getLogger('pre_commit')
.venv\Lib\site-packages\pre_commit\repository.py:67:    logger.info(f'Installing environment for {hook.src}.')
.venv\Lib\site-packages\pre_commit\repository.py:68:    logger.info('Once installed this environment will be reused.')
.venv\Lib\site-packages\pre_commit\repository.py:69:    logger.info('This may take a few minutes...')
.venv\Lib\site-packages\pre_commit\repository.py:72:        logger.warning(
.venv\Lib\site-packages\pre_commit\repository.py:137:            logger.error(
.venv\Lib\site-packages\pre_commit\repository.py:145:            logger.error(
.venv\Lib\site-packages\pre_commit\repository.py:191:            logger.error(
.venv\Lib\site-packages\pre_commit\staged_files_only.py:4:import logging
.venv\Lib\site-packages\pre_commit\staged_files_only.py:17:logger = logging.getLogger('pre_commit')
.venv\Lib\site-packages\pre_commit\staged_files_only.py:39:        logger.warning('Unstaged intent-to-add files detected.')
.venv\Lib\site-packages\pre_commit\staged_files_only.py:65:        logger.warning('Unstaged files detected.')
.venv\Lib\site-packages\pre_commit\staged_files_only.py:66:        logger.info(f'Stashing unstaged files to {patch_filename}.')
.venv\Lib\site-packages\pre_commit\staged_files_only.py:83:                logger.warning(
.venv\Lib\site-packages\pre_commit\staged_files_only.py:93:            logger.info(f'Restored changes from {patch_filename}.')
.venv\Lib\site-packages\pre_commit\store.py:4:import logging
.venv\Lib\site-packages\pre_commit\store.py:22:logger = logging.getLogger('pre_commit')
.venv\Lib\site-packages\pre_commit\store.py:106:            logger.info('Locking pre-commit directory')
.venv\Lib\site-packages\pre_commit\store.py:159:            logger.info(f'Initializing environment for {repo}.')
.venv\Lib\site-packages\pre_commit\commands\init_templatedir.py:3:import logging
.venv\Lib\site-packages\pre_commit\commands\init_templatedir.py:11:logger = logging.getLogger('pre_commit')
.venv\Lib\site-packages\pre_commit\commands\init_templatedir.py:37:        logger.warning('`init.templateDir` not set to the target directory')
.venv\Lib\site-packages\pre_commit\commands\init_templatedir.py:38:        logger.warning(f'maybe `git config --global init.templateDir {dest}`?')
.venv\Lib\site-packages\pre_commit\commands\install_uninstall.py:3:import logging
.venv\Lib\site-packages\pre_commit\commands\install_uninstall.py:20:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pre_commit\commands\install_uninstall.py:124:        logger.error(
.venv\Lib\site-packages\pre_commit\commands\run.py:6:import logging
.venv\Lib\site-packages\pre_commit\commands\run.py:33:logger = logging.getLogger('pre_commit')
.venv\Lib\site-packages\pre_commit\commands\run.py:347:        logger.error('Unmerged files.  Resolve before committing.')
.venv\Lib\site-packages\pre_commit\commands\run.py:350:        logger.error('Specify both --from-ref and --to-ref.')
.venv\Lib\site-packages\pre_commit\commands\run.py:353:        logger.error(
.venv\Lib\site-packages\pre_commit\commands\run.py:362:        logger.error(
.venv\Lib\site-packages\pre_commit\commands\try_repo.py:4:import logging
.venv\Lib\site-packages\pre_commit\commands\try_repo.py:18:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\pre_commit\commands\try_repo.py:29:        logger.warning('Creating temporary repo with uncommitted changes...')
.venv\Lib\site-packages\psutil\tests\__init__.py:1114:    def _log(self, msg):
.venv\Lib\site-packages\psutil\tests\__init__.py:1164:                    self._log(msg)
.venv\Lib\site-packages\psutil\tests\__init__.py:1169:                self._log(msg)
.venv\Lib\site-packages\pydantic\types.py:1577:    """A generic base class used for defining a field with sensitive information that you do not want to be visible in logging or tracebacks.
.venv\Lib\site-packages\pydantic\types.py:1807:    """A string used for storing sensitive information that you do not want to be visible in logging or tracebacks.
.venv\Lib\site-packages\pydantic\types.py:1874:    """A bytes used for storing sensitive information that you do not want to be visible in logging or tracebacks.
.venv\Lib\site-packages\pygments\lexers\apdlexer.py:397:               "LOG()", "LOG10()", "SQRT()", "NINT()", "MOD()",
.venv\Lib\site-packages\pygments\lexers\business.py:190:             r'LENGTH|LOCALE-(?:DATE|TIME(?:-FROM-SECONDS)?)|LOG(?:10)?|'
.venv\Lib\site-packages\pygments\lexers\haskell.py:206:                  'default', 'logging', 'dynamic', 'name', 'error_handlers', 'language')
.venv\Lib\site-packages\pygments\lexers\igor.py:408:        'zeromq_server_send', 'zeromq_set', 'zeromq_set_logging_template', 'zeromq_stop',
.venv\Lib\site-packages\pygments\lexers\installers.py:79:             r'LoadLanguageFile|LockWindow|Log(?:Set|Text)|MessageBox|'
.venv\Lib\site-packages\pygments\lexers\scripting.py:651:    lsl_functions_builtin = r'\b(?:ll(?:ReturnObjectsBy(?:ID|Owner)|Json(?:2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(?:Mag|Norm|Dist)|Rot(?:Between|2(?:Euler|Fwd|Left|Up))|(?:Euler|Axes)2Rot|Whisper|(?:Region|Owner)?Say|Shout|Listen(?:Control|Remove)?|Sensor(?:Repeat|Remove)?|Detected(?:Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|(?:[GS]et)(?:AnimationOverride|Mem
oryLimit|PrimMediaParams|ParcelMusicURL|Object(?:Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(?:Scale|Offset|Rotate)Texture|(?:Rot)?Target(?:Remove)?|(?:Stop)?MoveToTarget|Apply(?:Rotational)?Impulse|Set(?:KeyframedMotion|ContentType|RegionPos|(?:Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(?:Queueing|Radius)|Vehicle(?:Type|(?:Float|Vector|Rotation)Param)|(?:Touch|Sit)?Text|Camer
a(?:Eye|At)Offset|PrimitiveParams|ClickAction|Link(?:Alpha|Color|PrimitiveParams(?:Fast)?|Texture(?:Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get(?:(?:Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(?:PrimitiveParams|Number(?:OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(?:Details|PermMask|PrimCount)|Parcel(?:MaxPrims|Details|Prim(?:Count|Owners))|Attached|(?:SPMax|Free|Used)Memory|Region(?:Name|TimeDilation|FPS|Corner|Age
ntCount)|Root(?:Position|Rotation)|UnixTime|(?:Parcel|Region)Flags|(?:Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(?:Prims|NotecardLines|Sides)|Animation(?:List)?|(?:Camera|Local)(?:Pos|Rot)|Vel|Accel|Omega|Time(?:stamp|OfDay)|(?:Object|CenterOf)?Mass|MassMKS|Energy|Owner|(?:Owner)?Key|SunDirection|Texture(?:Offset|Scale|Rot)|Inventory(?:Number|Name|Key|Type|Creator|PermMask)|Permissions(?:Key)?|StartParameter|List(?:Length|EntryType)|Date|Agent(?:Size|Info|Langu
age|List)|LandOwnerAt|NotecardLine|Script(?:Name|State))|(?:Get|Reset|GetAndReset)Time|PlaySound(?:Slave)?|LoopSound(?:Master|Slave)?|(?:Trigger|Stop|Preload)Sound|(?:(?:Get|Delete)Sub|Insert)String|To(?:Upper|Lower)|Give(?:InventoryList|Money)|RezObject|(?:Stop)?LookAt|Sleep|CollisionFilter|(?:Take|Release)Controls|DetachFromAvatar|AttachToAvatar(?:Temp)?|InstantMessage|(?:GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(?:Length|Trim)|(?:Start|Stop)Animation|TargetOmega|RequestPermissio
ns|(?:Create|Break)Link|BreakAllLinks|(?:Give|Remove)Inventory|Water|PassTouches|Request(?:Agent|Inventory)Data|TeleportAgent(?:Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(?:Axis|Angle)|A(?:cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(?:CSV|Integer|Json|Float|String|Key|Vector|Rot|List(?:Strided)?)|DeleteSubList|List(?:Statistics|Sort|Randomize|(?:Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2
Name|TriggerSoundLimited|EjectFromLand|(?:CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(?:Slope|Normal|Contour)|GroundRepel|(?:Set|Remove)VehicleFlags|(?:AvatarOn)?(?:Link)?SitTarget|Script(?:Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(?:Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(?:Integer|String)ToBase64|XorBase64|Log(?:10)?|Base64To(?:String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(?:Load|Release|(?:
E|Une)scape)URL|ParcelMedia(?:CommandList|Query)|ModPow|MapDestination|(?:RemoveFrom|AddTo|Reset)Land(?:Pass|Ban)List|(?:Set|Clear)CameraParams|HTTP(?:Request|Response)|TextBox|DetectedTouch(?:UV|Face|Pos|(?:N|Bin)ormal|ST)|(?:MD5|SHA1|DumpList2)String|Request(?:Secure)?URL|Clear(?:Prim|Link)Media|(?:Link)?ParticleSystem|(?:Get|Request)(?:Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(?:Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|Navig
ateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\b'
.venv\Lib\site-packages\pygments\lexers\sql.py:150:            # TODO: better logging
.venv\Lib\site-packages\pylint\checkers\logging.py:5:"""Checker for use of Python logging."""
.venv\Lib\site-packages\pylint\checkers\logging.py:28:            "Use %s formatting in logging functions",
.venv\Lib\site-packages\pylint\checkers\logging.py:29:            "logging-not-lazy",
.venv\Lib\site-packages\pylint\checkers\logging.py:30:            "Used when a logging statement has a call form of "
.venv\Lib\site-packages\pylint\checkers\logging.py:31:            '"logging.<logging method>(format_string % (format_args...))". '
.venv\Lib\site-packages\pylint\checkers\logging.py:34:            "the logging function by passing the parameters as arguments. "
.venv\Lib\site-packages\pylint\checkers\logging.py:35:            "If logging-fstring-interpolation is disabled then "
.venv\Lib\site-packages\pylint\checkers\logging.py:37:            "If logging-format-interpolation is disabled then "
.venv\Lib\site-packages\pylint\checkers\logging.py:41:            "Use %s formatting in logging functions",
.venv\Lib\site-packages\pylint\checkers\logging.py:42:            "logging-format-interpolation",
.venv\Lib\site-packages\pylint\checkers\logging.py:43:            "Used when a logging statement has a call form of "
.venv\Lib\site-packages\pylint\checkers\logging.py:44:            '"logging.<logging method>(format_string.format(format_args...))". '
.venv\Lib\site-packages\pylint\checkers\logging.py:47:            "the logging function by passing the parameters as arguments. "
.venv\Lib\site-packages\pylint\checkers\logging.py:48:            "If logging-fstring-interpolation is disabled then "
.venv\Lib\site-packages\pylint\checkers\logging.py:50:            "If logging-not-lazy is disabled then "
.venv\Lib\site-packages\pylint\checkers\logging.py:54:            "Use %s formatting in logging functions",
.venv\Lib\site-packages\pylint\checkers\logging.py:55:            "logging-fstring-interpolation",
.venv\Lib\site-packages\pylint\checkers\logging.py:56:            "Used when a logging statement has a call form of "
.venv\Lib\site-packages\pylint\checkers\logging.py:57:            '"logging.<logging method>(f"...")".'
.venv\Lib\site-packages\pylint\checkers\logging.py:60:            "the logging function by passing the parameters as arguments. "
.venv\Lib\site-packages\pylint\checkers\logging.py:61:            "If logging-format-interpolation is disabled then "
.venv\Lib\site-packages\pylint\checkers\logging.py:63:            "If logging-not-lazy is disabled then "
.venv\Lib\site-packages\pylint\checkers\logging.py:67:            "Unsupported logging format character %r (%#02x) at index %d",
.venv\Lib\site-packages\pylint\checkers\logging.py:68:            "logging-unsupported-format",
.venv\Lib\site-packages\pylint\checkers\logging.py:69:            "Used when an unsupported format character is used in a logging "
.venv\Lib\site-packages\pylint\checkers\logging.py:73:            "Logging format string ends in middle of conversion specifier",
.venv\Lib\site-packages\pylint\checkers\logging.py:74:            "logging-format-truncated",
.venv\Lib\site-packages\pylint\checkers\logging.py:75:            "Used when a logging statement format string terminates before "
.venv\Lib\site-packages\pylint\checkers\logging.py:79:            "Too many arguments for logging format string",
.venv\Lib\site-packages\pylint\checkers\logging.py:80:            "logging-too-many-args",
.venv\Lib\site-packages\pylint\checkers\logging.py:81:            "Used when a logging format string is given too many arguments.",
.venv\Lib\site-packages\pylint\checkers\logging.py:84:            "Not enough arguments for logging format string",
.venv\Lib\site-packages\pylint\checkers\logging.py:85:            "logging-too-few-args",
.venv\Lib\site-packages\pylint\checkers\logging.py:86:            "Used when a logging format string is given too few arguments.",
.venv\Lib\site-packages\pylint\checkers\logging.py:128:class LoggingChecker(checkers.BaseChecker):
.venv\Lib\site-packages\pylint\checkers\logging.py:129:    """Checks use of the logging module."""
.venv\Lib\site-packages\pylint\checkers\logging.py:131:    name = "logging"
.venv\Lib\site-packages\pylint\checkers\logging.py:136:            "logging-modules",
.venv\Lib\site-packages\pylint\checkers\logging.py:138:                "default": ("logging",),
.venv\Lib\site-packages\pylint\checkers\logging.py:141:                "help": "Logging modules to check that the string format "
.venv\Lib\site-packages\pylint\checkers\logging.py:142:                "arguments are in logging function parameter format.",
.venv\Lib\site-packages\pylint\checkers\logging.py:146:            "logging-format-style",
.venv\Lib\site-packages\pylint\checkers\logging.py:152:                "help": "The type of string formatting that logging methods do. "
.venv\Lib\site-packages\pylint\checkers\logging.py:160:        # The code being checked can just as easily "import logging as foo",
.venv\Lib\site-packages\pylint\checkers\logging.py:162:        # what name the logging module is actually given.
.venv\Lib\site-packages\pylint\checkers\logging.py:163:        self._logging_names: set[str] = set()
.venv\Lib\site-packages\pylint\checkers\logging.py:164:        logging_mods = self.linter.config.logging_modules
.venv\Lib\site-packages\pylint\checkers\logging.py:166:        self._format_style = self.linter.config.logging_format_style
.venv\Lib\site-packages\pylint\checkers\logging.py:168:        self._logging_modules = set(logging_mods)
.venv\Lib\site-packages\pylint\checkers\logging.py:170:        for logging_mod in logging_mods:
.venv\Lib\site-packages\pylint\checkers\logging.py:171:            parts = logging_mod.rsplit(".", 1)
.venv\Lib\site-packages\pylint\checkers\logging.py:176:        """Checks to see if a module uses a non-Python logging module."""
.venv\Lib\site-packages\pylint\checkers\logging.py:178:            logging_name = self._from_imports[node.modname]
.venv\Lib\site-packages\pylint\checkers\logging.py:180:                if module == logging_name:
.venv\Lib\site-packages\pylint\checkers\logging.py:181:                    self._logging_names.add(as_name or module)
.venv\Lib\site-packages\pylint\checkers\logging.py:186:        """Checks to see if this module uses Python's built-in logging."""
.venv\Lib\site-packages\pylint\checkers\logging.py:188:            if module in self._logging_modules:
.venv\Lib\site-packages\pylint\checkers\logging.py:189:                self._logging_names.add(as_name or module)
.venv\Lib\site-packages\pylint\checkers\logging.py:192:        """Checks calls to logging methods."""
.venv\Lib\site-packages\pylint\checkers\logging.py:194:        def is_logging_name() -> bool:
.venv\Lib\site-packages\pylint\checkers\logging.py:198:                and node.func.expr.name in self._logging_names
.venv\Lib\site-packages\pylint\checkers\logging.py:206:                        parent.qname() == "logging.Logger"
.venv\Lib\site-packages\pylint\checkers\logging.py:208:                            ancestor.qname() == "logging.Logger"
.venv\Lib\site-packages\pylint\checkers\logging.py:215:        if is_logging_name():
.venv\Lib\site-packages\pylint\checkers\logging.py:224:        """Checks calls to logging.log(level, format, *format_args)."""
.venv\Lib\site-packages\pylint\checkers\logging.py:253:                    "logging-not-lazy",
.venv\Lib\site-packages\pylint\checkers\logging.py:265:                "logging-fstring-interpolation",
.venv\Lib\site-packages\pylint\checkers\logging.py:275:            "logging-fstring-formatting", node.fromlineno
.venv\Lib\site-packages\pylint\checkers\logging.py:279:            "logging-format-interpolation", node.fromlineno
.venv\Lib\site-packages\pylint\checkers\logging.py:282:        if not self.linter.is_message_enabled("logging-not-lazy", node.fromlineno):
.venv\Lib\site-packages\pylint\checkers\logging.py:298:            LoggingChecker._is_operand_literal_str(node.left)
.venv\Lib\site-packages\pylint\checkers\logging.py:299:            or LoggingChecker._is_node_explicit_str_concatenation(node.left)
.venv\Lib\site-packages\pylint\checkers\logging.py:301:            LoggingChecker._is_operand_literal_str(node.right)
.venv\Lib\site-packages\pylint\checkers\logging.py:302:            or LoggingChecker._is_node_explicit_str_concatenation(node.right)
.venv\Lib\site-packages\pylint\checkers\logging.py:316:                "logging-format-interpolation",
.venv\Lib\site-packages\pylint\checkers\logging.py:345:                        # Keyword checking on logging strings is complicated by
.venv\Lib\site-packages\pylint\checkers\logging.py:364:                    "logging-unsupported-format",
.venv\Lib\site-packages\pylint\checkers\logging.py:370:                self.add_message("logging-format-truncated", node=node)
.venv\Lib\site-packages\pylint\checkers\logging.py:373:            self.add_message("logging-too-many-args", node=node, confidence=HIGH)
.venv\Lib\site-packages\pylint\checkers\logging.py:375:            self.add_message("logging-too-few-args", node=node)
.venv\Lib\site-packages\pylint\checkers\logging.py:423:    linter.register_checker(LoggingChecker(linter))
.venv\Lib\site-packages\pylint\checkers\stdlib.py:182:            "logging.warn",
.venv\Lib\site-packages\pylint\checkers\stdlib.py:183:            "logging.Logger.warn",
.venv\Lib\site-packages\pylint\checkers\stdlib.py:184:            "logging.LoggerAdapter.warn",
.venv\Lib\site-packages\pylint\checkers\__init__.py:19:12: logging
.venv\Lib\site-packages\pylint\testutils\configuration_test.py:11:import logging
.venv\Lib\site-packages\pylint\testutils\configuration_test.py:36:        # logging is helpful to realize your file is not taken into
.venv\Lib\site-packages\pylint\testutils\configuration_test.py:39:        logging.info("%s exists.", expected_result_path)
.venv\Lib\site-packages\pylint\testutils\configuration_test.py:41:        logging.info("%s not found, using '%s'.", expected_result_path, default)
.venv\Lib\site-packages\pylint\testutils\configuration_test.py:97:        logging.error(
.venv\Lib\site-packages\pylint\testutils\configuration_test.py:104:        # logging is helpful to see what the expected exit code is and why.
.venv\Lib\site-packages\pylint\testutils\configuration_test.py:107:        logging.info(".out file does not exists, so the expected exit code is 0")
.venv\Lib\site-packages\pylint\testutils\configuration_test.py:113:        logging.error(
.venv\Lib\site-packages\pylint\testutils\configuration_test.py:124:    logging.info(
.venv\Lib\site-packages\pylint\testutils\_primer\package_to_lint.py:7:import logging
.venv\Lib\site-packages\pylint\testutils\_primer\package_to_lint.py:110:        logging.info("Lazy cloning %s", self.url)
.venv\Lib\site-packages\pylint\testutils\_primer\package_to_lint.py:122:        logging.info("Directory does not exists, cloning: %s", options)
.venv\Lib\site-packages\pylint\testutils\_primer\package_to_lint.py:132:            logging.info(
.venv\Lib\site-packages\pylint\testutils\_primer\package_to_lint.py:148:            logging.info("Repository already up to date.")
.venv\Lib\site-packages\pytest\__init__.py:29:from _pytest.logging import LogCaptureFixture
.venv\Lib\site-packages\pytest_asyncio\plugin.py:536:            # exceptions to prevent asyncio's warning from logging.
.venv\Lib\site-packages\realtime\connection.py:3:import logging
.venv\Lib\site-packages\realtime\connection.py:15:# logging.basicConfig(
.venv\Lib\site-packages\realtime\connection.py:16:#     format="%(asctime)s:%(levelname)s - %(message)s", level=logging.INFO
.venv\Lib\site-packages\realtime\connection.py:87:                    logging.info(
.venv\Lib\site-packages\realtime\connection.py:95:                    logging.exception("Connection with the server closed.")
.venv\Lib\site-packages\realtime\connection.py:110:            logging.info("Connection was successful")
.venv\Lib\site-packages\realtime\connection.py:145:                    logging.info(
.venv\Lib\site-packages\realtime\connection.py:150:                    logging.exception("Connection with the server closed.")
.venv\Lib\site-packages\requests\__init__.py:143:# Set default logging handler to avoid "No handler found" warnings.
.venv\Lib\site-packages\requests\__init__.py:144:import logging
.venv\Lib\site-packages\requests\__init__.py:145:from logging import NullHandler
.venv\Lib\site-packages\requests\__init__.py:177:logging.getLogger(__name__).addHandler(NullHandler())
.venv\Lib\site-packages\rich\console.py:612:        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.
.venv\Lib\site-packages\rich\console.py:613:        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.
.venv\Lib\site-packages\rich\console.py:1103:        """A context manager to *capture* the result of print() or log() in a string,
.venv\Lib\site-packages\rich\console.py:1932:    def log(
.venv\Lib\site-packages\rich\console.py:1956:            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``
.venv\Lib\site-packages\rich\console.py:2630:    console.log(
.venv\Lib\site-packages\rich\console.py:2645:    console.log("Hello, World!", "{'a': 1}", repr(console))
.venv\Lib\site-packages\rich\default_styles.py:53:    "logging.keyword": Style(bold=True, color="yellow"),
.venv\Lib\site-packages\rich\default_styles.py:54:    "logging.level.notset": Style(dim=True),
.venv\Lib\site-packages\rich\default_styles.py:55:    "logging.level.debug": Style(color="green"),
.venv\Lib\site-packages\rich\default_styles.py:56:    "logging.level.info": Style(color="blue"),
.venv\Lib\site-packages\rich\default_styles.py:57:    "logging.level.warning": Style(color="yellow"),
.venv\Lib\site-packages\rich\default_styles.py:58:    "logging.level.error": Style(color="red", bold=True),
.venv\Lib\site-packages\rich\default_styles.py:59:    "logging.level.critical": Style(color="red", bold=True, reverse=True),
.venv\Lib\site-packages\rich\diagnose.py:30:        "VSCODE_VERBOSE_LOGGING",
.venv\Lib\site-packages\rich\live.py:378:                    console.log(next(examples))
.venv\Lib\site-packages\rich\logging.py:1:import logging
.venv\Lib\site-packages\rich\logging.py:3:from logging import Handler, LogRecord
.venv\Lib\site-packages\rich\logging.py:19:    """A logging handler that renders output with Rich. The time / level / message and file are displayed in columns.
.venv\Lib\site-packages\rich\logging.py:23:        Be careful when enabling console markup in log messages if you have configured logging for libraries not
.venv\Lib\site-packages\rich\logging.py:27:        level (Union[int, str], optional): Log level. Defaults to logging.NOTSET.
.venv\Lib\site-packages\rich\logging.py:67:        level: Union[int, str] = logging.NOTSET,
.venv\Lib\site-packages\rich\logging.py:128:            level_name.ljust(8), f"logging.level.{level_name.lower()}"
.venv\Lib\site-packages\rich\logging.py:133:        """Invoked by logging."""
.venv\Lib\site-packages\rich\logging.py:186:            record (LogRecord): logging Record.
.venv\Lib\site-packages\rich\logging.py:203:            message_text.highlight_words(self.keywords, "logging.keyword")
.venv\Lib\site-packages\rich\logging.py:217:            record (LogRecord): logging Record.
.venv\Lib\site-packages\rich\logging.py:247:    logging.basicConfig(
.venv\Lib\site-packages\rich\logging.py:253:    log = logging.getLogger("rich")
.venv\Lib\site-packages\rich\progress.py:1715:                progress.log(next(examples))
.venv\Lib\site-packages\rich\segment.py:4:from logging import getLogger
.venv\Lib\site-packages\rich\status.py:117:        console.log("Importing advanced AI")
.venv\Lib\site-packages\rich\status.py:119:        console.log("Advanced Covid AI Ready")
.venv\Lib\site-packages\rich\status.py:123:        console.log("Found 10,000,000,000 copies of Covid32.exe")
.venv\Lib\site-packages\rich\_log_render.py:94:    c.log("[on blue]hello", justify="right")
.venv\Lib\site-packages\rich\__main__.py:204:        """Progress bars, columns, styled logging handler, tracebacks, etc...""",
.venv\Lib\site-packages\serializable\__init__.py:23:import logging
.venv\Lib\site-packages\serializable\__init__.py:46:logger = logging.getLogger('serializable')
.venv\Lib\site-packages\serializable\__init__.py:47:logger.setLevel(logging.INFO)
.venv\Lib\site-packages\serializable\__init__.py:226:    logging.debug(f'Dumping {self} to JSON with view: {view_}...')
.venv\Lib\site-packages\serializable\__init__.py:235:    logging.debug(f'Rendering JSON to {cls}...')
.venv\Lib\site-packages\serializable\__init__.py:254:            logger.debug(f'Ignoring {k} when deserializing {cls.__module__}.{cls.__qualname__}')
.venv\Lib\site-packages\serializable\__init__.py:267:            logger.error(
.venv\Lib\site-packages\serializable\__init__.py:305:            logging.error(f'There was an AttributeError deserializing JSON to {cls}.{os.linesep}'
.venv\Lib\site-packages\serializable\__init__.py:313:    logging.debug(f'Creating {cls} from {_data}')
.venv\Lib\site-packages\serializable\__init__.py:320:    logging.debug(f'Dumping {self} to XML with view {view_}...')
.venv\Lib\site-packages\serializable\__init__.py:444:    logging.debug(f'Rendering XML from {type(data)} to {cls}...')
.venv\Lib\site-packages\serializable\__init__.py:470:            logger.debug(f'Ignoring {decoded_k} when deserializing {cls.__module__}.{cls.__qualname__}')
.venv\Lib\site-packages\serializable\__init__.py:504:            logger.debug(f'Ignoring {decoded_k} when deserializing {cls.__module__}.{cls.__qualname__}')
.venv\Lib\site-packages\serializable\__init__.py:528:            logger.debug(f'Handling {prop_info}')
.venv\Lib\site-packages\serializable\__init__.py:577:            logging.error(f'There was an AttributeError deserializing JSON to {cls}.{os.linesep}'
.venv\Lib\site-packages\serializable\__init__.py:585:    logging.debug(f'Creating {cls} from {_data}')
.venv\Lib\site-packages\serializable\__init__.py:969:        logging.debug(f'Registering Class {qualified_class_name} with custom name {custom_name}')
.venv\Lib\site-packages\serializable\__init__.py:1126:        logger.debug(f'Registering {f.__module__}.{f.__qualname__} with custom type: {type_}')
.venv\Lib\site-packages\serializable\__init__.py:1142:        logger.debug(f'Registering {f.__module__}.{f.__qualname__} to include None for view: {view_}')
.venv\Lib\site-packages\serializable\__init__.py:1158:        logger.debug(f'Registering {f.__module__}.{f.__qualname__} with JSON name: {name}')
.venv\Lib\site-packages\serializable\__init__.py:1174:        logger.debug(f'Registering {f.__module__}.{f.__qualname__} with String Format: {format_}')
.venv\Lib\site-packages\serializable\__init__.py:1190:        logger.debug(f'Registering {f.__module__}.{f.__qualname__} with View: {view_}')
.venv\Lib\site-packages\serializable\__init__.py:1206:        logger.debug(f'Registering {f.__module__}.{f.__qualname__} as XML attribute')
.venv\Lib\site-packages\serializable\__init__.py:1220:        logger.debug(f'Registering {f.__module__}.{f.__qualname__} as XML Array: {array_type}:{child_name}')
.venv\Lib\site-packages\serializable\__init__.py:1236:        logger.debug(f'Registering {f.__module__}.{f.__qualname__} with XML name: {name}')
.venv\Lib\site-packages\serializable\__init__.py:1252:        logger.debug(f'Registering {f.__module__}.{f.__qualname__} with XML sequence: {sequence}')
.venv\Lib\site-packages\setuptools\logging.py:2:import logging
.venv\Lib\site-packages\setuptools\logging.py:8:    return record.levelno < logging.WARNING
.venv\Lib\site-packages\setuptools\logging.py:13:    Configure logging to emit warning and above to stderr
.venv\Lib\site-packages\setuptools\logging.py:18:    err_handler = logging.StreamHandler()
.venv\Lib\site-packages\setuptools\logging.py:19:    err_handler.setLevel(logging.WARNING)
.venv\Lib\site-packages\setuptools\logging.py:20:    out_handler = logging.StreamHandler(sys.stdout)
.venv\Lib\site-packages\setuptools\logging.py:23:    logging.basicConfig(
.venv\Lib\site-packages\setuptools\logging.py:24:        format="{message}", style='{', handlers=handlers, level=logging.DEBUG)
.venv\Lib\site-packages\setuptools\logging.py:35:    logging.root.setLevel(level*10)
.venv\Lib\site-packages\setuptools\__init__.py:22:from . import logging
.venv\Lib\site-packages\setuptools\__init__.py:85:    logging.configure()
.venv\Lib\site-packages\setuptools\command\editable_wheel.py:13:import logging
.venv\Lib\site-packages\setuptools\command\editable_wheel.py:56:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\setuptools\command\editable_wheel.py:341:            _logger.info(f"Installing {category} as non editable")
.venv\Lib\site-packages\setuptools\command\editable_wheel.py:398:        _logger.warning(msg + _LENIENT_WARNING)
.venv\Lib\site-packages\setuptools\command\editable_wheel.py:462:        _logger.warning(msg + _STRICT_WARNING)
.venv\Lib\site-packages\setuptools\command\editable_wheel.py:502:        _logger.warning(msg + _LENIENT_WARNING)
.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:6:import logging
.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:23:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:47:            _logger.debug(summary)
.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:48:            _logger.debug(ex.details)
.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:134:            _logger.debug(f"ignored error: {ex.__class__.__name__} - {ex}")
.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:427:        _logger.debug(f"ignored error: {ex.__class__.__name__} - {ex}")
.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:10:import logging
.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:33:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:237:                _logger.warning(f"Command option {cmd}.{key} is not defined")
.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:263:        _logger.warning(f"{msg}: {ex}")
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:3:import logging
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:12:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:52:    Depending on the level of the verbosity of the ``logging`` configuration
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:54:    ``summary`` and ``details`` (when the logging level is set to :obj:`logging.DEBUG`).
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:91:        if _logger.getEffectiveLevel() <= logging.DEBUG and self.details:
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:1:import logging
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:8:_logger = logging.getLogger(__name__)
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:77:    _logger.warning(
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:155:            _logger.debug(msg)
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:163:            _logger.debug(msg)
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:168:                _logger.debug("Problem with download, skipping validation")
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:194:            _logger.warning(
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:240:        _logger.warning(msg)
.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:253:        _logger.warning(f"`{value}` - using extras for entry points is not recommended")
.venv\Lib\site-packages\setuptools\_distutils\cmd.py:186:        log.log(level, msg)
.venv\Lib\site-packages\setuptools\_distutils\dist.py:47:        log.log(log.WARN, msg)
.venv\Lib\site-packages\setuptools\_distutils\dist.py:960:        log.log(level, msg)
.venv\Lib\site-packages\setuptools\_distutils\log.py:4:# replaced with a standard Python logging implementation.
.venv\Lib\site-packages\setuptools\_distutils\log.py:19:    def _log(self, level, msg, args):
.venv\Lib\site-packages\setuptools\_distutils\log.py:39:    def log(self, level, msg, *args):
.venv\Lib\site-packages\setuptools\_distutils\log.py:40:        self._log(level, msg, args)
.venv\Lib\site-packages\setuptools\_distutils\log.py:43:        self._log(DEBUG, msg, args)
.venv\Lib\site-packages\setuptools\_distutils\log.py:46:        self._log(INFO, msg, args)
.venv\Lib\site-packages\setuptools\_distutils\log.py:49:        self._log(WARN, msg, args)
.venv\Lib\site-packages\setuptools\_distutils\log.py:52:        self._log(ERROR, msg, args)
.venv\Lib\site-packages\setuptools\_distutils\log.py:55:        self._log(FATAL, msg, args)
.venv\Lib\site-packages\setuptools\_distutils\log.py:58:_global_log = Log()
.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:253:        self.changelog = self._format_changelog(self.changelog)
.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:597:    def _format_changelog(self, changelog):
.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1633:           def add_logging(f: Callable[P, T]) -> Callable[P, T]:
.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1634:               '''A type-safe decorator to add logging to a function.'''
.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1636:                   logging.info(f'{f.__name__} was called')
.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1640:           @add_logging
.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:1077:    `side_effect` can be used for logging, updating progress bars, or anything
.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3281:    # "Reservoir-Sampling Algorithms of Time Complexity O(n(1+log(N/n)))".
.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3288:    W = exp(log(random()) / k)
.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3292:    next_index = k + floor(log(random()) / log(1 - W))
.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3299:            W *= exp(log(random()) / k)
.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3300:            next_index += floor(log(random()) / log(1 - W)) + 1
.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3310:    weight_keys = (log(random()) / weight for weight in weights)
.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3320:    weights_to_skip = log(random()) / smallest_weight_key
.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3329:            weight_key = log(r_2) / weight
.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3332:            weights_to_skip = log(random()) / smallest_weight_key
.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:5:import logging
.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:115:        logger.debug(
.venv\Lib\site-packages\socketio\async_client.py:2:import logging
.venv\Lib\site-packages\socketio\async_client.py:11:default_logger = logging.getLogger('socketio.client')
.venv\Lib\site-packages\socketio\async_client.py:35:    :param logger: To enable logging set to ``True`` or pass a logger object to
.venv\Lib\site-packages\socketio\async_client.py:36:                   use. To disable logging set to ``False``. The default is
.venv\Lib\site-packages\socketio\async_client.py:61:    :param engineio_logger: To enable Engine.IO logging set to ``True`` or pass
.venv\Lib\site-packages\socketio\async_client.py:62:                            a logger object to use. To disable logging set to
.venv\Lib\site-packages\socketio\async_client.py:216:        self.logger.info('Emitting event "%s" [%s]', event, namespace)
.venv\Lib\site-packages\socketio\async_client.py:363:            self.logger.info('Namespace {} is connected'.format(namespace))
.venv\Lib\site-packages\socketio\async_client.py:382:        self.logger.info('Received event "%s" [%s]', data[0], namespace)
.venv\Lib\site-packages\socketio\async_client.py:398:        self.logger.info('Received ack [%s]', namespace)
.venv\Lib\site-packages\socketio\async_client.py:404:            self.logger.warning('Unknown callback received, ignoring.')
.venv\Lib\site-packages\socketio\async_client.py:415:        self.logger.info('Connection to namespace {} was rejected'.format(
.venv\Lib\site-packages\socketio\async_client.py:468:            self.logger.info(
.venv\Lib\site-packages\socketio\async_client.py:473:                self.logger.info('Reconnect task aborted')
.venv\Lib\site-packages\socketio\async_client.py:491:                self.logger.info('Reconnection successful')
.venv\Lib\site-packages\socketio\async_client.py:496:                self.logger.info(
.venv\Lib\site-packages\socketio\async_client.py:506:        self.logger.info('Engine.IO connection established')
.venv\Lib\site-packages\socketio\async_client.py:543:        self.logger.info('Engine.IO connection dropped')
.venv\Lib\site-packages\socketio\async_pubsub_manager.py:234:                            self.server.logger.exception(
.venv\Lib\site-packages\socketio\async_server.py:22:    :param logger: To enable logging set to ``True`` or pass a logger object to
.venv\Lib\site-packages\socketio\async_server.py:23:                   use. To disable logging set to ``False``. Note that fatal
.venv\Lib\site-packages\socketio\async_server.py:98:    :param engineio_logger: To enable Engine.IO logging set to ``True`` or pass
.venv\Lib\site-packages\socketio\async_server.py:99:                            a logger object to use. To disable logging set to
.venv\Lib\site-packages\socketio\async_server.py:166:        self.logger.info('emitting event "%s" to %s [%s]', event,
.venv\Lib\site-packages\socketio\async_server.py:293:        self.logger.info('%s is entering room %s [%s]', sid, room, namespace)
.venv\Lib\site-packages\socketio\async_server.py:309:        self.logger.info('%s is leaving room %s [%s]', sid, room, namespace)
.venv\Lib\site-packages\socketio\async_server.py:324:        self.logger.info('room %s is closing [%s]', room, namespace)
.venv\Lib\site-packages\socketio\async_server.py:416:            self.logger.info('Disconnecting %s [%s]', sid, namespace)
.venv\Lib\site-packages\socketio\async_server.py:430:        self.logger.info('Socket.IO is shutting down')
.venv\Lib\site-packages\socketio\async_server.py:582:        self.logger.info('received event "%s" from %s [%s]', data[0], sid,
.venv\Lib\site-packages\socketio\async_server.py:585:            self.logger.warning('%s is not connected to namespace %s',
.venv\Lib\site-packages\socketio\async_server.py:614:        self.logger.info('received ack from %s [%s]', sid, namespace)
.venv\Lib\site-packages\socketio\base_client.py:2:import logging
.venv\Lib\site-packages\socketio\base_client.py:9:default_logger = logging.getLogger('socketio.client')
.venv\Lib\site-packages\socketio\base_client.py:76:            if self.logger.level == logging.NOTSET:
.venv\Lib\site-packages\socketio\base_client.py:78:                    self.logger.setLevel(logging.INFO)
.venv\Lib\site-packages\socketio\base_client.py:80:                    self.logger.setLevel(logging.ERROR)
.venv\Lib\site-packages\socketio\base_client.py:81:                self.logger.addHandler(logging.StreamHandler())
.venv\Lib\site-packages\socketio\base_manager.py:2:import logging
.venv\Lib\site-packages\socketio\base_manager.py:6:default_logger = logging.getLogger('socketio')
.venv\Lib\site-packages\socketio\base_server.py:1:import logging
.venv\Lib\site-packages\socketio\base_server.py:7:default_logger = logging.getLogger('socketio.server')
.venv\Lib\site-packages\socketio\base_server.py:47:            if self.logger.level == logging.NOTSET:
.venv\Lib\site-packages\socketio\base_server.py:49:                    self.logger.setLevel(logging.INFO)
.venv\Lib\site-packages\socketio\base_server.py:51:                    self.logger.setLevel(logging.ERROR)
.venv\Lib\site-packages\socketio\base_server.py:52:                self.logger.addHandler(logging.StreamHandler())
.venv\Lib\site-packages\socketio\client.py:31:    :param logger: To enable logging set to ``True`` or pass a logger object to
.venv\Lib\site-packages\socketio\client.py:32:                   use. To disable logging set to ``False``. The default is
.venv\Lib\site-packages\socketio\client.py:64:    :param engineio_logger: To enable Engine.IO logging set to ``True`` or pass
.venv\Lib\site-packages\socketio\client.py:65:                            a logger object to use. To disable logging set to
.venv\Lib\site-packages\socketio\client.py:205:        self.logger.info('Emitting event "%s" [%s]', event, namespace)
.venv\Lib\site-packages\socketio\client.py:341:            self.logger.info('Namespace {} is connected'.format(namespace))
.venv\Lib\site-packages\socketio\client.py:360:        self.logger.info('Received event "%s" [%s]', data[0], namespace)
.venv\Lib\site-packages\socketio\client.py:376:        self.logger.info('Received ack [%s]', namespace)
.venv\Lib\site-packages\socketio\client.py:382:            self.logger.warning('Unknown callback received, ignoring.')
.venv\Lib\site-packages\socketio\client.py:390:        self.logger.info('Connection to namespace {} was rejected'.format(
.venv\Lib\site-packages\socketio\client.py:432:            self.logger.info(
.venv\Lib\site-packages\socketio\client.py:436:                self.logger.info('Reconnect task aborted')
.venv\Lib\site-packages\socketio\client.py:451:                self.logger.info('Reconnection successful')
.venv\Lib\site-packages\socketio\client.py:456:                self.logger.info(
.venv\Lib\site-packages\socketio\client.py:465:        self.logger.info('Engine.IO connection established')
.venv\Lib\site-packages\socketio\client.py:502:        self.logger.info('Engine.IO connection dropped')
.venv\Lib\site-packages\socketio\kafka_manager.py:1:import logging
.venv\Lib\site-packages\socketio\kafka_manager.py:11:logger = logging.getLogger('socketio')
.venv\Lib\site-packages\socketio\manager.py:1:import logging
.venv\Lib\site-packages\socketio\manager.py:7:default_logger = logging.getLogger('socketio')
.venv\Lib\site-packages\socketio\pubsub_manager.py:224:                    self.server.logger.exception(
.venv\Lib\site-packages\socketio\redis_manager.py:1:import logging
.venv\Lib\site-packages\socketio\redis_manager.py:12:logger = logging.getLogger('socketio')
.venv\Lib\site-packages\socketio\redis_manager.py:82:                    logger.error('Cannot publish to redis... retrying')
.venv\Lib\site-packages\socketio\redis_manager.py:85:                    logger.error('Cannot publish to redis... giving up')
.venv\Lib\site-packages\socketio\redis_manager.py:100:                logger.error('Cannot receive from redis... '
.venv\Lib\site-packages\socketio\server.py:1:import logging
.venv\Lib\site-packages\socketio\server.py:9:default_logger = logging.getLogger('socketio.server')
.venv\Lib\site-packages\socketio\server.py:22:    :param logger: To enable logging set to ``True`` or pass a logger object to
.venv\Lib\site-packages\socketio\server.py:23:                   use. To disable logging set to ``False``. The default is
.venv\Lib\site-packages\socketio\server.py:107:    :param engineio_logger: To enable Engine.IO logging set to ``True`` or pass
.venv\Lib\site-packages\socketio\server.py:108:                            a logger object to use. To disable logging set to
.venv\Lib\site-packages\socketio\server.py:159:        self.logger.info('emitting event "%s" to %s [%s]', event,
.venv\Lib\site-packages\socketio\server.py:279:        self.logger.info('%s is entering room %s [%s]', sid, room, namespace)
.venv\Lib\site-packages\socketio\server.py:293:        self.logger.info('%s is leaving room %s [%s]', sid, room, namespace)
.venv\Lib\site-packages\socketio\server.py:306:        self.logger.info('room %s is closing [%s]', room, namespace)
.venv\Lib\site-packages\socketio\server.py:397:            self.logger.info('Disconnecting %s [%s]', sid, namespace)
.venv\Lib\site-packages\socketio\server.py:411:        self.logger.info('Socket.IO is shutting down')
.venv\Lib\site-packages\socketio\server.py:569:        self.logger.info('received event "%s" from %s [%s]', data[0], sid,
.venv\Lib\site-packages\socketio\server.py:572:            self.logger.warning('%s is not connected to namespace %s',
.venv\Lib\site-packages\socketio\server.py:601:        self.logger.info('received ack from %s [%s]', sid, namespace)
.venv\Lib\site-packages\sortedcontainers\sorteddict.py:237:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sorteddict.py:285:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sorteddict.py:344:        Runtime complexity: `O(n*log(n))`
.venv\Lib\site-packages\sortedcontainers\sorteddict.py:420:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sorteddict.py:457:        Runtime complexity: `O(log(n))`
.venv\Lib\site-packages\sortedcontainers\sorteddict.py:493:        Runtime complexity: `O(log(n))`
.venv\Lib\site-packages\sortedcontainers\sorteddict.py:523:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sorteddict.py:626:    Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sorteddict.py:680:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sorteddict.py:729:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sorteddict.py:781:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:150:        Runtime complexity: `O(n*log(n))`
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:256:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:326:        Runtime complexity: `O(k*log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:367:        Runtime complexity: `O(log(n))`
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:398:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:431:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:750:        size = 2 ** (int(log(len(row1) - 1, 2)) + 1)
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:771:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:823:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1174:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1206:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1236:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1327:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1390:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1463:        Runtime complexity: `O(n*log(n))`
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1488:        Runtime complexity: `O(k*log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1508:        Runtime complexity: `O(n*log(n))`
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1529:        Runtime complexity: `O(n*log(n))`
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1726:        Runtime complexity: `O(n*log(n))`
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1781:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1864:        Runtime complexity: `O(k*log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1908:        Runtime complexity: `O(log(n))`
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:1957:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:2006:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:2244:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:2266:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:2290:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:2326:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:2358:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:2425:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:2506:        Runtime complexity: `O(n*log(n))`
.venv\Lib\site-packages\sortedcontainers\sortedlist.py:2530:        Runtime complexity: `O(n*log(n))`
.venv\Lib\site-packages\sortedcontainers\sortedset.py:118:        Runtime complexity: `O(n*log(n))`
.venv\Lib\site-packages\sortedcontainers\sortedset.py:219:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedset.py:244:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedset.py:344:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedset.py:408:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedset.py:435:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\sortedcontainers\sortedset.py:461:        Runtime complexity: `O(log(n))` -- approximate.
.venv\Lib\site-packages\stevedore\dispatch.py:13:import logging
.venv\Lib\site-packages\stevedore\dispatch.py:18:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\stevedore\enabled.py:13:import logging
.venv\Lib\site-packages\stevedore\enabled.py:18:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\stevedore\extension.py:16:import logging
.venv\Lib\site-packages\stevedore\extension.py:22:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\stevedore\extension.py:224:                    # enough to debug that.  If debug logging is
.venv\Lib\site-packages\stevedore\extension.py:228:                              exc_info=LOG.isEnabledFor(logging.DEBUG))
.venv\Lib\site-packages\stevedore\named.py:13:import logging
.venv\Lib\site-packages\stevedore\named.py:17:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\stevedore\sphinxext.py:19:from sphinx.util import logging
.venv\Lib\site-packages\stevedore\sphinxext.py:24:LOG = logging.getLogger(__name__)
.venv\Lib\site-packages\stevedore\_cache.py:21:import logging
.venv\Lib\site-packages\stevedore\_cache.py:28:log = logging.getLogger('stevedore._cache')
.venv\Lib\site-packages\stevedore\__init__.py:17:import logging
.venv\Lib\site-packages\stevedore\__init__.py:20:# the app we're used from does not set up logging.
.venv\Lib\site-packages\stevedore\__init__.py:21:LOG = logging.getLogger('stevedore')
.venv\Lib\site-packages\stevedore\__init__.py:23:LOG.addHandler(logging.NullHandler())
.venv\Lib\site-packages\urllib3\connection.py:5:import logging
.venv\Lib\site-packages\urllib3\connection.py:71:log = logging.getLogger(__name__)
.venv\Lib\site-packages\urllib3\connection.py:1089:    """Returns the URL from a given connection. This is mainly used for testing and logging."""
.venv\Lib\site-packages\urllib3\connectionpool.py:4:import logging
.venv\Lib\site-packages\urllib3\connectionpool.py:61:log = logging.getLogger(__name__)
.venv\Lib\site-packages\urllib3\connectionpool.py:1166:    """Returns the URL from a given connection pool. This is mainly used for testing and logging."""
.venv\Lib\site-packages\urllib3\poolmanager.py:4:import logging
.venv\Lib\site-packages\urllib3\poolmanager.py:35:log = logging.getLogger(__name__)
.venv\Lib\site-packages\urllib3\response.py:6:import logging
.venv\Lib\site-packages\urllib3\response.py:51:log = logging.getLogger(__name__)
.venv\Lib\site-packages\urllib3\__init__.py:7:# Set default logging handler to avoid "No handler found" warnings.
.venv\Lib\site-packages\urllib3\__init__.py:8:import logging
.venv\Lib\site-packages\urllib3\__init__.py:12:from logging import NullHandler
.venv\Lib\site-packages\urllib3\__init__.py:71:logging.getLogger(__name__).addHandler(NullHandler())
.venv\Lib\site-packages\urllib3\__init__.py:75:    level: int = logging.DEBUG,
.venv\Lib\site-packages\urllib3\__init__.py:76:) -> logging.StreamHandler[typing.TextIO]:
.venv\Lib\site-packages\urllib3\__init__.py:78:    Helper for quickly adding a StreamHandler to the logger. Useful for
.venv\Lib\site-packages\urllib3\__init__.py:85:    logger = logging.getLogger(__name__)
.venv\Lib\site-packages\urllib3\__init__.py:86:    handler = logging.StreamHandler()
.venv\Lib\site-packages\urllib3\__init__.py:87:    handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(message)s"))
.venv\Lib\site-packages\urllib3\__init__.py:88:    logger.addHandler(handler)
.venv\Lib\site-packages\urllib3\__init__.py:89:    logger.setLevel(level)
.venv\Lib\site-packages\urllib3\__init__.py:90:    logger.debug("Added a stderr logging handler to logger: %s", __name__)
.venv\Lib\site-packages\urllib3\contrib\pyopenssl.py:54:import logging
.venv\Lib\site-packages\urllib3\contrib\pyopenssl.py:136:log = logging.getLogger(__name__)
.venv\Lib\site-packages\urllib3\contrib\emscripten\response.py:4:import logging
.venv\Lib\site-packages\urllib3\contrib\emscripten\response.py:19:log = logging.getLogger(__name__)
.venv\Lib\site-packages\urllib3\http2\connection.py:3:import logging
.venv\Lib\site-packages\urllib3\http2\connection.py:23:log = logging.getLogger(__name__)
.venv\Lib\site-packages\urllib3\util\retry.py:4:import logging
.venv\Lib\site-packages\urllib3\util\retry.py:29:log = logging.getLogger(__name__)
.venv\Lib\site-packages\uvicorn\config.py:4:import logging
.venv\Lib\site-packages\uvicorn\config.py:5:import logging.config
.venv\Lib\site-packages\uvicorn\config.py:28:from uvicorn.logging import TRACE_LOG_LEVEL
.venv\Lib\site-packages\uvicorn\config.py:41:    "critical": logging.CRITICAL,
.venv\Lib\site-packages\uvicorn\config.py:42:    "error": logging.ERROR,
.venv\Lib\site-packages\uvicorn\config.py:43:    "warning": logging.WARNING,
.venv\Lib\site-packages\uvicorn\config.py:44:    "info": logging.INFO,
.venv\Lib\site-packages\uvicorn\config.py:45:    "debug": logging.DEBUG,
.venv\Lib\site-packages\uvicorn\config.py:74:LOGGING_CONFIG: Dict[str, Any] = {
.venv\Lib\site-packages\uvicorn\config.py:79:            "()": "uvicorn.logging.DefaultFormatter",
.venv\Lib\site-packages\uvicorn\config.py:84:            "()": "uvicorn.logging.AccessFormatter",
.venv\Lib\site-packages\uvicorn\config.py:91:            "class": "logging.StreamHandler",
.venv\Lib\site-packages\uvicorn\config.py:96:            "class": "logging.StreamHandler",
.venv\Lib\site-packages\uvicorn\config.py:107:logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\config.py:205:        log_config: Optional[Union[Dict[str, Any], str]] = LOGGING_CONFIG,
.venv\Lib\site-packages\uvicorn\config.py:285:        self.configure_logging()
.venv\Lib\site-packages\uvicorn\config.py:295:            logger.warning(
.venv\Lib\site-packages\uvicorn\config.py:332:                    logger.warning(
.venv\Lib\site-packages\uvicorn\config.py:339:            logger.info(
.venv\Lib\site-packages\uvicorn\config.py:347:            logger.info("Loading environment from '%s'", env_file)
.venv\Lib\site-packages\uvicorn\config.py:362:            logger.warning('"workers" flag is ignored when reloading is enabled.')
.venv\Lib\site-packages\uvicorn\config.py:381:    def configure_logging(self) -> None:
.venv\Lib\site-packages\uvicorn\config.py:382:        logging.addLevelName(TRACE_LOG_LEVEL, "TRACE")
.venv\Lib\site-packages\uvicorn\config.py:393:                logging.config.dictConfig(self.log_config)
.venv\Lib\site-packages\uvicorn\config.py:397:                    logging.config.dictConfig(loaded_config)
.venv\Lib\site-packages\uvicorn\config.py:405:                    logging.config.dictConfig(loaded_config)
.venv\Lib\site-packages\uvicorn\config.py:408:                # https://docs.python.org/3/library/logging.config.html#configuration-file-format
.venv\Lib\site-packages\uvicorn\config.py:409:                logging.config.fileConfig(
.venv\Lib\site-packages\uvicorn\config.py:418:            logging.getLogger("uvicorn.error").setLevel(log_level)
.venv\Lib\site-packages\uvicorn\config.py:419:            logging.getLogger("uvicorn.access").setLevel(log_level)
.venv\Lib\site-packages\uvicorn\config.py:420:            logging.getLogger("uvicorn.asgi").setLevel(log_level)
.venv\Lib\site-packages\uvicorn\config.py:422:            logging.getLogger("uvicorn.access").handlers = []
.venv\Lib\site-packages\uvicorn\config.py:423:            logging.getLogger("uvicorn.access").propagate = False
.venv\Lib\site-packages\uvicorn\config.py:469:            logger.error("Error loading ASGI app. %s" % exc)
.venv\Lib\site-packages\uvicorn\config.py:476:                logger.error("Error loading ASGI app factory: %s", exc)
.venv\Lib\site-packages\uvicorn\config.py:480:                logger.warning(
.venv\Lib\site-packages\uvicorn\config.py:501:        if logger.getEffectiveLevel() <= TRACE_LOG_LEVEL:
.venv\Lib\site-packages\uvicorn\config.py:525:                logger.error(exc)
.venv\Lib\site-packages\uvicorn\config.py:560:                logger.error(exc)
.venv\Lib\site-packages\uvicorn\config.py:571:        logger.info(message, *logger_args, extra={"color_message": color_message})
.venv\Lib\site-packages\uvicorn\logging.py:2:import logging
.venv\Lib\site-packages\uvicorn\logging.py:12:class ColourizedFormatter(logging.Formatter):
.venv\Lib\site-packages\uvicorn\logging.py:23:        logging.DEBUG: lambda level_name: click.style(str(level_name), fg="cyan"),
.venv\Lib\site-packages\uvicorn\logging.py:24:        logging.INFO: lambda level_name: click.style(str(level_name), fg="green"),
.venv\Lib\site-packages\uvicorn\logging.py:25:        logging.WARNING: lambda level_name: click.style(str(level_name), fg="yellow"),
.venv\Lib\site-packages\uvicorn\logging.py:26:        logging.ERROR: lambda level_name: click.style(str(level_name), fg="red"),
.venv\Lib\site-packages\uvicorn\logging.py:27:        logging.CRITICAL: lambda level_name: click.style(
.venv\Lib\site-packages\uvicorn\logging.py:55:    def formatMessage(self, record: logging.LogRecord) -> str:
.venv\Lib\site-packages\uvicorn\logging.py:97:    def formatMessage(self, record: logging.LogRecord) -> str:
.venv\Lib\site-packages\uvicorn\main.py:2:import logging
.venv\Lib\site-packages\uvicorn\main.py:18:    LOGGING_CONFIG,
.venv\Lib\site-packages\uvicorn\main.py:41:logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\main.py:201:    help="Logging configuration file. Supported formats: .ini, .json, .yaml.",
.venv\Lib\site-packages\uvicorn\main.py:221:    help="Enable/Disable colorized logging.",
.venv\Lib\site-packages\uvicorn\main.py:432:        log_config=LOGGING_CONFIG if log_config is None else log_config,
.venv\Lib\site-packages\uvicorn\main.py:493:    ] = LOGGING_CONFIG,
.venv\Lib\site-packages\uvicorn\main.py:573:        logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\main.py:574:        logger.warning(
.venv\Lib\site-packages\uvicorn\server.py:2:import logging
.venv\Lib\site-packages\uvicorn\server.py:34:logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\server.py:76:        logger.info(message, process_id, extra={"color_message": color_message})
.venv\Lib\site-packages\uvicorn\server.py:86:        logger.info(message, process_id, extra={"color_message": color_message})
.venv\Lib\site-packages\uvicorn\server.py:168:                logger.error(exc)
.venv\Lib\site-packages\uvicorn\server.py:190:            logger.info(
.venv\Lib\site-packages\uvicorn\server.py:196:            logger.info(
.venv\Lib\site-packages\uvicorn\server.py:218:            logger.info(
.venv\Lib\site-packages\uvicorn\server.py:264:        logger.info("Shutting down")
.venv\Lib\site-packages\uvicorn\server.py:284:            logger.error(
.venv\Lib\site-packages\uvicorn\server.py:302:            logger.info(msg)
.venv\Lib\site-packages\uvicorn\server.py:309:            logger.info(msg)
.venv\Lib\site-packages\uvicorn\workers.py:2:import logging
.venv\Lib\site-packages\uvicorn\workers.py:25:        logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\workers.py:26:        logger.handlers = self.log.error_log.handlers
.venv\Lib\site-packages\uvicorn\workers.py:27:        logger.setLevel(self.log.error_log.level)
.venv\Lib\site-packages\uvicorn\workers.py:28:        logger.propagate = False
.venv\Lib\site-packages\uvicorn\workers.py:30:        logger = logging.getLogger("uvicorn.access")
.venv\Lib\site-packages\uvicorn\workers.py:31:        logger.handlers = self.log.access_log.handlers
.venv\Lib\site-packages\uvicorn\workers.py:32:        logger.setLevel(self.log.access_log.level)
.venv\Lib\site-packages\uvicorn\workers.py:33:        logger.propagate = False
.venv\Lib\site-packages\uvicorn\_subprocess.py:72:    # Logging needs to be setup again for each child.
.venv\Lib\site-packages\uvicorn\_subprocess.py:73:    config.configure_logging()
.venv\Lib\site-packages\uvicorn\lifespan\on.py:2:import logging
.venv\Lib\site-packages\uvicorn\lifespan\on.py:35:        self.logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\lifespan\on.py:46:        self.logger.info("Waiting for application startup.")
.venv\Lib\site-packages\uvicorn\lifespan\on.py:57:            self.logger.error("Application startup failed. Exiting.")
.venv\Lib\site-packages\uvicorn\lifespan\on.py:60:            self.logger.info("Application startup complete.")
.venv\Lib\site-packages\uvicorn\lifespan\on.py:65:        self.logger.info("Waiting for application shutdown.")
.venv\Lib\site-packages\uvicorn\lifespan\on.py:73:            self.logger.error("Application shutdown failed. Exiting.")
.venv\Lib\site-packages\uvicorn\lifespan\on.py:76:            self.logger.info("Application shutdown complete.")
.venv\Lib\site-packages\uvicorn\lifespan\on.py:94:                self.logger.info(msg)
.venv\Lib\site-packages\uvicorn\lifespan\on.py:97:                self.logger.error(msg, exc_info=exc)
.venv\Lib\site-packages\uvicorn\lifespan\on.py:121:                self.logger.error(message["message"])
.venv\Lib\site-packages\uvicorn\lifespan\on.py:134:                self.logger.error(message["message"])
.venv\Lib\site-packages\uvicorn\loops\asyncio.py:2:import logging
.venv\Lib\site-packages\uvicorn\loops\asyncio.py:5:logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:1:import logging
.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:12:from uvicorn.logging import TRACE_LOG_LEVEL
.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:40:        self.logger = logging.getLogger("uvicorn.asgi")
.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:43:            self.logger.log(TRACE_LOG_LEVEL, message, *args, **kwargs)
.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:45:        self.logger.trace = trace  # type: ignore
.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:63:            self.logger.trace(  # type: ignore
.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:71:            self.logger.trace(  # type: ignore
.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:78:        self.logger.trace(log_text, prefix, task_counter, logged_scope)  # type: ignore
.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:83:            self.logger.trace(log_text, prefix, task_counter)  # type: ignore
.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:87:            self.logger.trace(log_text, prefix, task_counter)  # type: ignore
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:3:import logging
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:29:from uvicorn.logging import TRACE_LOG_LEVEL
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:72:        self.logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:73:        self.access_logger = logging.getLogger("uvicorn.access")
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:74:        self.access_log = self.access_logger.hasHandlers()
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:119:        if self.logger.level <= TRACE_LOG_LEVEL:
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:121:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection made", prefix)
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:126:        if self.logger.level <= TRACE_LOG_LEVEL:
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:128:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection lost", prefix)
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:172:                self.logger.warning(msg)
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:174:                self.logger.warning(msg)
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:190:                self.logger.warning(msg)
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:239:                    self.logger.warning(message)
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:276:        if self.logger.level <= TRACE_LOG_LEVEL:
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:278:            self.logger.log(TRACE_LOG_LEVEL, "%sUpgrading to WebSocket", prefix)
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:374:        logger: logging.Logger,
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:375:        access_logger: logging.Logger,
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:413:            self.logger.error(msg, exc_info=exc)
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:421:                self.logger.error(msg, result)
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:425:                self.logger.error(msg)
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:429:                self.logger.error(msg)
.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:478:                self.access_logger.info(
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:3:import logging
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:34:from uvicorn.logging import TRACE_LOG_LEVEL
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:81:        self.logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:82:        self.access_logger = logging.getLogger("uvicorn.access")
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:83:        self.access_log = self.access_logger.hasHandlers()
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:125:        if self.logger.level <= TRACE_LOG_LEVEL:
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:127:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection made", prefix)
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:132:        if self.logger.level <= TRACE_LOG_LEVEL:
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:134:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection lost", prefix)
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:173:            self.logger.warning(msg)
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:175:            self.logger.warning(msg)
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:189:            self.logger.warning(msg)
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:198:        if self.logger.level <= TRACE_LOG_LEVEL:
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:200:            self.logger.log(TRACE_LOG_LEVEL, "%sUpgrading to WebSocket", prefix)
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:283:            self.logger.warning(message)
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:389:        logger: logging.Logger,
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:390:        access_logger: logging.Logger,
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:431:            self.logger.error(msg, exc_info=exc)
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:439:                self.logger.error(msg, result)
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:443:                self.logger.error(msg)
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:447:                self.logger.error(msg)
.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:496:                self.access_logger.info(
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:3:import logging
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:36:from uvicorn.logging import TRACE_LOG_LEVEL
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:112:            logger=logging.getLogger("uvicorn.error"),
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:129:        if self.logger.isEnabledFor(TRACE_LOG_LEVEL):
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:131:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection made", prefix)
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:138:        if self.logger.isEnabledFor(TRACE_LOG_LEVEL):
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:140:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection lost", prefix)
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:251:            self.logger.error(msg, exc_info=exc)
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:261:                self.logger.error(msg)
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:266:                self.logger.error(msg, result)
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:276:                self.logger.info(
.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:296:                self.logger.info(
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:2:import logging
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:23:from uvicorn.logging import TRACE_LOG_LEVEL
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:47:        self.logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:88:        if self.logger.level <= TRACE_LOG_LEVEL:
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:90:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection made", prefix)
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:97:        if self.logger.level <= TRACE_LOG_LEVEL:
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:99:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection lost", prefix)
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:236:            self.logger.exception("Exception in ASGI application\n")
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:243:                self.logger.error(msg)
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:248:                self.logger.error(msg, result)
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:259:                self.logger.info(
.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:282:                self.logger.info(
.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:1:import logging
.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:21:logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:52:                logger.warning(
.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:77:        logger.info(message, extra={"color_message": color_message})
.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:115:        logger.info(message, extra={"color_message": color_message})
.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:1:import logging
.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:20:logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:53:        logger.info(message, extra={"color_message": color_message})
.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:74:        logger.info(message, extra={"color_message": color_message})
.venv\Lib\site-packages\uvicorn\supervisors\statreload.py:1:import logging
.venv\Lib\site-packages\uvicorn\supervisors\statreload.py:9:logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\supervisors\statreload.py:24:            logger.warning(
.venv\Lib\site-packages\uvicorn\supervisors\watchgodreload.py:1:import logging
.venv\Lib\site-packages\uvicorn\supervisors\watchgodreload.py:17:logger = logging.getLogger("uvicorn.error")
.venv\Lib\site-packages\uvicorn\supervisors\watchgodreload.py:91:                    logger.debug(
.venv\Lib\site-packages\uvicorn\supervisors\watchgodreload.py:112:                logger.info(
.venv\Lib\site-packages\virtualenv\info.py:3:import logging
.venv\Lib\site-packages\virtualenv\info.py:18:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\info.py:27:            LOGGER.debug("filesystem is %scase-sensitive", "" if _FS_CASE_SENSITIVE else "not ")
.venv\Lib\site-packages\virtualenv\info.py:50:            LOGGER.debug("symlink on filesystem does%s work", "" if can else " not")
.venv\Lib\site-packages\virtualenv\report.py:3:import logging
.venv\Lib\site-packages\virtualenv\report.py:7:    0: logging.CRITICAL,
.venv\Lib\site-packages\virtualenv\report.py:8:    1: logging.ERROR,
.venv\Lib\site-packages\virtualenv\report.py:9:    2: logging.WARNING,
.venv\Lib\site-packages\virtualenv\report.py:10:    3: logging.INFO,
.venv\Lib\site-packages\virtualenv\report.py:11:    4: logging.DEBUG,
.venv\Lib\site-packages\virtualenv\report.py:12:    5: logging.NOTSET,
.venv\Lib\site-packages\virtualenv\report.py:16:LOGGER = logging.getLogger()
.venv\Lib\site-packages\virtualenv\report.py:24:    if level <= logging.DEBUG:
.venv\Lib\site-packages\virtualenv\report.py:29:    formatter = logging.Formatter(msg_format)
.venv\Lib\site-packages\virtualenv\report.py:30:    stream_handler = logging.StreamHandler(stream=sys.stdout)
.venv\Lib\site-packages\virtualenv\report.py:32:    LOGGER.setLevel(logging.NOTSET)
.venv\Lib\site-packages\virtualenv\report.py:34:    LOGGER.addHandler(stream_handler)
.venv\Lib\site-packages\virtualenv\report.py:35:    level_name = logging.getLevelName(level)
.venv\Lib\site-packages\virtualenv\report.py:36:    LOGGER.debug("setup logging to %s", level_name)
.venv\Lib\site-packages\virtualenv\report.py:37:    logging.getLogger("distlib").setLevel(logging.ERROR)
.venv\Lib\site-packages\virtualenv\__main__.py:4:import logging
.venv\Lib\site-packages\virtualenv\__main__.py:9:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\__main__.py:22:        LOGGER.warning(LogSession(session, start))
.venv\Lib\site-packages\virtualenv\__main__.py:74:                LOGGER.error("%s: %s", type(exception).__name__, exception)  # noqa: TRY400
.venv\Lib\site-packages\virtualenv\__main__.py:78:            for handler in LOGGER.handlers:  # force flush of log messages before the trace is printed
.venv\Lib\site-packages\virtualenv\app_data\base.py:35:    def embed_update_log(self, distribution, for_py_version):
.venv\Lib\site-packages\virtualenv\app_data\na.py:28:    def embed_update_log(self, distribution, for_py_version):  # noqa: ARG002
.venv\Lib\site-packages\virtualenv\app_data\read_only.py:30:    def embed_update_log(self, distribution, for_py_version):
.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:28:import logging
.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:40:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:59:        LOGGER.debug("reset app data folder %s", self.lock.path)
.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:97:    def embed_update_log(self, distribution, for_py_version):
.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:132:            LOGGER.debug("got %s %s from %s", *self.msg_args)
.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:141:        LOGGER.debug("removed %s %s at %s", *self.msg_args)
.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:152:        LOGGER.debug("wrote %s %s at %s", *self.msg_args)
.venv\Lib\site-packages\virtualenv\app_data\via_tempdir.py:3:import logging
.venv\Lib\site-packages\virtualenv\app_data\via_tempdir.py:10:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\app_data\via_tempdir.py:19:        LOGGER.debug("created temporary app data folder %s", self.lock.path)
.venv\Lib\site-packages\virtualenv\app_data\via_tempdir.py:25:        LOGGER.debug("remove temporary app data folder %s", self.lock.path)
.venv\Lib\site-packages\virtualenv\app_data\via_tempdir.py:28:    def embed_update_log(self, distribution, for_py_version):
.venv\Lib\site-packages\virtualenv\app_data\__init__.py:5:import logging
.venv\Lib\site-packages\virtualenv\app_data\__init__.py:15:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\app_data\__init__.py:42:            LOGGER.debug("created app data folder %s", folder)
.venv\Lib\site-packages\virtualenv\app_data\__init__.py:44:            LOGGER.info("could not create app data folder %s due to %r", folder, exception)
.venv\Lib\site-packages\virtualenv\app_data\__init__.py:48:    LOGGER.debug("app data folder %s has no write access", folder)
.venv\Lib\site-packages\virtualenv\config\convert.py:3:import logging
.venv\Lib\site-packages\virtualenv\config\convert.py:7:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\config\convert.py:86:        LOGGER.warning("%s failed to convert %r as %r because %r", source, value, as_type, exception)
.venv\Lib\site-packages\virtualenv\config\ini.py:3:import logging
.venv\Lib\site-packages\virtualenv\config\ini.py:13:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\config\ini.py:49:            LOGGER.error("failed to read config file %s because %r", config_file, exception)
.venv\Lib\site-packages\virtualenv\config\ini.py:73:    def epilog(self):
.venv\Lib\site-packages\virtualenv\create\creator.py:4:import logging
.venv\Lib\site-packages\virtualenv\create\creator.py:23:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\create\creator.py:158:            LOGGER.debug("delete %s", self.dest)
.venv\Lib\site-packages\virtualenv\create\creator.py:215:        LOGGER.debug("debug via %r", LogCmd(cmd))
.venv\Lib\site-packages\virtualenv\create\pyenv_cfg.py:3:import logging
.venv\Lib\site-packages\virtualenv\create\pyenv_cfg.py:7:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\create\pyenv_cfg.py:35:        LOGGER.debug("write %s", self.path)
.venv\Lib\site-packages\virtualenv\create\pyenv_cfg.py:40:            LOGGER.debug("\t%s", line)
.venv\Lib\site-packages\virtualenv\create\via_global_ref\api.py:3:import logging
.venv\Lib\site-packages\virtualenv\create\via_global_ref\api.py:11:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\create\via_global_ref\api.py:98:            LOGGER.debug("create virtualenv import hook file %s", pth)
.venv\Lib\site-packages\virtualenv\create\via_global_ref\api.py:101:            LOGGER.debug("create %s", dest_path)
.venv\Lib\site-packages\virtualenv\create\via_global_ref\venv.py:3:import logging
.venv\Lib\site-packages\virtualenv\create\via_global_ref\venv.py:16:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\create\via_global_ref\venv.py:75:        LOGGER.info("using host built-in venv to create via %s", " ".join(cmd))
.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\mac_os.py:5:import logging
.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\mac_os.py:23:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\mac_os.py:120:        LOGGER.debug("change Mach-O for %s from %s to %s", exe, current, new)
.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\mac_os.py:123:        LOGGER.warning("Could not call _builtin_change_mac_o: %s. Trying to call install_name_tool instead.", e)
.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\mac_os.py:128:            logging.fatal("Could not call install_name_tool -- you must have Apple's development tools installed")
.venv\Lib\site-packages\virtualenv\discovery\builtin.py:3:import logging
.venv\Lib\site-packages\virtualenv\discovery\builtin.py:22:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\discovery\builtin.py:77:    LOGGER.info("find interpreter for spec %r", spec)
.venv\Lib\site-packages\virtualenv\discovery\builtin.py:84:        LOGGER.info("proposed %s", interpreter)
.venv\Lib\site-packages\virtualenv\discovery\builtin.py:86:            LOGGER.debug("accepted %s", interpreter)
.venv\Lib\site-packages\virtualenv\discovery\builtin.py:167:        LOGGER.debug(LazyPathDump(pos, path, env))
.venv\Lib\site-packages\virtualenv\discovery\cached_py_info.py:12:import logging
.venv\Lib\site-packages\virtualenv\discovery\cached_py_info.py:33:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\discovery\cached_py_info.py:55:        LOGGER.info("%s", result)
.venv\Lib\site-packages\virtualenv\discovery\cached_py_info.py:145:        LOGGER.debug("get interpreter info via cmd: %s", LogCmd(cmd))
.venv\Lib\site-packages\virtualenv\discovery\info.py:3:import logging
.venv\Lib\site-packages\virtualenv\discovery\info.py:9:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\discovery\info.py:20:            LOGGER.debug("filesystem is %scase-sensitive", "" if _FS_CASE_SENSITIVE else "not ")
.venv\Lib\site-packages\virtualenv\discovery\py_info.py:10:import logging
.venv\Lib\site-packages\virtualenv\discovery\py_info.py:22:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\discovery\py_info.py:498:                LOGGER.info("ignore %s due cannot resolve system due to %r", proposed.original_executable, exception)
.venv\Lib\site-packages\virtualenv\discovery\py_info.py:524:                    LOGGER.info("%r links back to itself via prefixes", target)
.venv\Lib\site-packages\virtualenv\discovery\py_info.py:528:                    LOGGER.error("%d: prefix=%s, info=%r", at, p, t)
.venv\Lib\site-packages\virtualenv\discovery\py_info.py:529:                LOGGER.error("%d: prefix=%s, info=%r", len(prefixes) + 1, prefix, target)
.venv\Lib\site-packages\virtualenv\discovery\py_info.py:544:            LOGGER.debug("discover exe from cache %s - exact %s: %r", prefix, exact, self._cache_exe_discovery[key])
.venv\Lib\site-packages\virtualenv\discovery\py_info.py:546:        LOGGER.debug("discover exe for %s in %s", self, prefix)
.venv\Lib\site-packages\virtualenv\discovery\py_info.py:562:            LOGGER.debug("no exact match found, chosen most similar of %s within base folders %s", info, folders)
.venv\Lib\site-packages\virtualenv\discovery\py_info.py:588:                LOGGER.debug("refused interpreter %s because %s differs %s != %s", executable, item, found, searched)
.venv\Lib\site-packages\virtualenv\discovery\windows\pep514.py:8:from logging import basicConfig, getLogger
.venv\Lib\site-packages\virtualenv\discovery\windows\pep514.py:155:    LOGGER.warning("PEP-514 violation in Windows Registry at %s error: %s", path, what)
.venv\Lib\site-packages\virtualenv\run\session.py:4:import logging
.venv\Lib\site-packages\virtualenv\run\session.py:6:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\run\session.py:52:        LOGGER.info("create virtual environment via %s", self.creator)
.venv\Lib\site-packages\virtualenv\run\session.py:54:        LOGGER.debug(_DEBUG_MARKER)
.venv\Lib\site-packages\virtualenv\run\session.py:55:        LOGGER.debug("%s", _Debug(self.creator))
.venv\Lib\site-packages\virtualenv\run\session.py:59:            LOGGER.info("add seed packages via %s", self.seeder)
.venv\Lib\site-packages\virtualenv\run\session.py:65:            LOGGER.info("add activators for %s", active)
.venv\Lib\site-packages\virtualenv\run\__init__.py:3:import logging
.venv\Lib\site-packages\virtualenv\run\__init__.py:20:def cli_run(args, options=None, setup_logging=True, env=None):  # noqa: FBT002
.venv\Lib\site-packages\virtualenv\run\__init__.py:26:    :param setup_logging: ``True`` if setup logging handlers, ``False`` to use handlers already registered
.venv\Lib\site-packages\virtualenv\run\__init__.py:31:    of_session = session_via_cli(args, options, setup_logging, env)
.venv\Lib\site-packages\virtualenv\run\__init__.py:37:def session_via_cli(args, options=None, setup_logging=True, env=None):  # noqa: FBT002
.venv\Lib\site-packages\virtualenv\run\__init__.py:44:    :param setup_logging: ``True`` if setup logging handlers, ``False`` to use handlers already registered
.venv\Lib\site-packages\virtualenv\run\__init__.py:49:    parser, elements = build_parser(args, options, setup_logging, env)
.venv\Lib\site-packages\virtualenv\run\__init__.py:63:def build_parser(args=None, options=None, setup_logging=True, env=None):  # noqa: FBT002
.venv\Lib\site-packages\virtualenv\run\__init__.py:73:    _do_report_setup(parser, args, setup_logging)
.venv\Lib\site-packages\virtualenv\run\__init__.py:147:def _do_report_setup(parser, args, setup_logging):
.venv\Lib\site-packages\virtualenv\run\__init__.py:148:    level_map = ", ".join(f"{logging.getLevelName(line)}={c}" for c, line in sorted(LEVELS.items()))
.venv\Lib\site-packages\virtualenv\run\__init__.py:152:        description=msg.format(logging.getLevelName(LEVELS[3]), level_map),
.venv\Lib\site-packages\virtualenv\run\__init__.py:157:    # do not configure logging if only help is requested, as no logging is required for this
.venv\Lib\site-packages\virtualenv\run\__init__.py:161:    if setup_logging:
.venv\Lib\site-packages\virtualenv\seed\embed\base_embed.py:3:import logging
.venv\Lib\site-packages\virtualenv\seed\embed\base_embed.py:11:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\seed\embed\base_embed.py:38:                LOGGER.warning(
.venv\Lib\site-packages\virtualenv\seed\embed\pip_invoke.py:3:import logging
.venv\Lib\site-packages\virtualenv\seed\embed\pip_invoke.py:11:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\seed\embed\pip_invoke.py:28:        LOGGER.debug("pip seed by running: %s", LogCmd(cmd, env))
.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\via_app_data.py:5:import logging
.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\via_app_data.py:20:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\via_app_data.py:51:                    LOGGER.debug("install %s from wheel %s via %s", name, wheel, installer_class.__name__)
.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\via_app_data.py:99:                    LOGGER.exception("fail")
.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\via_app_data.py:113:                LOGGER.error(msg)
.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\base.py:3:import logging
.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\base.py:17:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\base.py:45:        LOGGER.debug("generated console scripts %s", " ".join(i.name for i in consoles))
.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\base.py:49:        LOGGER.debug("build install image for %s to %s", self._wheel.name, self._image_dir)
.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\base.py:156:        LOGGER.debug("uninstall existing distribution %s from %s", dist.stem, dist_base)
.venv\Lib\site-packages\virtualenv\seed\wheels\acquire.py:5:import logging
.venv\Lib\site-packages\virtualenv\seed\wheels\acquire.py:15:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\seed\wheels\acquire.py:48:            add_wheel_to_update_log(wheel, for_py_version, app_data)
.venv\Lib\site-packages\virtualenv\seed\wheels\acquire.py:55:    LOGGER.debug("download wheel %s %s to %s", to_download, for_py_version, to_folder)
.venv\Lib\site-packages\virtualenv\seed\wheels\acquire.py:80:    LOGGER.debug("downloaded wheel %s", result.name)
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:6:import logging
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:25:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:49:        LOGGER.debug("using %supdated wheel %s", "periodically " if updated_wheel else "", updated_wheel)
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:72:    embed_update_log = app_data.embed_update_log(distribution, for_py_version)
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:81:def add_wheel_to_update_log(wheel, for_py_version, app_data):
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:82:    embed_update_log = app_data.embed_update_log(wheel.distribution, for_py_version)
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:83:    LOGGER.debug("adding %s information to %s", wheel.name, embed_update_log.file)
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:86:        LOGGER.warning("%s already present in %s", wheel.name, embed_update_log.file)
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:178:        raw_json = app_data.embed_update_log(distribution, for_py_version).read()
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:224:    LOGGER.info(
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:243:        LOGGER.debug("done %s %s with %s", distribution, for_py_version, versions)
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:262:    embed_update_log = app_data.embed_update_log(distribution, for_py_version)
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:301:        LOGGER.info("detected %s in %s", last, datetime.now(tz=timezone.utc) - download_time)
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:329:            LOGGER.error("could not load release date %s because %r", content, exception)  # noqa: TRY400
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:357:                LOGGER.error("failed to access %s because %r", url, exception)  # noqa: TRY400
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:359:        LOGGER.error("failed to access %s because %r", url, exception)  # noqa: TRY400
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:390:    LOGGER.warning(
.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:414:    LOGGER.warning(msg, *args)
.venv\Lib\site-packages\virtualenv\util\lock.py:5:import logging
.venv\Lib\site-packages\virtualenv\util\lock.py:14:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\util\lock.py:127:            LOGGER.debug("lock file %s present, will block until released", lock.lock_file)
.venv\Lib\site-packages\virtualenv\util\zipapp.py:3:import logging
.venv\Lib\site-packages\virtualenv\util\zipapp.py:9:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\util\zipapp.py:19:    LOGGER.debug("extract %s to %s", full_path, dest)
.venv\Lib\site-packages\virtualenv\util\path\_sync.py:3:import logging
.venv\Lib\site-packages\virtualenv\util\path\_sync.py:9:LOGGER = logging.getLogger(__name__)
.venv\Lib\site-packages\virtualenv\util\path\_sync.py:14:        LOGGER.debug("create folder %s", str(path))
.venv\Lib\site-packages\virtualenv\util\path\_sync.py:25:        LOGGER.debug("remove directory %s", dest)
.venv\Lib\site-packages\virtualenv\util\path\_sync.py:28:        LOGGER.debug("remove file %s", dest)
.venv\Lib\site-packages\virtualenv\util\path\_sync.py:34:    LOGGER.debug("symlink %s", _Debug(src, dest))
.venv\Lib\site-packages\virtualenv\util\path\_sync.py:42:    LOGGER.debug("copy %s", _Debug(src, dest))
.venv\Lib\site-packages\watchfiles\cli.py:2:import logging
.venv\Lib\site-packages\watchfiles\cli.py:15:logger = logging.getLogger('watchfiles.cli')
.venv\Lib\site-packages\watchfiles\cli.py:130:        log_level = logging.DEBUG
.venv\Lib\site-packages\watchfiles\cli.py:132:        log_level = getattr(logging, arg_namespace.verbosity.upper())
.venv\Lib\site-packages\watchfiles\cli.py:134:    hdlr = logging.StreamHandler()
.venv\Lib\site-packages\watchfiles\cli.py:136:    hdlr.setFormatter(logging.Formatter(fmt='[%(asctime)s] %(message)s', datefmt='%H:%M:%S'))
.venv\Lib\site-packages\watchfiles\cli.py:137:    wg_logger = logging.getLogger('watchfiles')
.venv\Lib\site-packages\watchfiles\cli.py:138:    wg_logger.addHandler(hdlr)
.venv\Lib\site-packages\watchfiles\cli.py:139:    wg_logger.setLevel(log_level)
.venv\Lib\site-packages\watchfiles\cli.py:147:        logger.debug('target_type=function, attempting import of "%s"', arg_namespace.target)
.venv\Lib\site-packages\watchfiles\cli.py:152:        logger.warning('--args is only used when the target is a function')
.venv\Lib\site-packages\watchfiles\cli.py:162:    logger.info(
.venv\Lib\site-packages\watchfiles\cli.py:176:        debug=log_level == logging.DEBUG,
.venv\Lib\site-packages\watchfiles\cli.py:210:            logger.warning('"--ignore-paths" argument ignored as "all" filter was selected')
.venv\Lib\site-packages\watchfiles\cli.py:218:        logger.warning('"--ignore-paths" argument ignored as filter is not a subclass of DefaultFilter')
.venv\Lib\site-packages\watchfiles\filters.py:1:import logging
.venv\Lib\site-packages\watchfiles\filters.py:8:logger = logging.getLogger('watchfiles.watcher')
.venv\Lib\site-packages\watchfiles\main.py:1:import logging
.venv\Lib\site-packages\watchfiles\main.py:15:logger = logging.getLogger('watchfiles.main')
.venv\Lib\site-packages\watchfiles\main.py:135:                    logger.debug('rust notify timeout, continuing')
.venv\Lib\site-packages\watchfiles\main.py:140:                    logger.warning('KeyboardInterrupt caught, stopping watch')
.venv\Lib\site-packages\watchfiles\main.py:150:                    logger.debug('all changes filtered out, raw_changes=%s', raw_changes)
.venv\Lib\site-packages\watchfiles\main.py:276:                    logger.debug('rust notify timeout, continuing')
.venv\Lib\site-packages\watchfiles\main.py:288:                    logger.debug('all changes filtered out, raw_changes=%s', raw_changes)
.venv\Lib\site-packages\watchfiles\main.py:302:    if logger.isEnabledFor(logging.INFO):  # pragma: no branch
.venv\Lib\site-packages\watchfiles\main.py:305:        if logger.isEnabledFor(logging.DEBUG):
.venv\Lib\site-packages\watchfiles\main.py:306:            logger.debug('%d change%s detected: %s', count, plural, changes)
.venv\Lib\site-packages\watchfiles\main.py:308:            logger.info('%d change%s detected', count, plural)
.venv\Lib\site-packages\watchfiles\run.py:3:import logging
.venv\Lib\site-packages\watchfiles\run.py:26:logger = logging.getLogger('watchfiles.main')
.venv\Lib\site-packages\watchfiles\run.py:128:    logger.debug('running "%s" as %s', target, target_type)
.venv\Lib\site-packages\watchfiles\run.py:134:        logger.debug('sleeping for %s seconds before watching for changes', grace_period)
.venv\Lib\site-packages\watchfiles\run.py:207:    logger.debug('running "%s" as %s', target, target_type)
.venv\Lib\site-packages\watchfiles\run.py:213:        logger.debug('sleeping for %s seconds before watching for changes', grace_period)
.venv\Lib\site-packages\watchfiles\run.py:277:            logger.warning('ignoring args and kwargs for "command" target')
.venv\Lib\site-packages\watchfiles\run.py:325:            logger.debug('stopping process...')
.venv\Lib\site-packages\watchfiles\run.py:334:                logger.warning('SIGINT timed out after %r seconds', sigint_timeout)
.venv\Lib\site-packages\watchfiles\run.py:338:                logger.warning('process has not terminated, sending SIGKILL')
.venv\Lib\site-packages\watchfiles\run.py:342:                logger.debug('process stopped')
.venv\Lib\site-packages\watchfiles\run.py:344:            logger.warning('process already dead, exit code: %d', self.exitcode)
.venv\Lib\site-packages\watchfiles\run.py:426:    logger.warning('received signal %s, raising KeyboardInterrupt', signal.Signals(signum))
.venv\Lib\site-packages\watchfiles\run.py:437:    logger.debug('registering handler for SIGTERM on watchfiles process %d', os.getpid())
.venv\Lib\site-packages\websockets\client.py:67:            defaults to ``logging.getLogger("websockets.client")``;
.venv\Lib\site-packages\websockets\client.py:68:            see the :doc:`logging guide <../../topics/logging>` for details.
.venv\Lib\site-packages\websockets\client.py:309:            self.logger.debug("> GET %s HTTP/1.1", request.path)
.venv\Lib\site-packages\websockets\client.py:311:                self.logger.debug("> %s: %s", key, value)
.venv\Lib\site-packages\websockets\client.py:331:                self.logger.debug("< HTTP/1.1 %d %s", code, phrase)
.venv\Lib\site-packages\websockets\client.py:333:                    self.logger.debug("< %s: %s", key, value)
.venv\Lib\site-packages\websockets\client.py:335:                    self.logger.debug("< [body] (%d bytes)", len(response.body))
.venv\Lib\site-packages\websockets\protocol.py:4:import logging
.venv\Lib\site-packages\websockets\protocol.py:81:            defaults to ``logging.getLogger("websockets.client")``
.venv\Lib\site-packages\websockets\protocol.py:82:            or ``logging.getLogger("websockets.server")``;
.venv\Lib\site-packages\websockets\protocol.py:83:            see the :doc:`logging guide <../../topics/logging>` for details.
.venv\Lib\site-packages\websockets\protocol.py:101:            logger = logging.getLogger(f"websockets.{side.name.lower()}")
.venv\Lib\site-packages\websockets\protocol.py:105:        # Track if DEBUG is enabled. Shortcut logging calls if it isn't.
.venv\Lib\site-packages\websockets\protocol.py:106:        self.debug = logger.isEnabledFor(logging.DEBUG)
.venv\Lib\site-packages\websockets\protocol.py:168:            self.logger.debug("= connection is %s", state.name)
.venv\Lib\site-packages\websockets\protocol.py:523:                        self.logger.debug("< EOF")
.venv\Lib\site-packages\websockets\protocol.py:548:                    self.logger.debug("< %s", frame)
.venv\Lib\site-packages\websockets\protocol.py:569:            self.logger.error("parser failed", exc_info=True)
.venv\Lib\site-packages\websockets\protocol.py:597:            self.logger.debug("< EOF")
.venv\Lib\site-packages\websockets\protocol.py:698:            self.logger.debug("> %s", frame)
.venv\Lib\site-packages\websockets\protocol.py:707:            self.logger.debug("> EOF")
.venv\Lib\site-packages\websockets\server.py:72:            defaults to ``logging.getLogger("websockets.client")``;
.venv\Lib\site-packages\websockets\server.py:73:            see the :doc:`logging guide <../../topics/logging>` for details.
.venv\Lib\site-packages\websockets\server.py:139:                self.logger.debug("! invalid origin", exc_info=True)
.venv\Lib\site-packages\websockets\server.py:148:                self.logger.debug("! invalid upgrade", exc_info=True)
.venv\Lib\site-packages\websockets\server.py:164:                self.logger.debug("! invalid handshake", exc_info=True)
.venv\Lib\site-packages\websockets\server.py:174:            self.logger.error("opening handshake failed", exc_info=True)
.venv\Lib\site-packages\websockets\server.py:197:        self.logger.info("connection open")
.venv\Lib\site-packages\websockets\server.py:522:        self.logger.info("connection rejected (%d %s)", status.value, status.phrase)
.venv\Lib\site-packages\websockets\server.py:535:            self.logger.debug("> HTTP/1.1 %d %s", code, phrase)
.venv\Lib\site-packages\websockets\server.py:537:                self.logger.debug("> %s: %s", key, value)
.venv\Lib\site-packages\websockets\server.py:539:                self.logger.debug("> [body] (%d bytes)", len(response.body))
.venv\Lib\site-packages\websockets\server.py:565:                self.logger.debug("< GET %s HTTP/1.1", request.path)
.venv\Lib\site-packages\websockets\server.py:567:                    self.logger.debug("< %s: %s", key, value)
.venv\Lib\site-packages\websockets\typing.py:4:import logging
.venv\Lib\site-packages\websockets\typing.py:31:LoggerLike = Union[logging.Logger, logging.LoggerAdapter]
.venv\Lib\site-packages\websockets\typing.py:32:"""Types accepted where a :class:`~logging.Logger` is expected."""
.venv\Lib\site-packages\websockets\legacy\client.py:5:import logging
.venv\Lib\site-packages\websockets\legacy\client.py:98:            logger = logging.getLogger("websockets.client")
.venv\Lib\site-packages\websockets\legacy\client.py:115:            self.logger.debug("> GET %s HTTP/1.1", path)
.venv\Lib\site-packages\websockets\legacy\client.py:117:                self.logger.debug("> %s: %s", key, value)
.venv\Lib\site-packages\websockets\legacy\client.py:144:            self.logger.debug("< HTTP/1.1 %d %s", status_code, reason)
.venv\Lib\site-packages\websockets\legacy\client.py:146:                self.logger.debug("< %s: %s", key, value)
.venv\Lib\site-packages\websockets\legacy\client.py:380:            It defaults to ``logging.getLogger("websockets.client")``.
.venv\Lib\site-packages\websockets\legacy\client.py:381:            See the :doc:`logging guide <../../topics/logging>` for details.
.venv\Lib\site-packages\websockets\legacy\client.py:542:            logger = logging.getLogger("websockets.client")
.venv\Lib\site-packages\websockets\legacy\client.py:605:                    self.logger.info(
.venv\Lib\site-packages\websockets\legacy\client.py:612:                    self.logger.info(
.venv\Lib\site-packages\websockets\legacy\protocol.py:6:import logging
.venv\Lib\site-packages\websockets\legacy\protocol.py:150:            It defaults to ``logging.getLogger("websockets.protocol")``.
.venv\Lib\site-packages\websockets\legacy\protocol.py:151:            See the :doc:`logging guide <../../topics/logging>` for details.
.venv\Lib\site-packages\websockets\legacy\protocol.py:224:            logger = logging.getLogger("websockets.protocol")
.venv\Lib\site-packages\websockets\legacy\protocol.py:225:        self.logger: LoggerLike = logging.LoggerAdapter(logger, {"websocket": self})
.venv\Lib\site-packages\websockets\legacy\protocol.py:228:        # Track if DEBUG is enabled. Shortcut logging calls if it isn't.
.venv\Lib\site-packages\websockets\legacy\protocol.py:229:        self.debug = logger.isEnabledFor(logging.DEBUG)
.venv\Lib\site-packages\websockets\legacy\protocol.py:256:            self.logger.debug("= connection is CONNECTING")
.venv\Lib\site-packages\websockets\legacy\protocol.py:357:            self.logger.debug("= connection is OPEN")
.venv\Lib\site-packages\websockets\legacy\protocol.py:988:            # If fail_connection() cancels this task, avoid logging the error
.venv\Lib\site-packages\websockets\legacy\protocol.py:1019:            self.logger.error("data transfer failed", exc_info=True)
.venv\Lib\site-packages\websockets\legacy\protocol.py:1172:            self.logger.debug("< %s", frame)
.venv\Lib\site-packages\websockets\legacy\protocol.py:1178:            self.logger.debug("> %s", frame)
.venv\Lib\site-packages\websockets\legacy\protocol.py:1227:                self.logger.debug("= connection is CLOSING")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1262:                self.logger.debug("% sending keepalive ping")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1269:                        self.logger.debug("% received keepalive pong")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1272:                            self.logger.debug("! timed out waiting for keepalive pong")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1283:            self.logger.error("keepalive ping failed", exc_info=True)
.venv\Lib\site-packages\websockets\legacy\protocol.py:1314:                    self.logger.debug("! timed out waiting for TCP close")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1319:                    self.logger.debug("x half-closing TCP connection")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1332:                    self.logger.debug("! timed out waiting for TCP close")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1352:            self.logger.debug("x closing TCP connection")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1358:            self.logger.debug("! timed out waiting for TCP close")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1362:            self.logger.debug("x aborting TCP connection")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1412:            self.logger.debug("! failing connection with code %d", code)
.venv\Lib\site-packages\websockets\legacy\protocol.py:1436:                self.logger.debug("= connection is CLOSING")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1465:            # nothing, but it prevents logging the exception.
.venv\Lib\site-packages\websockets\legacy\protocol.py:1497:        self.logger.debug("= connection is CLOSED")
.venv\Lib\site-packages\websockets\legacy\protocol.py:1627:                websocket.logger.warning(
.venv\Lib\site-packages\websockets\legacy\protocol.py:1639:                websocket.logger.warning(
.venv\Lib\site-packages\websockets\legacy\server.py:8:import logging
.venv\Lib\site-packages\websockets\legacy\server.py:122:            logger = logging.getLogger("websockets.server")
.venv\Lib\site-packages\websockets\legacy\server.py:182:                        self.logger.debug("! invalid origin", exc_info=True)
.venv\Lib\site-packages\websockets\legacy\server.py:190:                        self.logger.debug("! invalid upgrade", exc_info=True)
.venv\Lib\site-packages\websockets\legacy\server.py:203:                        self.logger.debug("! invalid handshake", exc_info=True)
.venv\Lib\site-packages\websockets\legacy\server.py:210:                    self.logger.error("opening handshake failed", exc_info=True)
.venv\Lib\site-packages\websockets\legacy\server.py:229:                self.logger.info(
.venv\Lib\site-packages\websockets\legacy\server.py:238:                self.logger.error("connection handler failed", exc_info=True)
.venv\Lib\site-packages\websockets\legacy\server.py:248:                self.logger.error("closing handshake failed", exc_info=True)
.venv\Lib\site-packages\websockets\legacy\server.py:264:            self.logger.info("connection closed")
.venv\Lib\site-packages\websockets\legacy\server.py:286:            self.logger.debug("< GET %s HTTP/1.1", path)
.venv\Lib\site-packages\websockets\legacy\server.py:288:                self.logger.debug("< %s: %s", key, value)
.venv\Lib\site-packages\websockets\legacy\server.py:307:            self.logger.debug("> HTTP/1.1 %d %s", status.value, status.phrase)
.venv\Lib\site-packages\websockets\legacy\server.py:309:                self.logger.debug("> %s: %s", key, value)
.venv\Lib\site-packages\websockets\legacy\server.py:311:                self.logger.debug("> [body] (%d bytes)", len(body))
.venv\Lib\site-packages\websockets\legacy\server.py:642:        self.logger.info("connection open")
.venv\Lib\site-packages\websockets\legacy\server.py:662:            It defaults to ``logging.getLogger("websockets.server")``.
.venv\Lib\site-packages\websockets\legacy\server.py:663:            See the :doc:`logging guide <../../topics/logging>` for details.
.venv\Lib\site-packages\websockets\legacy\server.py:669:            logger = logging.getLogger("websockets.server")
.venv\Lib\site-packages\websockets\legacy\server.py:707:            self.logger.info("server listening on %s", name)
.venv\Lib\site-packages\websockets\legacy\server.py:759:        self.logger.info("server closing")
.venv\Lib\site-packages\websockets\legacy\server.py:793:        self.logger.info("server closed")
.venv\Lib\site-packages\websockets\legacy\server.py:925:            It defaults to ``logging.getLogger("websockets.server")``.
.venv\Lib\site-packages\websockets\legacy\server.py:926:            See the :doc:`logging guide <../../topics/logging>` for details.
.venv\Lib\site-packages\websockets\sync\client.py:147:    # Logging
.venv\Lib\site-packages\websockets\sync\client.py:193:            It defaults to ``logging.getLogger("websockets.client")``.
.venv\Lib\site-packages\websockets\sync\client.py:194:            See the :doc:`logging guide <../../topics/logging>` for details.
.venv\Lib\site-packages\websockets\sync\connection.py:4:import logging
.venv\Lib\site-packages\websockets\sync\connection.py:24:logger = logging.getLogger(__name__)
.venv\Lib\site-packages\websockets\sync\connection.py:53:        # Inject reference to this instance in the protocol's logger.
.venv\Lib\site-packages\websockets\sync\connection.py:54:        self.protocol.logger = logging.LoggerAdapter(
.venv\Lib\site-packages\websockets\sync\connection.py:541:                        self.logger.debug("error while receiving data", exc_info=True)
.venv\Lib\site-packages\websockets\sync\connection.py:566:                            self.logger.debug("error while sending data", exc_info=True)
.venv\Lib\site-packages\websockets\sync\connection.py:610:            self.logger.error("unexpected internal error", exc_info=True)
.venv\Lib\site-packages\websockets\sync\connection.py:658:                    self.logger.error("unexpected internal error", exc_info=True)
.venv\Lib\site-packages\websockets\sync\connection.py:682:                            self.logger.debug("error while sending data", exc_info=True)
.venv\Lib\site-packages\websockets\sync\server.py:4:import logging
.venv\Lib\site-packages\websockets\sync\server.py:109:                    self.logger.error("opening handshake failed", exc_info=True)
.venv\Lib\site-packages\websockets\sync\server.py:129:                    self.logger.error("opening handshake failed", exc_info=True)
.venv\Lib\site-packages\websockets\sync\server.py:203:            logger = logging.getLogger("websockets.server")
.venv\Lib\site-packages\websockets\sync\server.py:304:    # Logging
.venv\Lib\site-packages\websockets\sync\server.py:379:            It defaults to ``logging.getLogger("websockets.server")``. See the
.venv\Lib\site-packages\websockets\sync\server.py:380:            :doc:`logging guide <../../topics/logging>` for details.
.venv\Lib\site-packages\websockets\sync\server.py:501:            protocol.logger.error("connection handler failed", exc_info=True)
.venv\Lib\site-packages\_pytest\compat.py:84:    importing asyncio directly, which in turns also initializes the "logging"
.venv\Lib\site-packages\_pytest\hookspec.py:304:# logging hooks for collection
.venv\Lib\site-packages\_pytest\junitxml.py:169:        if self.xml.logging == "no":
.venv\Lib\site-packages\_pytest\junitxml.py:172:        if self.xml.logging in ["log", "all"]:
.venv\Lib\site-packages\_pytest\junitxml.py:174:        if self.xml.logging in ["system-out", "out-err", "all"]:
.venv\Lib\site-packages\_pytest\junitxml.py:178:        if self.xml.logging in ["system-err", "out-err", "all"]:
.venv\Lib\site-packages\_pytest\junitxml.py:406:        "junit_logging",
.venv\Lib\site-packages\_pytest\junitxml.py:438:            config.getini("junit_logging"),
.venv\Lib\site-packages\_pytest\junitxml.py:470:        logging: str = "no",
.venv\Lib\site-packages\_pytest\junitxml.py:479:        self.logging = logging
.venv\Lib\site-packages\_pytest\logging.py:3:import logging
.venv\Lib\site-packages\_pytest\logging.py:12:from logging import LogRecord
.venv\Lib\site-packages\_pytest\logging.py:43:    logging_StreamHandler = logging.StreamHandler[StringIO]
.venv\Lib\site-packages\_pytest\logging.py:47:    logging_StreamHandler = logging.StreamHandler
.venv\Lib\site-packages\_pytest\logging.py:53:caplog_records_key = StashKey[Dict[str, List[logging.LogRecord]]]()
.venv\Lib\site-packages\_pytest\logging.py:60:class DatetimeFormatter(logging.Formatter):
.venv\Lib\site-packages\_pytest\logging.py:61:    """A logging formatter which formats record with
.venv\Lib\site-packages\_pytest\logging.py:74:        # Use `logging.Formatter` for non-microsecond formats
.venv\Lib\site-packages\_pytest\logging.py:79:    """A logging formatter which colorizes the %(levelname)..s part of the
.venv\Lib\site-packages\_pytest\logging.py:83:        logging.CRITICAL: {"red"},
.venv\Lib\site-packages\_pytest\logging.py:84:        logging.ERROR: {"red", "bold"},
.venv\Lib\site-packages\_pytest\logging.py:85:        logging.WARNING: {"yellow"},
.venv\Lib\site-packages\_pytest\logging.py:86:        logging.WARN: {"yellow"},
.venv\Lib\site-packages\_pytest\logging.py:87:        logging.INFO: {"green"},
.venv\Lib\site-packages\_pytest\logging.py:88:        logging.DEBUG: {"purple"},
.venv\Lib\site-packages\_pytest\logging.py:89:        logging.NOTSET: set(),
.venv\Lib\site-packages\_pytest\logging.py:106:            Log level to apply a style to, e.g. ``logging.INFO``.
.venv\Lib\site-packages\_pytest\logging.py:122:        formatted_levelname = levelname_fmt % {"levelname": logging.getLevelName(level)}
.venv\Lib\site-packages\_pytest\logging.py:133:    def format(self, record: logging.LogRecord) -> str:
.venv\Lib\site-packages\_pytest\logging.py:139:class PercentStyleMultiline(logging.PercentStyle):
.venv\Lib\site-packages\_pytest\logging.py:140:    """A logging style with special support for multiline messages.
.venv\Lib\site-packages\_pytest\logging.py:155:        extra={"auto_indent": [value]} to the call to logging.log() or
.venv\Lib\site-packages\_pytest\logging.py:205:    def format(self, record: logging.LogRecord) -> str:
.venv\Lib\site-packages\_pytest\logging.py:208:                # Passed in from the "extra={}" kwarg on the call to logging.log().
.venv\Lib\site-packages\_pytest\logging.py:222:                    # Optimizes logging by allowing a fixed indentation.
.venv\Lib\site-packages\_pytest\logging.py:240:    group = parser.getgroup("logging")
.venv\Lib\site-packages\_pytest\logging.py:263:        help="Log format used by the logging module",
.venv\Lib\site-packages\_pytest\logging.py:269:        help="Log date format used by the logging module",
.venv\Lib\site-packages\_pytest\logging.py:275:        help='Enable log display during test run (also known as "live logging")',
.venv\Lib\site-packages\_pytest\logging.py:278:        "--log-cli-level", dest="log_cli_level", default=None, help="CLI logging level"
.venv\Lib\site-packages\_pytest\logging.py:284:        help="Log format used by the logging module",
.venv\Lib\site-packages\_pytest\logging.py:290:        help="Log date format used by the logging module",
.venv\Lib\site-packages\_pytest\logging.py:296:        help="Path to a file when logging will be written to",
.venv\Lib\site-packages\_pytest\logging.py:302:        help="Log file logging level",
.venv\Lib\site-packages\_pytest\logging.py:308:        help="Log format used by the logging module",
.venv\Lib\site-packages\_pytest\logging.py:314:        help="Log date format used by the logging module",
.venv\Lib\site-packages\_pytest\logging.py:320:        help="Auto-indent multiline messages passed to the logging module. Accepts true|on, false|off or an integer.",
.venv\Lib\site-packages\_pytest\logging.py:331:_HandlerType = TypeVar("_HandlerType", bound=logging.Handler)
.venv\Lib\site-packages\_pytest\logging.py:336:    """Context manager that prepares the whole logging machinery properly."""
.venv\Lib\site-packages\_pytest\logging.py:345:        root_logger = logging.getLogger()
.venv\Lib\site-packages\_pytest\logging.py:348:        root_logger.addHandler(self.handler)
.venv\Lib\site-packages\_pytest\logging.py:350:            self.orig_level = root_logger.level
.venv\Lib\site-packages\_pytest\logging.py:351:            root_logger.setLevel(min(self.orig_level, self.level))
.venv\Lib\site-packages\_pytest\logging.py:355:        root_logger = logging.getLogger()
.venv\Lib\site-packages\_pytest\logging.py:357:            root_logger.setLevel(self.orig_level)
.venv\Lib\site-packages\_pytest\logging.py:358:        root_logger.removeHandler(self.handler)
.venv\Lib\site-packages\_pytest\logging.py:361:class LogCaptureHandler(logging_StreamHandler):
.venv\Lib\site-packages\_pytest\logging.py:362:    """A logging handler that stores log records and the log text."""
.venv\Lib\site-packages\_pytest\logging.py:367:        self.records: List[logging.LogRecord] = []
.venv\Lib\site-packages\_pytest\logging.py:369:    def emit(self, record: logging.LogRecord) -> None:
.venv\Lib\site-packages\_pytest\logging.py:382:    def handleError(self, record: logging.LogRecord) -> None:
.venv\Lib\site-packages\_pytest\logging.py:383:        if logging.raiseExceptions:
.venv\Lib\site-packages\_pytest\logging.py:385:            # The default behavior of logging is to print "Logging error"
.venv\Lib\site-packages\_pytest\logging.py:401:        self._initial_disabled_logging_level: Optional[int] = None
.venv\Lib\site-packages\_pytest\logging.py:406:        This restores the log levels and the disabled logging levels changed by :meth:`set_level`.
.venv\Lib\site-packages\_pytest\logging.py:412:            logger = logging.getLogger(logger_name)
.venv\Lib\site-packages\_pytest\logging.py:413:            logger.setLevel(level)
.venv\Lib\site-packages\_pytest\logging.py:414:        # Disable logging at the original disabled logging level.
.venv\Lib\site-packages\_pytest\logging.py:415:        if self._initial_disabled_logging_level is not None:
.venv\Lib\site-packages\_pytest\logging.py:416:            logging.disable(self._initial_disabled_logging_level)
.venv\Lib\site-packages\_pytest\logging.py:417:            self._initial_disabled_logging_level = None
.venv\Lib\site-packages\_pytest\logging.py:421:        """Get the logging handler used by the fixture."""
.venv\Lib\site-packages\_pytest\logging.py:426:    ) -> List[logging.LogRecord]:
.venv\Lib\site-packages\_pytest\logging.py:427:        """Get the logging records for one of the possible test phases.
.venv\Lib\site-packages\_pytest\logging.py:445:    def records(self) -> List[logging.LogRecord]:
.venv\Lib\site-packages\_pytest\logging.py:471:        Note that traceback or stack info (from :func:`logging.exception` or
.venv\Lib\site-packages\_pytest\logging.py:472:        the `exc_info` or `stack_info` arguments to the logging functions) is
.venv\Lib\site-packages\_pytest\logging.py:483:    def _force_enable_logging(
.venv\Lib\site-packages\_pytest\logging.py:484:        self, level: Union[int, str], logger_obj: logging.Logger
.venv\Lib\site-packages\_pytest\logging.py:486:        """Enable the desired logging level if the global level was disabled via ``logging.disabled``.
.venv\Lib\site-packages\_pytest\logging.py:488:        Only enables logging levels greater than or equal to the requested ``level``.
.venv\Lib\site-packages\_pytest\logging.py:494:            All logging is enabled if a non-standard logging level string is supplied.
.venv\Lib\site-packages\_pytest\logging.py:495:            Valid level strings are in :data:`logging._nameToLevel`.
.venv\Lib\site-packages\_pytest\logging.py:498:        :return: The original disabled logging level.
.venv\Lib\site-packages\_pytest\logging.py:503:            # Try to translate the level string to an int for `logging.disable()`
.venv\Lib\site-packages\_pytest\logging.py:504:            level = logging.getLevelName(level)
.venv\Lib\site-packages\_pytest\logging.py:507:            # The level provided was not valid, so just un-disable all logging.
.venv\Lib\site-packages\_pytest\logging.py:508:            logging.disable(logging.NOTSET)
.venv\Lib\site-packages\_pytest\logging.py:511:            # https://docs.python.org/3/library/logging.html#logging-levels
.venv\Lib\site-packages\_pytest\logging.py:512:            disable_level = max(level - 10, logging.NOTSET)
.venv\Lib\site-packages\_pytest\logging.py:513:            logging.disable(disable_level)
.venv\Lib\site-packages\_pytest\logging.py:520:        Logging messages which are less severe than this level will not be captured.
.venv\Lib\site-packages\_pytest\logging.py:526:        Will enable the requested logging level if it was disabled via :meth:`logging.disable`.
.venv\Lib\site-packages\_pytest\logging.py:529:        :param logger: The logger to update. If not given, the root logger.
.venv\Lib\site-packages\_pytest\logging.py:531:        logger_obj = logging.getLogger(logger)
.venv\Lib\site-packages\_pytest\logging.py:538:        initial_disabled_logging_level = self._force_enable_logging(level, logger_obj)
.venv\Lib\site-packages\_pytest\logging.py:539:        if self._initial_disabled_logging_level is None:
.venv\Lib\site-packages\_pytest\logging.py:540:            self._initial_disabled_logging_level = initial_disabled_logging_level
.venv\Lib\site-packages\_pytest\logging.py:550:        Will enable the requested logging level if it was disabled via :meth:`logging.disable`.
.venv\Lib\site-packages\_pytest\logging.py:553:        :param logger: The logger to update. If not given, the root logger.
.venv\Lib\site-packages\_pytest\logging.py:555:        logger_obj = logging.getLogger(logger)
.venv\Lib\site-packages\_pytest\logging.py:560:        original_disable_level = self._force_enable_logging(level, logger_obj)
.venv\Lib\site-packages\_pytest\logging.py:566:            logging.disable(original_disable_level)
.venv\Lib\site-packages\_pytest\logging.py:570:def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:
.venv\Lib\site-packages\_pytest\logging.py:577:    * caplog.records         -> list of logging.LogRecord instances
.venv\Lib\site-packages\_pytest\logging.py:599:        return int(getattr(logging, log_level, log_level))
.venv\Lib\site-packages\_pytest\logging.py:601:        # Python logging does not recognise this as a logging level
.venv\Lib\site-packages\_pytest\logging.py:603:            "'{}' is not recognized as a logging level name for "
.venv\Lib\site-packages\_pytest\logging.py:605:            "logging level num instead.".format(log_level, setting_name)
.venv\Lib\site-packages\_pytest\logging.py:612:    config.pluginmanager.register(LoggingPlugin(config), "logging-plugin")
.venv\Lib\site-packages\_pytest\logging.py:615:class LoggingPlugin:
.venv\Lib\site-packages\_pytest\logging.py:616:    """Attaches to the logging module and captures log messages for each test."""
.venv\Lib\site-packages\_pytest\logging.py:626:        # Report logging.
.venv\Lib\site-packages\_pytest\logging.py:638:        # File logging.
.venv\Lib\site-packages\_pytest\logging.py:657:        # CLI/live logging.
.venv\Lib\site-packages\_pytest\logging.py:666:            # if capturemanager plugin is disabled, live logging still works.
.venv\Lib\site-packages\_pytest\logging.py:668:                _LiveLoggingStreamHandler, _LiveLoggingNullHandler
.venv\Lib\site-packages\_pytest\logging.py:669:            ] = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)
.venv\Lib\site-packages\_pytest\logging.py:671:            self.log_cli_handler = _LiveLoggingNullHandler()
.venv\Lib\site-packages\_pytest\logging.py:685:            logger = logging.getLogger(name)
.venv\Lib\site-packages\_pytest\logging.py:686:            logger.disabled = True
.venv\Lib\site-packages\_pytest\logging.py:694:            formatter: logging.Formatter = ColoredLevelFormatter(
.venv\Lib\site-packages\_pytest\logging.py:707:        """Set the filename parameter for Logging.FileHandler().
.venv\Lib\site-packages\_pytest\logging.py:729:        """Return whether live logging is enabled."""
.venv\Lib\site-packages\_pytest\logging.py:805:        empty: Dict[str, List[logging.LogRecord]] = {}
.venv\Lib\site-packages\_pytest\logging.py:838:        # (logging.shutdown might have lost the weakref?!)
.venv\Lib\site-packages\_pytest\logging.py:842:class _FileHandler(logging.FileHandler):
.venv\Lib\site-packages\_pytest\logging.py:843:    """A logging FileHandler with pytest tweaks."""
.venv\Lib\site-packages\_pytest\logging.py:845:    def handleError(self, record: logging.LogRecord) -> None:
.venv\Lib\site-packages\_pytest\logging.py:850:class _LiveLoggingStreamHandler(logging_StreamHandler):
.venv\Lib\site-packages\_pytest\logging.py:851:    """A logging StreamHandler used by the live logging feature: it will
.venv\Lib\site-packages\_pytest\logging.py:854:    During live logging we must also explicitly disable stdout/stderr
.venv\Lib\site-packages\_pytest\logging.py:885:    def emit(self, record: logging.LogRecord) -> None:
.venv\Lib\site-packages\_pytest\logging.py:904:    def handleError(self, record: logging.LogRecord) -> None:
.venv\Lib\site-packages\_pytest\logging.py:909:class _LiveLoggingNullHandler(logging.NullHandler):
.venv\Lib\site-packages\_pytest\logging.py:910:    """A logging handler used when live logging is disabled."""
.venv\Lib\site-packages\_pytest\logging.py:918:    def handleError(self, record: logging.LogRecord) -> None:
.venv\Lib\site-packages\_pytest\pytester.py:1613:                    self._log("matched: ", repr(line))
.venv\Lib\site-packages\_pytest\pytester.py:1617:                self._log(msg)
.venv\Lib\site-packages\_pytest\pytester.py:1630:    def _log(self, *args) -> None:
.venv\Lib\site-packages\_pytest\pytester.py:1709:                    self._log("exact match:", repr(line))
.venv\Lib\site-packages\_pytest\pytester.py:1713:                    self._log("%s:" % match_nickname, repr(line))
.venv\Lib\site-packages\_pytest\pytester.py:1714:                    self._log(
.venv\Lib\site-packages\_pytest\pytester.py:1722:                        self._log(msg)
.venv\Lib\site-packages\_pytest\pytester.py:1723:                        self._log(
.venv\Lib\site-packages\_pytest\pytester.py:1728:                        self._log(
.venv\Lib\site-packages\_pytest\pytester.py:1732:                    self._log("{:>{width}}".format("and:", width=wnick), repr(nextline))
.venv\Lib\site-packages\_pytest\pytester.py:1736:                self._log(msg)
.venv\Lib\site-packages\_pytest\pytester.py:1771:                self._log(msg)
.venv\Lib\site-packages\_pytest\pytester.py:1772:                self._log("{:>{width}}".format("with:", width=wnick), repr(line))
.venv\Lib\site-packages\_pytest\pytester.py:1776:                    self._log("{:>{width}}".format("nomatch:", width=wnick), repr(pat))
.venv\Lib\site-packages\_pytest\pytester.py:1778:                self._log("{:>{width}}".format("and:", width=wnick), repr(line))
.venv\Lib\site-packages\_pytest\reports.py:117:    def caplog(self) -> str:
.venv\Lib\site-packages\_pytest\reports.py:299:        #: from ``stdout``, ``stderr``, and intercepted logging events. May
.venv\Lib\site-packages\_pytest\reports.py:418:        #: from ``stdout``, ``stderr``, and intercepted logging events. May
.venv\Lib\site-packages\_pytest\config\__init__.py:260:    "logging",
scripts\mcp\.venv\Lib\site-packages\typing_extensions.py:1808:           def add_logging(f: Callable[P, T]) -> Callable[P, T]:
scripts\mcp\.venv\Lib\site-packages\typing_extensions.py:1809:               '''A type-safe decorator to add logging to a function.'''
scripts\mcp\.venv\Lib\site-packages\typing_extensions.py:1811:                   logging.info(f'{f.__name__} was called')
scripts\mcp\.venv\Lib\site-packages\typing_extensions.py:1815:           @add_logging
scripts\mcp\.venv\Lib\site-packages\anyio\streams\tls.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\anyio\streams\tls.py:332:            logging.getLogger(__name__).exception(
scripts\mcp\.venv\Lib\site-packages\click\core.py:1105:        self.format_epilog(ctx, formatter)
scripts\mcp\.venv\Lib\site-packages\click\core.py:1143:    def format_epilog(self, ctx: Context, formatter: HelpFormatter) -> None:
scripts\mcp\.venv\Lib\site-packages\dotenv\main.py:2:import logging
scripts\mcp\.venv\Lib\site-packages\dotenv\main.py:21:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\dotenv\main.py:27:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\dotenv\main.py:61:                logger.info(
scripts\mcp\.venv\Lib\site-packages\dotenv\main.py:112:            logger.warning("Key %s not found in %s.", key, self.dotenv_path)
scripts\mcp\.venv\Lib\site-packages\dotenv\main.py:213:        logger.warning("Can't delete from %s - it doesn't exist.", dotenv_path)
scripts\mcp\.venv\Lib\site-packages\dotenv\main.py:225:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\httpcore\_trace.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\httpcore\_trace.py:15:        logger: logging.Logger,
scripts\mcp\.venv\Lib\site-packages\httpcore\_trace.py:24:        self.debug = self.logger.isEnabledFor(logging.DEBUG)
scripts\mcp\.venv\Lib\site-packages\httpcore\_trace.py:28:        self.prefix = self.logger.name.split(".")[-1]
scripts\mcp\.venv\Lib\site-packages\httpcore\_trace.py:47:            self.logger.debug(message)
scripts\mcp\.venv\Lib\site-packages\httpcore\_trace.py:87:            self.logger.debug(message)
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\connection.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\connection.py:22:logger = logging.getLogger("httpcore.connection")
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\http11.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\http11.py:25:logger = logging.getLogger("httpcore.http11")
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\http2.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\http2.py:26:logger = logging.getLogger("httpcore.http2")
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\http_proxy.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\http_proxy.py:32:logger = logging.getLogger("httpcore.proxy")
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:19:logger = logging.getLogger("httpcore.socks")
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\connection.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\connection.py:22:logger = logging.getLogger("httpcore.connection")
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\http11.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\http11.py:25:logger = logging.getLogger("httpcore.http11")
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\http2.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\http2.py:26:logger = logging.getLogger("httpcore.http2")
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\http_proxy.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\http_proxy.py:32:logger = logging.getLogger("httpcore.proxy")
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:19:logger = logging.getLogger("httpcore.socks")
scripts\mcp\.venv\Lib\site-packages\httpx\_client.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\httpx\_client.py:117:logger = logging.getLogger("httpx")
scripts\mcp\.venv\Lib\site-packages\httpx\_client.py:1025:        logger.info(
scripts\mcp\.venv\Lib\site-packages\httpx\_client.py:1740:        logger.info(
scripts\mcp\.venv\Lib\site-packages\idna\intranges.py:5:in the original list?" in time O(log(# runs)).
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:132:def log(level, what):
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:276:        log(2, f"Deleted old directory '{name}'")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:281:    log(2, f"Creating new directory '{name}' in {iis_dir.Name}...")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:301:    log(2, "Setting directory options...")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:328:    log(1, f"Configured Virtual Directory: {params.Name}")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:397:        log(2, f"Deleted old filter '{filterParams.Name}'")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:401:    log(2, "Created new ISAPI filter...")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:412:    log(1, f"Configured Filter: {filterParams.Name}")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:425:        log(2, f"ISAPI filter path '{ob_path}' did not exist.")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:430:        log(2, f"Deleted ISAPI filter '{filterParams.Name}'")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:435:        log(2, f"ISAPI filter '{filterParams.Name}' did not exist.")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:443:    log(1, f"Deleted Filter: {filterParams.Name}")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:458:        log(2, f"Added extension file '{module}' ({desc})")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:462:        log(2, f"Failed to add extension file '{module}': {details}")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:486:        log(2, "Deleted extension file record for '%s'" % module)
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:488:        log(2, f"Failed to remove extension file '{module}': {details}")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:524:        log(2, f"Updating {template}->{dll_name}")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:528:        log(2, f"{dll_name} is up to date.")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:560:        log(2, "VirtualDirectory '%s' did not exist" % params.Name)
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:568:            log(2, f"AppUnLoad() for {params.Name} failed: {exc_val}")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:573:            log(1, f"Deleted Virtual Directory: {params.Name}")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:576:            log(1, f"Failed to remove directory {params.Name}: {exc_val}")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:673:    log(1, "Installation complete.")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:681:    log(1, "Uninstallation complete.")
scripts\mcp\.venv\Lib\site-packages\isapi\install.py:748:            log(
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:283:class LoggingCapability(BaseModel):
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:284:    """Capability for logging operations."""
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:300:    logging: LoggingCapability | None = None
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:905:LoggingLevel = Literal["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:909:    """Parameters for setting the logging level."""
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:911:    level: LoggingLevel
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:912:    """The level of logging that the client wants to receive from the server."""
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:916:class SetLevelRequest(Request[SetLevelRequestParams, Literal["logging/setLevel"]]):
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:917:    """A request from the client to the server, to enable or adjust logging."""
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:919:    method: Literal["logging/setLevel"]
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:923:class LoggingMessageNotificationParams(NotificationParams):
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:924:    """Parameters for logging message notifications."""
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:926:    level: LoggingLevel
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:938:class LoggingMessageNotification(Notification[LoggingMessageNotificationParams, Literal["notifications/message"]]):
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:942:    params: LoggingMessageNotificationParams
scripts\mcp\.venv\Lib\site-packages\mcp\types.py:1296:        | LoggingMessageNotification
scripts\mcp\.venv\Lib\site-packages\mcp\__init__.py:32:    LoggingLevel,
scripts\mcp\.venv\Lib\site-packages\mcp\__init__.py:33:    LoggingMessageNotification,
scripts\mcp\.venv\Lib\site-packages\mcp\__init__.py:85:    "LoggingLevel",
scripts\mcp\.venv\Lib\site-packages\mcp\__init__.py:86:    "LoggingMessageNotification",
scripts\mcp\.venv\Lib\site-packages\mcp\cli\claude.py:10:from mcp.server.fastmcp.utilities.logging import get_logger
scripts\mcp\.venv\Lib\site-packages\mcp\cli\claude.py:37:        logger.error(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\claude.py:79:            logger.exception(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\claude.py:136:        logger.info(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\claude.py:142:        logger.exception(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:22:    from mcp.server.fastmcp.utilities.logging import get_logger
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:59:        logger.error(f"Invalid environment variable format: {env_var}. Must be KEY=VALUE")
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:110:        logger.error(f"File not found: {file_path}")
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:113:        logger.error(f"Not a file: {file_path}")
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:137:        logger.error("Could not load module", extra={"file": str(file)})
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:153:            logger.error(f"The server object {object_name} is of type {type(server_object)} (expecting {FastMCP}).")
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:155:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:167:                    logger.error(f"Ignoring object '{file}:{name}' as it's not a valid server object")
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:171:        logger.error(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:189:            logger.error(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:199:        logger.error(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:250:    logger.debug(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:271:            logger.error(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:286:        logger.error(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:296:        logger.error(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:332:    logger.debug(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:353:        logger.exception(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:422:    logger.debug(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:434:        logger.error("Claude app not found")
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:446:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:467:                    logger.exception("Failed to load .env file")
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:470:                logger.error("python-dotenv is not installed. Cannot load .env file.")
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:485:        logger.info(f"Successfully installed {name} in Claude app")
scripts\mcp\.venv\Lib\site-packages\mcp\cli\cli.py:487:        logger.error(f"Failed to install {name} in Claude app")
scripts\mcp\.venv\Lib\site-packages\mcp\client\auth.py:9:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\client\auth.py:34:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\client\auth.py:445:            logger.warning(f"Token refresh failed: {response.status_code}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\auth.py:459:            logger.exception("Invalid refresh response")
scripts\mcp\.venv\Lib\site-packages\mcp\client\auth.py:546:                    logger.exception("OAuth flow error")
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:18:logger = logging.getLogger("client")
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:43:class LoggingFnT(Protocol):
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:46:        params: types.LoggingMessageNotificationParams,
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:92:async def _default_logging_callback(
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:93:    params: types.LoggingMessageNotificationParams,
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:118:        logging_callback: LoggingFnT | None = None,
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:133:        self._logging_callback = logging_callback or _default_logging_callback
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:212:    async def set_logging_level(self, level: types.LoggingLevel) -> types.EmptyResult:
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:213:        """Send a logging/setLevel request."""
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:217:                    method="logging/setLevel",
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:323:            logger.warning(f"Tool {name} not listed by server, cannot validate any structured content")
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:455:            case types.LoggingMessageNotification(params=params):
scripts\mcp\.venv\Lib\site-packages\mcp\client\session.py:456:                await self._logging_callback(params)
scripts\mcp\.venv\Lib\site-packages\mcp\client\session_group.py:12:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\client\session_group.py:302:            logging.warning(f"Could not fetch prompts: {err}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\session_group.py:312:            logging.warning(f"Could not fetch resources: {err}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\session_group.py:323:            logging.warning(f"Could not fetch tools: {err}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:16:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:56:            logger.debug(f"Connecting to SSE endpoint: {remove_request_params(url)}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:66:                    logger.debug("SSE connection established")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:73:                                logger.debug(f"Received SSE event: {sse.event}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:77:                                        logger.debug(f"Received endpoint URL: {endpoint_url}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:88:                                            logger.error(error_msg)
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:98:                                            logger.debug(f"Received server message: {message}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:100:                                            logger.exception("Error parsing server message")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:107:                                        logger.warning(f"Unknown SSE event: {sse.event}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:109:                            logger.exception("Error in sse_reader")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:118:                                    logger.debug(f"Sending client message: {session_message}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:128:                                    logger.debug(f"Client message sent successfully: {response.status_code}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:130:                            logger.exception("Error in post_writer")
scripts\mcp\.venv\Lib\site-packages\mcp\client\sse.py:135:                    logger.debug(f"Starting post writer with endpoint URL: {endpoint_url}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:9:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:34:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:134:            logger.info(f"Received session ID: {self.session_id}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:146:                logger.info(f"Negotiated protocol version: {self.protocol_version}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:148:                logger.warning(f"Failed to parse initialization response as InitializeResult: {exc}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:149:                logger.warning(f"Raw result: {message.root.result}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:163:                logger.debug(f"SSE message: {message}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:185:                logger.exception("Error parsing SSE message")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:189:            logger.warning(f"Unknown SSE event: {sse.event}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:212:                logger.debug("GET SSE connection established")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:218:            logger.debug(f"GET stream error (non-fatal): {exc}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:241:            logger.debug("Resumption GET SSE connection established")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:267:                logger.debug("Received 202 Accepted")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:312:            logger.exception("Error parsing JSON response")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:337:            logger.exception("Error reading SSE stream:")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:347:        logger.error(error_msg)
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:387:                    logger.debug(f"Sending client message: {message}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:416:            logger.exception("Error in post_writer")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:431:                logger.debug("Server does not allow session termination")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:433:                logger.warning(f"Session termination failed: {response.status_code}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:435:            logger.warning(f"Session termination failed: {exc}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\streamable_http.py:478:            logger.debug(f"Connecting to StreamableHTTP endpoint: {url}")
scripts\mcp\.venv\Lib\site-packages\mcp\client\websocket.py:2:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\client\websocket.py:15:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\client\__main__.py:2:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\client\__main__.py:22:logging.basicConfig(level=logging.INFO)
scripts\mcp\.venv\Lib\site-packages\mcp\client\__main__.py:23:logger = logging.getLogger("client")
scripts\mcp\.venv\Lib\site-packages\mcp\client\__main__.py:30:        logger.error("Error: %s", message)
scripts\mcp\.venv\Lib\site-packages\mcp\client\__main__.py:33:    logger.info("Received message from server: %s", message)
scripts\mcp\.venv\Lib\site-packages\mcp\client\__main__.py:47:        logger.info("Initializing session")
scripts\mcp\.venv\Lib\site-packages\mcp\client\__main__.py:49:        logger.info("Initialized")
scripts\mcp\.venv\Lib\site-packages\mcp\client\stdio\__init__.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\client\stdio\__init__.py:25:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\os\posix\utilities.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\os\posix\utilities.py:12:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\os\posix\utilities.py:50:        logger.warning(f"Process group termination failed for PID {pid}: {e}, falling back to simple terminate")
scripts\mcp\.venv\Lib\site-packages\mcp\os\posix\utilities.py:56:            logger.warning(f"Process termination failed for PID {pid}, attempting force kill")
scripts\mcp\.venv\Lib\site-packages\mcp\os\posix\utilities.py:60:                logger.exception(f"Failed to kill process {pid}")
scripts\mcp\.venv\Lib\site-packages\mcp\os\win32\utilities.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\os\win32\utilities.py:18:logger = logging.getLogger("client.stdio.win32")
scripts\mcp\.venv\Lib\site-packages\mcp\os\win32\utilities.py:248:        logger.warning(f"Failed to create Job Object for process tree management: {e}")
scripts\mcp\.venv\Lib\site-packages\mcp\os\win32\utilities.py:276:        logger.warning(f"Failed to assign process {process.pid} to Job Object: {e}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\session.py:180:        level: types.LoggingLevel,
scripts\mcp\.venv\Lib\site-packages\mcp\server\session.py:188:                types.LoggingMessageNotification(
scripts\mcp\.venv\Lib\site-packages\mcp\server\session.py:190:                    params=types.LoggingMessageNotificationParams(
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:40:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:61:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:119:        logger.debug(f"SseServerTransport initialized with endpoint: {endpoint}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:124:            logger.error("connect_sse received non-HTTP request")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:134:        logger.debug("Setting up SSE connection")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:146:        logger.debug(f"Created new session with ID: {session_id}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:166:            logger.debug("Starting SSE writer")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:169:                logger.debug(f"Sent endpoint event: {client_post_uri_data}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:172:                    logger.debug(f"Sending message via SSE: {session_message}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:193:                logging.debug(f"Client session disconnected {session_id}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:195:            logger.debug("Starting SSE response task")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:198:            logger.debug("Yielding read and write streams")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:202:        logger.debug("Handling POST message")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:212:            logger.warning("Received request without session_id")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:218:            logger.debug(f"Parsed session ID: {session_id}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:220:            logger.warning(f"Received invalid session ID: {session_id_param}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:226:            logger.warning(f"Could not find session for ID: {session_id}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:231:        logger.debug(f"Received JSON: {body}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:235:            logger.debug(f"Validated client message: {message}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:237:            logger.exception("Failed to parse message")
scripts\mcp\.venv\Lib\site-packages\mcp\server\sse.py:246:        logger.debug(f"Sending session message to writer: {session_message}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:11:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:47:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:258:                logger.debug("Error closing memory streams - may already be closed")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:415:                            logger.debug(f"received: {event_message.message.root.method}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:424:                        logger.error("No response message received before stream closed")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:431:                    logger.exception("Error processing JSON response")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:461:                        logger.exception("Error in SSE writer")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:463:                        logger.debug("Closing SSE writer")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:491:                    logger.exception("SSE response error")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:497:            logger.exception("Error handling POST request")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:579:                logger.exception("Error in standalone SSE writer")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:581:                logger.debug("Closing standalone SSE writer")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:595:            logger.exception("Error in standalone SSE response")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:630:        logger.info(f"Terminating session: {self.mcp_session_id}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:652:            logger.debug(f"Error closing streams: {e}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:773:                    logger.exception("Error in replay sender")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:785:                logger.exception("Error in replay response")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:791:            logger.exception("Error replaying events")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:861:                            logger.debug(f"Stored {event_id} from {request_stream_id}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:874:                            logging.debug(
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:880:                    logger.exception("Error in message router")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http.py:901:                    logger.debug(f"Error closing streams: {e}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http_manager.py:6:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http_manager.py:26:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http_manager.py:110:            logger.info("StreamableHTTP session manager started")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http_manager.py:114:                logger.info("StreamableHTTP session manager shutting down")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http_manager.py:160:        logger.debug("Stateless mode: Creating new transport for this request")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http_manager.py:182:                    logger.exception("Stateless session crashed")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http_manager.py:215:            logger.debug("Session already exists, handling request directly")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http_manager.py:221:            logger.debug("Creating new transport")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http_manager.py:233:                logger.info(f"Created new transport with session ID: {new_session_id}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http_manager.py:248:                            logger.error(
scripts\mcp\.venv\Lib\site-packages\mcp\server\streamable_http_manager.py:259:                                logger.info(
scripts\mcp\.venv\Lib\site-packages\mcp\server\transport_security.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\server\transport_security.py:9:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\server\transport_security.py:48:            logger.warning("Missing Host header in request")
scripts\mcp\.venv\Lib\site-packages\mcp\server\transport_security.py:64:        logger.warning(f"Invalid Host header: {host}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\transport_security.py:86:        logger.warning(f"Invalid Origin header: {origin}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\transport_security.py:92:            logger.warning("Missing Content-Type header in POST request")
scripts\mcp\.venv\Lib\site-packages\mcp\server\transport_security.py:97:            logger.warning(f"Invalid Content-Type header: {content_type}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\websocket.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\server\websocket.py:13:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\server\__main__.py:2:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\server\__main__.py:17:logging.basicConfig(level=logging.INFO)
scripts\mcp\.venv\Lib\site-packages\mcp\server\__main__.py:18:logger = logging.getLogger("server")
scripts\mcp\.venv\Lib\site-packages\mcp\server\__main__.py:22:    logger.info("Starting receive loop")
scripts\mcp\.venv\Lib\site-packages\mcp\server\__main__.py:25:            logger.error("Error: %s", message)
scripts\mcp\.venv\Lib\site-packages\mcp\server\__main__.py:28:        logger.info("Received message from client: %s", message)
scripts\mcp\.venv\Lib\site-packages\mcp\server\auth\handlers\authorize.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\server\auth\handlers\authorize.py:21:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\server\auth\handlers\authorize.py:223:            logger.exception("Unexpected error in authorization_handler", exc_info=validation_error)
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:33:from mcp.server.fastmcp.utilities.logging import configure_logging, get_logger
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:203:        # Configure logging
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:204:        configure_logging(self.settings.log_level)
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:338:            logger.exception(f"Error reading resource {uri}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:387:        logging, progress reporting, and resource access.
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:993:            logger.exception(f"Error getting prompt {name}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:1136:    async def log(
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:1176:        await self.log("debug", message, **extra)
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:1180:        await self.log("info", message, **extra)
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:1184:        await self.log("warning", message, **extra)
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\server.py:1188:        await self.log("error", message, **extra)
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\prompts\manager.py:6:from mcp.server.fastmcp.utilities.logging import get_logger
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\prompts\manager.py:36:                logger.warning(f"Prompt already exists: {prompt.name}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\resources\resource_manager.py:10:from mcp.server.fastmcp.utilities.logging import get_logger
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\resources\resource_manager.py:33:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\resources\resource_manager.py:44:                logger.warning(f"Resource already exists: {resource.uri}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\resources\resource_manager.py:73:        logger.debug("Getting resource", extra={"uri": uri_str})
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\resources\resource_manager.py:91:        logger.debug("Listing resources", extra={"count": len(self._resources)})
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\resources\resource_manager.py:96:        logger.debug("Listing templates", extra={"count": len(self._templates)})
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\tools\tool_manager.py:8:from mcp.server.fastmcp.utilities.logging import get_logger
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\tools\tool_manager.py:32:                    logger.warning(f"Tool already exists: {tool.name}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\tools\tool_manager.py:66:                logger.warning(f"Tool already exists: {tool.name}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\func_metadata.py:23:from mcp.server.fastmcp.utilities.logging import get_logger
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\func_metadata.py:366:            logger.info(f"Cannot create schema for type {annotation} in {func_name}: {type(e).__name__}: {e}")
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\logging.py:1:"""Logging utilities for FastMCP."""
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\logging.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\logging.py:7:def get_logger(name: str) -> logging.Logger:
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\logging.py:16:    return logging.getLogger(name)
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\logging.py:19:def configure_logging(
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\logging.py:22:    """Configure logging for MCP.
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\logging.py:27:    handlers: list[logging.Handler] = []
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\logging.py:30:        from rich.logging import RichHandler
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\logging.py:37:        handlers.append(logging.StreamHandler())
scripts\mcp\.venv\Lib\site-packages\mcp\server\fastmcp\utilities\logging.py:39:    logging.basicConfig(
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:72:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:94:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:153:        logger.debug("Initializing server %r", name)
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:191:        logging_capability = None
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:208:        # Set logging capabilities if handler exists
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:210:            logging_capability = types.LoggingCapability()
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:220:            logging=logging_capability,
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:234:            logger.debug("Registering handler for PromptListRequest")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:249:            logger.debug("Registering handler for GetPromptRequest")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:262:            logger.debug("Registering handler for ListResourcesRequest")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:275:            logger.debug("Registering handler for ListResourceTemplatesRequest")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:290:            logger.debug("Registering handler for ReadResourceRequest")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:344:    def set_logging_level(self):
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:345:        def decorator(func: Callable[[types.LoggingLevel], Awaitable[None]]):
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:346:            logger.debug("Registering handler for SetLevelRequest")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:359:            logger.debug("Registering handler for SubscribeRequest")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:372:            logger.debug("Registering handler for UnsubscribeRequest")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:385:            logger.debug("Registering handler for ListToolsRequest")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:416:                logger.debug("Tool cache miss for %s, refreshing cache", tool_name)
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:421:            logger.warning("Tool '%s' not listed, no validation will be performed", tool_name)
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:446:            logger.debug("Registering handler for CallToolRequest")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:513:            logger.debug("Registering handler for ProgressNotification")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:541:            logger.debug("Registering handler for CompleteRequest")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:587:                    logger.debug("Received message: %s", message)
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:614:                logger.info("Warning: %s: %s", warning.category.__name__, warning.message)
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:624:        logger.info("Processing request of type %s", type(req).__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:626:            logger.debug("Dispatching request of type %s", type(req).__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:650:                logger.info(
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:673:        logger.debug("Response sent")
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:677:            logger.debug("Dispatching notification of type %s", type(notify).__name__)
scripts\mcp\.venv\Lib\site-packages\mcp\server\lowlevel\server.py:682:                logger.exception("Uncaught exception in notification handler")
scripts\mcp\.venv\Lib\site-packages\mcp\shared\memory.py:18:    LoggingFnT,
scripts\mcp\.venv\Lib\site-packages\mcp\shared\memory.py:59:    logging_callback: LoggingFnT | None = None,
scripts\mcp\.venv\Lib\site-packages\mcp\shared\memory.py:91:                    logging_callback=logging_callback,
scripts\mcp\.venv\Lib\site-packages\mcp\shared\session.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\mcp\shared\session.py:363:                            logging.warning(f"Failed to validate request: {e}")
scripts\mcp\.venv\Lib\site-packages\mcp\shared\session.py:364:                            logging.debug(f"Message that failed validation: {message.message.root}")
scripts\mcp\.venv\Lib\site-packages\mcp\shared\session.py:404:                            logging.warning(
scripts\mcp\.venv\Lib\site-packages\mcp\shared\session.py:420:                logging.debug("Read stream closed by client")
scripts\mcp\.venv\Lib\site-packages\mcp\shared\session.py:424:                logging.exception(f"Unhandled exception in receive loop: {e}")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\build_env.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\build_env.py:22:from pip._internal.utils.logging import VERBOSE
scripts\mcp\.venv\Lib\site-packages\pip\_internal\build_env.py:31:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\build_env.py:135:        if logger.getEffectiveLevel() <= logging.DEBUG:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\build_env.py:137:        elif logger.getEffectiveLevel() <= VERBOSE:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cache.py:7:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cache.py:22:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cache.py:147:                logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cache.py:201:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cache.py:273:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cache.py:283:                    logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\configuration.py:29:from pip._internal.utils.logging import getLogger
scripts\mcp\.venv\Lib\site-packages\pip\_internal\configuration.py:220:            logger.info("Writing to %s", fname)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\configuration.py:242:        logger.debug("Will be working with %s variant only", self.load_only)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\configuration.py:260:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\configuration.py:271:                    logger.debug("Skipping file '%s' (variant: %s)", fname, variant)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\configuration.py:280:        logger.verbose("For variant '%s', will try loading '%s'", variant, fname)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\exceptions.py:13:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\exceptions.py:36:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\exceptions.py:739:            exc_info = logger.isEnabledFor(VERBOSE)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\exceptions.py:740:            logger.warning("Failed to read %s", config, exc_info=exc_info)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:7:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:39:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:207:            logger.debug("No remote pip version found")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:212:    logger.debug("Remote version of pip: %s", remote_version)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:213:    logger.debug("Local version of pip:  %s", local_version)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:216:    logger.debug("Was pip installed by pip? %s", pip_installed_by_pip)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:254:        logger.warning("%s", upgrade_prompt, extra={"rich": True})
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:23:from pip._internal.utils.logging import indent_log
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:31:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:163:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:180:            logger.warning("Built %s for %s is invalid: %s", artifact, req.name, e)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:198:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:202:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:235:                logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:242:                logger.info("Stored in directory: %s", output_dir)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:245:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:262:    logger.info("Running setup.py clean for %s", req.name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:269:        logger.error("Failed cleaning build dir for %s", req.name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:289:    logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:294:    with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:324:        logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:329:        logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\__init__.py:5:# init_logging() must be called before any call to logging.getLogger()
scripts\mcp\.venv\Lib\site-packages\pip\_internal\__init__.py:7:_log.init_logging()
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:6:import logging.config
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:35:from pip._internal.utils.logging import BrokenStdoutLoggingError, setup_logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:43:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:111:            logger.error("%s", exc, extra={"rich": True})
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:112:            logger.debug("Exception information:", exc_info=True)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:116:            logger.critical(str(exc))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:117:            logger.debug("Exception information:", exc_info=True)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:125:            logger.critical(str(exc))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:126:            logger.debug("Exception information:", exc_info=True)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:130:            logger.critical("%s", exc)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:131:            logger.debug("Exception information:", exc_info=True)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:134:        except BrokenStdoutLoggingError:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:138:            if level_number <= logging.DEBUG:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:143:            logger.critical("Operation cancelled by user")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:144:            logger.debug("Exception information:", exc_info=True)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:148:            logger.critical("Exception:", exc_info=True)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:161:            logging.shutdown()
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:183:        level_number = setup_logging(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:193:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:204:            logger.critical(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:222:                logger.critical("Could not find an activated virtualenv (required).")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:228:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:15:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:35:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:140:        "instead of logging them to stderr."
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:221:        " times (corresponding to WARNING, ERROR, and CRITICAL logging"
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\index_command.py:11:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\index_command.py:28:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\index_command.py:34:        logger.debug("Disabling truststore because Python version isn't 3.10+")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\index_command.py:40:        logger.warning("Disabling truststore since ssl support is missing")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\index_command.py:46:        logger.warning("Disabling truststore because platform isn't supported")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\index_command.py:174:            logger.warning("There was an error checking the latest version of pip.")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\index_command.py:175:            logger.debug("See below for error", exc_info=True)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\main.py:6:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\main.py:17:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\main.py:77:        logger.debug("Ignoring error %s when setting locale", e)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\parser.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\parser.py:18:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\parser.py:91:    def format_epilog(self, epilog: str | None) -> str:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\parser.py:196:                    logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\progress_bars.py:24:from pip._internal.utils.logging import get_console, get_indentation
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:10:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:44:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:120:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:131:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:323:            logger.info(locations)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:22:from pip._internal.utils.logging import get_console, get_indentation
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:24:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:101:        logger.info("%s: %s", self._message, status)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:134:    # through the logging system, but it acts like it has level INFO,
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:136:    # Non-interactive spinner goes through the logging system, so it is always
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:137:    # in sync with logging configuration.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:138:    if sys.stdout.isatty() and logger.getEffectiveLevel() <= logging.INFO:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:195:    if not logger.isEnabledFor(logging.INFO):
scripts\mcp\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:228:    elif not file.isatty() or logger.getEffectiveLevel() > logging.INFO:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:10:from pip._internal.utils.logging import getLogger
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:65:            logger.error("pip cache commands can not function since cache is disabled.")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:70:            logger.error(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:82:            logger.error(e.args[0])
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:91:        logger.info(options.cache_dir)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:133:        logger.info(message)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:152:            logger.info("No locally built wheels cached.")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:160:        logger.info("Cache contents:\n")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:161:        logger.info("\n".join(sorted(results)))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:165:            logger.info("\n".join(sorted(files)))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:185:            logger.warning(no_matching_msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:191:            logger.verbose("Removed %s", filename)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\cache.py:192:        logger.info("Files removed: %s (%s)", len(files), format_size(bytes_removed))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\check.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\check.py:15:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:18:from pip._internal.utils.logging import indent_log
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:21:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:113:            logger.error(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:128:            logger.error(e.args[0])
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:141:            logger.error(e.args[0])
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:211:                with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:220:            with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:228:        with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:275:            logger.exception(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:22:from pip._internal.utils.logging import indent_log
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:25:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:29:    logger.info("%s: %s", name, value)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:33:    logger.info("sys.implementation:")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:35:    with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:102:        logger.info("%s==%s%s", module_name, actual_version, extra_message)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:106:    logger.info("vendored library versions:")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:109:    with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:126:    logger.info(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:134:    with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:136:            logger.info(str(tag))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:140:            logger.info(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\debug.py:175:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\download.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\download.py:14:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\hash.py:2:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\hash.py:11:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\index.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\index.py:26:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\index.py:66:            logger.error(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\index.py:78:            logger.error(e.args[0])
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\inspect.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\inspect.py:16:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:48:from pip._internal.utils.logging import getLogger
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:276:                "to avoid mixing pip logging output with JSON output."
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:308:        logger.verbose("Using %s", get_pip_version())
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:517:            logger.error(message, exc_info=show_traceback)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:562:                        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:569:                        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:590:            logger.exception(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:644:        logger.critical("\n".join(parts))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:690:        logger.debug("Non-user install by explicit request")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:704:        logger.debug("User install by explicit request")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:712:        logger.debug("Non-user install due to --prefix or --target option")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:717:        logger.debug("Non-user install because user site-packages disabled")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:723:        logger.debug("Non-user install because site-packages writeable")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\install.py:726:    logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\list.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\list.py:39:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\lock.py:17:from pip._internal.utils.logging import getLogger
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\lock.py:93:        logger.verbose("Using %s", get_pip_version())
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\lock.py:95:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\lock.py:157:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\search.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\search.py:22:from pip._internal.utils.logging import indent_log
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\search.py:32:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\search.py:118:        with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\show.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\show.py:17:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\show.py:52:            logger.warning("ERROR: Please provide a package name or names.")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\show.py:100:        logger.warning("Package(s) not found: %s", ", ".join(missing))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:22:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:76:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:20:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:172:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:16:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:92:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:96:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:12:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:41:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:124:    logger.debug("Getting page %s", redact_auth_from_url(url))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:162:    logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:302:        meth = logger.debug
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:325:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:344:        logger.debug(" file: URL is directory, getting %s", url)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:349:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:355:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:370:        _handle_get_simple_fail(link, reason, meth=logger.info)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:415:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:474:        if logger.isEnabledFor(logging.DEBUG):
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\collector.py:484:            logger.debug("\n".join(lines))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:8:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:42:from pip._internal.utils.logging import indent_log
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:79:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:88:                logger.verbose(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:96:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:266:        logger.debug("Found link %s, version: %s", link, version)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:292:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:302:    # Collect the non-matches for logging purposes.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:331:    logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:765:            logger.debug("Skipping link: %s: %s", detail, link)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:806:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:816:        with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:865:        if logger.isEnabledFor(logging.DEBUG) and file_candidates:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:874:            logger.debug("Local files found: %s", ", ".join(paths))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:967:            logger.critical(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:987:                logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:994:                logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:1002:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:1010:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\sources.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\sources.py:23:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\sources.py:253:        logger.warning(msg, location)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\index\sources.py:283:    logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:19:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:33:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:61:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\locations\_sysconfig.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\locations\_sysconfig.py:14:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:40:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:73:    _MISMATCH_LEVEL = logging.WARNING
scripts\mcp\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:75:    _MISMATCH_LEVEL = logging.DEBUG
scripts\mcp\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:187:    logger.log(_MISMATCH_LEVEL, message, key, issue_url, old, new)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:213:    logger.log(_MISMATCH_LEVEL, "\n".join(parts), user, home, root, prefix)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\base.py:7:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\base.py:41:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\base.py:305:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\base.py:433:            logger.warning(message, self.raw_name, e)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\base.py:620:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:34:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:232:            logger.warning("No metadata found in %s", displaying_path)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:25:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:72:                logger.warning("Skipping %s due to %s", info_location, e.reason)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\models\link.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\models\link.py:32:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\models\link.py:368:                logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\models\link.py:593:        logger.debug("Ignoring egg= fragment in %s", link)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:2:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:14:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:58:                    logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:87:                    logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:9:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:26:from pip._internal.utils.logging import getLogger
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:86:            logger.debug("Getting credentials from keyring for %s", url)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:93:            logger.debug("Getting password from keyring for %s", url)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:164:    logger.verbose("Keyring provider requested: %s", provider)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:172:            logger.verbose("Keyring provider set: import")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:182:            logger.warning(msg, exc, exc_info=logger.isEnabledFor(logging.DEBUG))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:217:            logger.verbose("Keyring provider set: subprocess with executable %s", cli)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:220:    logger.verbose("Keyring provider set: disabled")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:276:            logger.debug("Keyring is skipped due to an exception", exc_info=True)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:278:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:351:            logger.debug("Found credentials in url for %s", netloc)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:361:                logger.debug("Found index url %s", index_url)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:367:                logger.debug("Found credentials in index url for %s", netloc)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:374:                logger.debug("Found credentials in netrc for %s", netloc)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:387:                logger.debug("Found credentials in keyring for %s", netloc)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:544:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:559:                logger.info("Saving credentials to keyring")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\auth.py:564:                logger.exception("Failed to save credentials")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\download.py:6:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\download.py:29:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\download.py:70:        logger.info("Using cached %s", logged_url)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\download.py:72:        logger.info("Resuming download %s", logged_url)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\download.py:74:        logger.info("Downloading %s", logged_url)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\download.py:76:    if logger.getEffectiveLevel() > logging.INFO:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\download.py:219:            logger.warning("Connection timed out while downloading.")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\download.py:229:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\download.py:277:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\download.py:313:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\download.py:338:            logger.critical(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\session.py:12:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\session.py:57:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\session.py:407:            self.add_trusted_host(host, suppress_logging=True)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\session.py:417:        self, host: str, source: str | None = None, suppress_logging: bool = False
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\session.py:422:        :param source: An optional source string, for logging where the host
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\session.py:425:        if not suppress_logging:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\session.py:429:            logger.info(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\session.py:510:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:17:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:56:            logger.critical(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\check.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\check.py:25:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\check.py:56:            logger.warning("Error parsing dependencies of %s: %s", name, e)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:22:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:105:                        logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:111:                        logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:121:                                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:139:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:176:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:207:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:215:        logger.warning("Error when trying to get requirement for VCS system %s", exc)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:219:    logger.warning("Could not determine repository location of %s", location)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:48:from pip._internal.utils.logging import indent_log
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:210:    logger.info("File was already downloaded %s", download_path)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:216:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:310:            logger.info(message, information)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:313:            with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:314:                logger.info("Using cached %s", req.link.filename)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:376:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:381:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:400:        logger.verbose(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:440:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:448:        logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:457:            logger.debug("%s does not support range requests", url)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:480:            logger.debug("Downloading link %s to %s", link, filepath)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:507:        with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:594:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:671:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:685:            logger.info("Saved %s", download_path)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:694:        logger.info("Obtaining %s", req)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:696:        with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:731:        logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:734:        with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:736:                logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:13:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:49:            logger.debug("Initialized build tracking at %s", root)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:71:        logger.debug("Created build tracker: %s", self._root)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:74:        logger.debug("Entered build tracker: %s", self._root)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:114:        logger.debug("Added %s to build tracker %r", req, self._root)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:123:        logger.debug("Removed %s from build tracker %r", req, self._root)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:129:        logger.debug("Removed build tracker: %r", self._root)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:17:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:46:    logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:10:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:25:        logger.debug("Destination directory: %s", tempd)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:36:        logger.error("Failed building wheel for %s", name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:10:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:25:        logger.debug("Destination directory: %s", tempd)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:37:                logger.error(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:45:        logger.error("Failed building editable for %s", name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:11:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:18:    """Format command information for logging."""
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:24:    elif logger.getEffectiveLevel() > logging.DEBUG:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:47:        logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:56:        logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:97:        logger.debug("Destination directory: %s", tempd)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:108:            logger.error("Failed building wheel for %s", name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:9:from pip._internal.utils.logging import indent_log
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:13:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:31:    logger.info("Running setup.py develop for %s", name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:42:    with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:10:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:66:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:247:            logger.warning("RECORD line has more than three elements: %s", row)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:443:        logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:631:        logger.debug(stdout.getvalue())
scripts\mcp\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:662:            logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\constructors.py:14:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\constructors.py:42:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\constructors.py:185:        logger.debug("Cannot parse '%s' as requirements file", req)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\constructors.py:302:    logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\constructors.py:405:        for logging purposes in case of an error.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_file.py:9:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_file.py:99:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_file.py:228:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_file.py:610:        logging.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:65:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:190:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:377:            logger.debug("Creating directory %s", build_dir)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:420:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:625:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:631:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:685:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:721:            logger.warning("Skipping %s as it is not installed.", self.name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:723:        logger.info("Found existing installation: %s", dist)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:765:                logger.warning("Deleting %s", display_path(archive_path))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:769:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:808:        logger.info("Saved %s", display_path(archive_path))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:847:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_install.py:933:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_set.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_set.py:8:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:16:from pip._internal.utils.logging import getLogger, indent_log
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:277:            logger.info("Moving to %s\n from %s", *p)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:281:                logger.debug("Replacing %s from %s", new_path, path)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:288:                logger.error("Failed to restore %s", new_path)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:289:                logger.debug("Exception: %s", ex)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:357:            logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:364:        logger.info("Uninstalling %s:", dist_name_version)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:366:        with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:374:                    logger.verbose("Removing file or directory %s", path)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:379:                logger.info("Successfully uninstalled %s", dist_name_version)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:388:            logger.info(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:389:            with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:391:                    logger.info(path)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:412:            logger.error(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:417:        logger.info("Rolling back uninstall of %s", self._dist.raw_name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:431:            logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:439:            logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:452:            logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:547:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:606:        logger.verbose("Removing pth entries from %s:", self.file)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:610:            logger.warning("Cannot remove entries from nonexistent file %s", self.file)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:625:                logger.verbose("Removing entry: %s", entry)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:634:            logger.error("Cannot roll back changes to %s, none were made", self.file)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:636:        logger.debug("Rolling %s back to previous state", self.file)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\__init__.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\__init__.py:9:from pip._internal.utils.logging import indent_log
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\__init__.py:22:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\__init__.py:57:        logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\__init__.py:64:    show_progress = logger.isEnabledFor(logging.INFO) and len(to_install) > 1
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\__init__.py:73:    with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\__init__.py:78:                logger.info("Attempting uninstall: %s", req_name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\req\__init__.py:79:                with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:15:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:49:from pip._internal.utils.logging import indent_log
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:53:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:88:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:98:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:217:            logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:300:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:399:            logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:429:            logger.debug("Using cached wheel link: %s", cache_entry.link)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:482:                logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:533:        with indent_log():
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:548:                    logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:556:                    logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:35:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:280:            logger.debug("Using cached wheel link: %s", cache_entry.link)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:362:        # This is just logging some messages, so we can do it eagerly.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:521:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:77:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:213:                    logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:234:                    logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:479:            logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:688:            logger.critical(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:693:            logger.critical(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:698:        logger.critical(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:705:            logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:782:        logger.critical(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:808:        logger.info(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\found_candidates.py:13:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\found_candidates.py:23:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\found_candidates.py:41:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:4:from logging import getLogger
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:45:        logger.info("INFO: %s", message.format(package_name=candidate.name))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:57:        logger.debug(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:64:        logger.info("Reporter.starting()")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:67:        logger.info("Reporter.starting_round(%r)", index)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:70:        logger.info("Reporter.ending_round(%r, state)", index)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:71:        logger.debug("Reporter.ending_round(%r, %r)", index, state)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:74:        logger.info("Reporter.ending(%r)", state)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:79:        logger.info("Reporter.adding_requirement(%r, %r)", requirement, parent)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:82:        logger.info("Reporter.rejecting_candidate(%r, %r)", criterion, candidate)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:85:        logger.info("Reporter.pinning(%r)", candidate)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:38:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:152:                    logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:179:                logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\compat.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\compat.py:13:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:7:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:25:# Warnings <-> Logging Integration
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:40:        logger = logging.getLogger("pip._internal.deprecations")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:41:        logger.warning(message)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:6:import logging.handlers
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:13:from logging import Filter
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:25:from pip._vendor.rich.logging import RichHandler
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:40:class BrokenStdoutLoggingError(Exception):
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:42:    Raised if BrokenPipeError occurs for the stdout stream while logging.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:60:def indent_log(num: int = 2) -> Generator[None, None, None]:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:78:class IndentingFormatter(logging.Formatter):
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:88:        A logging.Formatter that obeys the indent_log() context manager.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:101:        if levelno < logging.WARNING:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:107:        if levelno < logging.ERROR:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:112:    def format(self, record: logging.LogRecord) -> str:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:174:    def emit(self, record: logging.LogRecord) -> None:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:192:                if record.levelno >= logging.ERROR:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:194:                elif record.levelno >= logging.WARNING:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:202:    def handleError(self, record: logging.LogRecord) -> None:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:203:        """Called when logging is unable to log some output."""
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:207:        # stdout stream in logging's Handler.emit(), then raise our special
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:208:        # exception so we can handle it in main() instead of logging the
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:216:            raise BrokenStdoutLoggingError()
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:221:class BetterRotatingFileHandler(logging.handlers.RotatingFileHandler):
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:231:    def filter(self, record: logging.LogRecord) -> bool:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:237:    A logging Filter that excludes records from a logger (or its children).
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:240:    def filter(self, record: logging.LogRecord) -> bool:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:246:def setup_logging(verbosity: int, no_color: bool, user_log_file: str | None) -> int:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:247:    """Configures and sets up all of the logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:249:    Returns the requested logging level, as its integer value.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:252:    # Determine the level to be logging at.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:254:        level_number = logging.DEBUG
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:258:        level_number = logging.WARNING
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:260:        level_number = logging.ERROR
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:262:        level_number = logging.CRITICAL
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:264:        level_number = logging.INFO
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:266:    level = logging.getLevelName(level_number)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:278:    # Disable any logging besides WARNING unless we have DEBUG level logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:284:        "stream": "pip._internal.utils.logging.RichPipStreamHandler",
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:285:        "file": "pip._internal.utils.logging.BetterRotatingFileHandler",
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:294:    logging.config.dictConfig(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:300:                    "()": "pip._internal.utils.logging.MaxLevelFilter",
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:301:                    "level": logging.WARNING,
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:304:                    "()": "logging.Filter",
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:305:                    "name": subprocess_logger.name,
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:308:                    "()": "pip._internal.utils.logging.ExcludeLoggerFilter",
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:309:                    "name": subprocess_logger.name,
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:338:                # A handler responsible for logging to the console messages
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\logging.py:339:                # from the "subprocessor" logger.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\misc.py:6:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\misc.py:58:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\misc.py:367:    logger.info(msg, *args)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\misc.py:757:    logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\packaging.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\packaging.py:9:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:14:from pip._internal.utils.logging import VERBOSE, subprocess_logger
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:83:        logging of both stdout and stderr occurs when the subprocess has
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:84:        terminated, else logging occurs as subprocess output is produced.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:95:    # - If DEBUG logging isn't enabled (e.g. if --verbose logging wasn't
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:100:    #   (e.g. if --verbose logging wasn't enabled).  This way we don't log
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:107:        log_subprocess: Callable[..., None] = subprocess_logger.info
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:108:        used_level = logging.INFO
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:112:        log_subprocess = subprocess_logger.verbose
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:116:    showing_subprocess = subprocess_logger.getEffectiveLevel() <= used_level
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:141:            subprocess_logger.critical(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:200:                subprocess_logger.error("%s", error, extra={"rich": True})
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:201:                subprocess_logger.verbose(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:206:                subprocess_logger.verbose(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:214:            subprocess_logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:20:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:176:        logger.debug("Created temporary directory: %s", path)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:198:                logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:204:                logger.debug("%s failed with %s.", func.__qualname__, formatted_exc)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:215:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:293:        logger.debug("Created temporary directory: %s", path)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:24:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:34:    logger.debug("bz2 module is not available")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:42:    logger.debug("lzma module is not available")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:174:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:277:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:290:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:330:        logger.critical(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:9:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:67:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\wheel.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\wheel.py:15:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\wheel.py:129:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\_log.py:1:"""Customize logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\_log.py:3:Defines custom logger class for the `logger.verbose(...)` method.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\_log.py:5:init_logging() must be called before any other modules that call logging.getLogger.
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\_log.py:8:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\_log.py:16:class VerboseLogger(logging.Logger):
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\_log.py:23:        return self.log(VERBOSE, msg, *args, **kwargs)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\_log.py:27:    """logging.getLogger, but ensures our VerboseLogger class is returned"""
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\_log.py:28:    return cast(VerboseLogger, logging.getLogger(name))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\_log.py:31:def init_logging() -> None:
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\_log.py:37:    logging.setLoggerClass(VerboseLogger)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\utils\_log.py:38:    logging.addLevelName(VERBOSE, "VERBOSE")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:16:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:41:        logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\git.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\git.py:29:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\git.py:114:            logger.warning("Can't parse git version: %s", version)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\git.py:239:            logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\git.py:277:        logger.info("Cloning %s%s to %s", url, rev_display, display_path(dest))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\git.py:304:            logger.debug("Rev options %s, branch_name %s", rev_options, branch_name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\git.py:331:        logger.info("Resolved %s to commit %s", url, rev_options.rev)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\git.py:555:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:18:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:41:        logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:81:            logger.warning("Could not switch Mercurial repository to %s: %s", url, exc)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:175:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:23:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:118:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:283:        logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:40:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:89:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:197:            logger.warning("Cannot register VCS %s", cls.__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:201:            logger.debug("Registered VCS backend: %s", cls.name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:217:            logger.debug("Determine that %s uses VCS: %s", location, vcs_backend.name)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:514:                logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:521:                    logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:529:                    logger.info("Skipping because already up-to-date.")
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:532:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:541:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:550:        logger.warning(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:561:            logger.warning("Deleting %s", display_path(dest))
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:568:            logger.warning("Backing up %s to %s", display_path(dest), dest_dir)
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:575:            logger.info(
scripts\mcp\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:676:        logger.debug("Checking in %s for %s (%s)...", path, cls.dirname, cls.name)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\__init__.py:107:    vendored("rich.logging")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:12:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:32:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:120:                logger.debug("Ignoring unknown cache-control directive: %s", directive)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:130:                        logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:135:                    logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:156:            logger.debug("No cache entry available")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:166:            logger.warning("Cache entry deserialization failed, entry ignored")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:176:        logger.debug('Looking up "%s" in the cache', cache_url)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:181:            logger.debug('Request header has "no-cache", cache bypassed')
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:185:            logger.debug('Request header has "max_age" as 0, cache bypassed')
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:207:            logger.debug(msg)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:215:                logger.debug("Purging cached response: no date or etag")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:217:            logger.debug("Ignoring cached response: no date")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:225:        logger.debug("Current age based on date: %i", current_age)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:240:            logger.debug("Freshness lifetime from max-age: %i", freshness_lifetime)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:248:                logger.debug("Freshness lifetime from expires: %i", freshness_lifetime)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:255:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:263:            logger.debug("Adjusted current age from min-fresh: %i", current_age)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:267:            logger.debug('The response is "fresh", returning cached response')
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:268:            logger.debug("%i > %i", freshness_lifetime, current_age)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:273:            logger.debug('The cached response is "stale" with no etag, purging')
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:350:            logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:383:        logger.debug('Updating cache with response from "%s"', cache_url)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:389:            logger.debug('Response header has "no-store"')
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:392:            logger.debug('Request header has "no-store"')
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:394:            logger.debug('Purging existing cache entry to honor "no-store"')
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:405:            logger.debug('Response header has "Vary: *"')
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:418:            logger.debug(f"etag object cached for {expires_time} seconds")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:419:            logger.debug("Caching due to etag")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:425:            logger.debug("Caching permanent redirect")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:438:                logger.debug("Caching b/c date exists and max-age > 0")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:458:                    logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\filewrapper.py:67:        # TODO: Add some logging here...
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:6:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:22:def setup_logging() -> None:
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:23:    logger.setLevel(logging.DEBUG)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:24:    handler = logging.StreamHandler()
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:25:    logger.addHandler(handler)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:53:    # Turn on logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:54:    setup_logging()
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\__init__.py:27:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\cachecontrol\__init__.py:29:logging.getLogger(__name__).addHandler(logging.NullHandler())
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\compat.py:911:    from logging.config import BaseConfigurator, valid_ident
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:11:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:21:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:239:            logger.debug('_find failed: %r %r', path, self.loader.prefix)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:241:            logger.debug('_find worked: %r %r', path, self.loader.prefix)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:8:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:20:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:132:                logger.warning('Failed to open %s', executable)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:290:                    logger.warning('Failed to write executable - trying to '
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:297:                    logger.debug('Able to replace executable using '
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:307:                    logger.warning('Skipping existing file %s', outname)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:347:            logger.debug('not copying %s (up-to-date)', script)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:362:                logger.warning('%s is an empty file (skipping)', script)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:378:            logger.info('copying and adjusting %s -> %s', script, self.target_dir)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:12:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:38:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:525:        logger.info('Copying %s to %s', infile, outfile)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:541:        logger.info('Copying stream %s to %s', instream, outfile)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:571:                    logger.info("changing mode of %s", f)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:574:                    logger.info("changing mode of %s to %o", f, mode)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:585:            logger.info('Creating %s' % path)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:593:        logger.info('Byte-compiling %s to %s', path, dpath)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:613:                logger.debug('Removing directory tree at %s', path)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:624:                logger.debug('Removing %s %s', s, path)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:778:            logger.warning('Directory exists but is not writable: %s', result)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:784:            logger.warning('Unable to create %s', result, exc_info=True)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:788:        logger.warning('Default location unusable, using %s', result)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:911:                logger.warning('undeclared extra: %s' % unwanted)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:916:                logger.warning('undeclared extra: %s' % r)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:936:            logger.debug('Unexpected response for JSON request: %s', ct)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:943:        logger.exception('Failed to get external data for %s: %s', url, e)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:981:            logger.warning('Directory \'%s\' is not private', base)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1070:                logger.exception('Exception during event publication')
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1073:        logger.debug('publish %s: args = %s, kwargs = %s, result = %s', event, args, kwargs, result)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1485:                    logger.debug('Host verified: %s', self.host)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:7:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:17:    from logging import NullHandler
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:20:    class NullHandler(logging.Handler):
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:32:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:33:logger.addHandler(NullHandler())
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:33:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1363:    logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1364:    logger.setLevel(logging.DEBUG)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1365:    logger.addHandler(logging.StreamHandler(sys.stdout))
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1393:        logger.info(json.dumps(dist.info(), indent=4, sort_keys=True))
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1395:        logger.info("Name: %s", dist.name(pretty=True))
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1397:        logger.info("Version: %s", distribution_version)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1399:        logger.info("Codename: %s", distribution_codename)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\idna\intranges.py:5:in the original list?" in time O(log(# runs)).
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:7:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:115:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:142:# Set default logging handler to avoid "No handler found" warnings.
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:143:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:144:from logging import NullHandler
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:176:logging.getLogger(__name__).addHandler(NullHandler())
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\console.py:612:        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\console.py:613:        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\console.py:1103:        """A context manager to *capture* the result of print() or log() in a string,
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\console.py:1932:    def log(
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\console.py:1956:            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\console.py:2630:    console.log(
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\console.py:2645:    console.log("Hello, World!", "{'a': 1}", repr(console))
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:53:    "logging.keyword": Style(bold=True, color="yellow"),
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:54:    "logging.level.notset": Style(dim=True),
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:55:    "logging.level.debug": Style(color="green"),
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:56:    "logging.level.info": Style(color="blue"),
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:57:    "logging.level.warning": Style(color="yellow"),
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:58:    "logging.level.error": Style(color="red", bold=True),
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:59:    "logging.level.critical": Style(color="red", bold=True, reverse=True),
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\diagnose.py:30:        "VSCODE_VERBOSE_LOGGING",
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\live.py:378:                    console.log(next(examples))
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:3:from logging import Handler, LogRecord
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:19:    """A logging handler that renders output with Rich. The time / level / message and file are displayed in columns.
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:23:        Be careful when enabling console markup in log messages if you have configured logging for libraries not
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:27:        level (Union[int, str], optional): Log level. Defaults to logging.NOTSET.
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:67:        level: Union[int, str] = logging.NOTSET,
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:128:            level_name.ljust(8), f"logging.level.{level_name.lower()}"
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:133:        """Invoked by logging."""
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:186:            record (LogRecord): logging Record.
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:203:            message_text.highlight_words(self.keywords, "logging.keyword")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:217:            record (LogRecord): logging Record.
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:247:    logging.basicConfig(
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:253:    log = logging.getLogger("rich")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\progress.py:1715:                progress.log(next(examples))
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\segment.py:4:from logging import getLogger
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\status.py:117:        console.log("Importing advanced AI")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\status.py:119:        console.log("Advanced Covid AI Ready")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\status.py:123:        console.log("Found 10,000,000,000 copies of Covid32.exe")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\_log_render.py:94:    c.log("[on blue]hello", justify="right")
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\rich\__main__.py:204:        """Progress bars, columns, styled logging handler, tracebacks, etc...""",
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\connection.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\connection.py:65:log = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\connectionpool.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\connectionpool.py:63:log = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\poolmanager.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\poolmanager.py:26:log = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\response.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\response.py:32:log = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:6:# Set default logging handler to avoid "No handler found" warnings.
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:7:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:9:from logging import NullHandler
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:60:logging.getLogger(__name__).addHandler(NullHandler())
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:63:def add_stderr_logger(level=logging.DEBUG):
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:65:    Helper for quickly adding a StreamHandler to the logger. Useful for
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:72:    logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:73:    handler = logging.StreamHandler()
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:74:    handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(message)s"))
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:75:    logger.addHandler(handler)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:76:    logger.setLevel(level)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:77:    logger.debug("Added a stderr logging handler to logger: %s", __name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\appengine.py:44:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\appengine.py:68:log = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\ntlmpool.py:9:from logging import getLogger
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\pyopenssl.py:73:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\pyopenssl.py:127:log = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\util\retry.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\util\retry.py:22:log = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pip\_vendor\urllib3\util\ssl_.py:354:    # Enable logging of TLS session keys via defacto standard environment variable
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:1235:    `side_effect` can be used for logging, updating progress bars, or anything
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3475:    # "Reservoir-Sampling Algorithms of Time Complexity O(n(1+log(N/n)))".
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3482:    W = exp(log(random()) / k)
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3486:    next_index = k + floor(log(random()) / log(1 - W))
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3493:            W *= exp(log(random()) / k)
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3494:            next_index += floor(log(random()) / log(1 - W)) + 1
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3504:    weight_keys = (log(random()) / weight for weight in weights)
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3514:    weights_to_skip = log(random()) / smallest_weight_key
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3523:            weight_key = log(r_2) / weight
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3526:            weights_to_skip = log(random()) / smallest_weight_key
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\tags.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\tags.py:115:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\pydantic\types.py:1577:    """A generic base class used for defining a field with sensitive information that you do not want to be visible in logging or tracebacks.
scripts\mcp\.venv\Lib\site-packages\pydantic\types.py:1807:    """A string used for storing sensitive information that you do not want to be visible in logging or tracebacks.
scripts\mcp\.venv\Lib\site-packages\pydantic\types.py:1874:    """A bytes used for storing sensitive information that you do not want to be visible in logging or tracebacks.
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\debugger\configui.py:11:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\debugger\configui.py:17:        return dialog.PropertyPage.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\debugger\debugger.py:488:def CreateDebuggerDialog(parent, klass):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\createwin.py:76:class TestDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\createwin.py:77:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\createwin.py:78:        rc = dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\createwin.py:91:class TestPieDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\createwin.py:92:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\createwin.py:93:        rc = dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\createwin.py:106:    d = TestPieDialog(MakeDlgTemplate())
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\dlgtest.py:17:class TestDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\dlgtest.py:26:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\dlgtest.py:78:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\dlgtest.py:90:    TestDialog(modal)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\dlgtest.py:115:    # 	dlg=dialog.Dialog(1010)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\dlgtest.py:117:    # 	dlg.EndDialog(0)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\dlgtest.py:136:    dlg = win32ui.CreateDialog(win32ui.IDD_DEBUGGER)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\dyndlg.py:71:    dialog.Dialog(MakeDlgTemplate()).DoModal()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\dyndlg.py:86:    dialog.Dialog(dlg).DoModal()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\hiertest.py:75:    dlg = hierlist.HierDialog("hier list test", testList2)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\hiertest.py:81:    dlg = hierlist.HierDialog("hier list test", testList2)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\progressbar.py:74:class TestDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\progressbar.py:75:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\progressbar.py:76:        rc = dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\progressbar.py:97:    d = TestDialog(MakeDlgTemplate())
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\sliderdemo.py:9:class MyDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\sliderdemo.py:44:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\sliderdemo.py:45:        rc = dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\sliderdemo.py:71:    dia = MyDialog()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\basictimerapp.py:14:class TimerAppDialog(dlgappcore.AppDialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\basictimerapp.py:35:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\basictimerapp.py:46:        dlgappcore.AppDialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\basictimerapp.py:226:    def CreateDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\basictimerapp.py:227:        return TimerAppDialog()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\basictimerapp.py:250:    t = TimerAppDialog("Test Dialog")
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\customprint.py:80:        self.prtDlg = ImagePrintDialog(pInfo, PRINTDLGORD, flags)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\customprint.py:81:        pInfo.SetPrintDialog(self.prtDlg)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\customprint.py:148:class ImagePrintDialog(dialog.PrintDialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\customprint.py:160:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\customprint.py:163:        return dialog.PrintDialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\dlgappdemo.py:16:    def CreateDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\dlgappdemo.py:17:        return TestAppDialog()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\dlgappdemo.py:20:class TestAppDialog(dlgappcore.AppDialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\dlgappdemo.py:25:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\dojobapp.py:14:class DoJobAppDialog(dlgappcore.AppDialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\dojobapp.py:27:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\dojobapp.py:50:    def CreateDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\dojobapp.py:51:        return DoJobAppDialog("Do Something")
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\app\dojobapp.py:63:    t = DoJobAppDialog("Copy To")
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxserialtest.py:68:class TestSerDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxserialtest.py:82:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxserialtest.py:83:        rc = dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxserialtest.py:99:            self.EndDialog(win32con.IDCANCEL)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxserialtest.py:111:                self.EndDialog(win32con.IDCANCEL)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxserialtest.py:124:    d = TestSerDialog(MakeDlgTemplate())
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxtest.py:61:    class TestCalDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxtest.py:62:        def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxtest.py:91:            rc = dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxtest.py:104:                self.EndDialog(win32con.IDCANCEL)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxtest.py:139:    class TestVideoDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxtest.py:140:        def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxtest.py:141:            rc = dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\Demos\ocx\ocxtest.py:156:                self.EndDialog(win32con.IDCANCEL)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\ideoptions.py:22:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\ideoptions.py:69:        return dialog.PropertyPage.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\ideoptions.py:79:            d = win32ui.CreateFontDialog(existingFormat, flags, None, self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\ideoptions.py:109:        dlg = win32ui.CreateFontDialog(fmt)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\list.py:8:class ListDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\list.py:43:            self.EndDialog(win32con.IDOK)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\list.py:68:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\list.py:69:        rc = dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\list.py:93:class ListsDialog(ListDialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\list.py:119:    dlg = ListDialog(title, lst)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\list.py:127:    dlg = ListsDialog(title, lists, headings)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:44:class CStatusProgressDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:53:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:54:        rc = dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:67:        self.EndDialog(0)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:99:class CThreadedStatusProcessDialog(CStatusProgressDialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:106:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:107:        rc = CStatusProgressDialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:174:        self.dialog = CThreadedStatusProcessDialog(
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:189:def StatusProgressDialog(title, msg="", maxticks=100, parent=None):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:190:    d = CStatusProgressDialog(title, msg, maxticks)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:195:def ThreadedStatusProgressDialog(title, msg="", maxticks=100):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:213:    d = StatusProgressDialog("A Demo", "Doing something...")
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\dialogs\status.py:227:    d = ThreadedStatusProgressDialog("A threaded demo", "Doing something")
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\app.py:342:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\dlgappcore.py:14:class AppDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\dlgappcore.py:21:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\dlgappcore.py:22:        return dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\dlgappcore.py:60:        self.dlg = self.frame = self.CreateDialog()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\dlgappcore.py:64:                "No dialog was created by CreateDialog(). Subclasses need to implement CreateDialog."
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\dlgappcore.py:72:    def CreateDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py:49:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py:50:        rc = dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py:62:        dlg = win32ui.CreateFileDialog(
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py:425:        dlg = win32ui.CreateFileDialog(
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py:667:                    d = win32ui.CreateFileDialog(
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\sgrepmdi.py:241:        d = GrepDialog(
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\sgrepmdi.py:444:        dlg = win32ui.CreateFileDialog(
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\sgrepmdi.py:460:class GrepDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\sgrepmdi.py:610:        dlg = GrepParamsDialog(items)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\sgrepmdi.py:639:class GrepParamsDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\sgrepmdi.py:710:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\sgrepmdi.py:714:        return self._obj_.OnInitDialog()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\toolmenu.py:158:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\toolmenu.py:195:        return dialog.PropertyPage.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\editor\configui.py:84:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\editor\configui.py:104:        rc = dialog.PropertyPage.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\editor\configui.py:141:            d = win32ui.CreateColorDialog(self.edgeColor, 0, self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\editor\configui.py:232:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\framework\editor\configui.py:236:        rc = dialog.PropertyPage.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\mfc\dialog.py:28:class Dialog(window.Wnd):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\mfc\dialog.py:39:            dlg = win32ui.CreateDialog(id, self.dll)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\mfc\dialog.py:58:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\mfc\dialog.py:99:class PrintDialog(Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\mfc\dialog.py:120:        dlg = win32ui.CreatePrintDialog(dlgID, printSetupOnly, flags, parent, self.dll)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\mfc\dialog.py:150:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\mfc\dialog.py:152:        return self._obj_.OnInitDialog()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\mfc\dialog.py:218:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\mfc\dialog.py:219:        return self._obj_.OnInitDialog()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\mfc\dialog.py:270:        def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\mfc\dialog.py:272:            return Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\configui.py:51:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\configui.py:120:        self.GetParent().EndDialog(win32con.IDCANCEL)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\configui.py:138:        d = win32ui.CreateFontDialog(baseFormat, flags, None, self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\configui.py:173:            d = win32ui.CreateFontDialog(format, flags, None, self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\configui.py:199:            d = win32ui.CreateColorDialog(bg, 0, self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:42:def ShowFindDialog():
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:43:    _ShowDialog(FindDialog)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:46:def ShowReplaceDialog():
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:47:    _ShowDialog(ReplaceDialog)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:50:def _ShowDialog(dlgClass):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:67:        ShowFindDialog()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:198:class FindReplaceDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:203:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:234:        return dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:263:class FindDialog(FindReplaceDialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:342:class ReplaceDialog(FindReplaceDialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:447:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:448:        rc = FindReplaceDialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\find.py:511:    ShowFindDialog()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\view.py:418:        find.ShowFindDialog()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\view.py:428:        find.ShowReplaceDialog()
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\view.py:719:        # 		self.prtDlg = PrintDialog(pInfo, PRINTDLGORD, flags)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\scintilla\view.py:720:        # 		pInfo.SetPrintDialog(self.prtDlg)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\browseProjects.py:264:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\browseProjects.py:266:        return dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\browseProjects.py:275:def BrowseDialog():
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\browser.py:336:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\browser.py:382:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\browser.py:384:        return dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\hierlist.py:37:class HierDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\hierlist.py:53:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\hierlist.py:56:        return dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\regedit.py:206:        class EditDialog(dialog.Dialog):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\regedit.py:211:            def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\regedit.py:225:                return dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\regedit.py:246:        d = EditDialog(newVal)
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\regpy.py:51:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\pythonwin\pywin\tools\regpy.py:53:        RegEditPropertyPage.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:363:        self.logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:430:        warning will be logged to this module's logger.
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:433:            self.logger.warning("Trying to flush to disk when we're not in memory")
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:460:        self.logger.info("Opening a file on disk")
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:470:            self.logger.info("Saving with filename in: %r", file_dir)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:478:                self.logger.info("Opening file: %r", path)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:483:                self.logger.exception("Error opening temporary file")
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:499:            self.logger.info(
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:505:                self.logger.exception("Error creating named temporary file")
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:539:            self.logger.warning("bwritten != len(data) (%d != %d)", bwritten, len(data))
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:548:            self.logger.info("Flushing to disk")
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:598:        self.logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:625:            self.logger.debug("Calling %s with data[%d:%d]", on_name, start, end)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:628:            self.logger.debug("Calling %s with no data", on_name)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:700:            self.logger.warning(
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:785:            self.logger.warning(
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:827:                            self.logger.debug("Skipping duplicate ampersand/semicolon at %d", i)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:929:                self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1019:            self.logger.warning(
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1090:                    self.logger.warning("Look-back buffer error")
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1129:                        self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1139:                        self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1157:                        self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1202:                        self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1215:                    self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1245:                    self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1261:                    self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1407:                        self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1421:                self.logger.warning("Skipping data after last boundary")
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1428:                self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1530:        self.logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1635:                self.logger.error("No boundary given")
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1716:                    self.logger.warning("Unknown Content-Transfer-Encoding: %r", transfer_encoding)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1748:            self.logger.warning("Unknown Content-Type: %r", content_type)
scripts\mcp\.venv\Lib\site-packages\python_multipart\multipart.py:1805:        logging.getLogger(__name__).warning("No Content-Type header given")
scripts\mcp\.venv\Lib\site-packages\setuptools\logging.py:2:import logging
scripts\mcp\.venv\Lib\site-packages\setuptools\logging.py:8:    return record.levelno < logging.WARNING
scripts\mcp\.venv\Lib\site-packages\setuptools\logging.py:13:    Configure logging to emit warning and above to stderr
scripts\mcp\.venv\Lib\site-packages\setuptools\logging.py:18:    err_handler = logging.StreamHandler()
scripts\mcp\.venv\Lib\site-packages\setuptools\logging.py:19:    err_handler.setLevel(logging.WARNING)
scripts\mcp\.venv\Lib\site-packages\setuptools\logging.py:20:    out_handler = logging.StreamHandler(sys.stdout)
scripts\mcp\.venv\Lib\site-packages\setuptools\logging.py:23:    logging.basicConfig(
scripts\mcp\.venv\Lib\site-packages\setuptools\logging.py:24:        format="{message}", style='{', handlers=handlers, level=logging.DEBUG)
scripts\mcp\.venv\Lib\site-packages\setuptools\logging.py:35:    logging.root.setLevel(level*10)
scripts\mcp\.venv\Lib\site-packages\setuptools\__init__.py:22:from . import logging
scripts\mcp\.venv\Lib\site-packages\setuptools\__init__.py:85:    logging.configure()
scripts\mcp\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:13:import logging
scripts\mcp\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:56:_logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:341:            _logger.info(f"Installing {category} as non editable")
scripts\mcp\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:398:        _logger.warning(msg + _LENIENT_WARNING)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:462:        _logger.warning(msg + _STRICT_WARNING)
scripts\mcp\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:502:        _logger.warning(msg + _LENIENT_WARNING)
scripts\mcp\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:6:import logging
scripts\mcp\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:23:_logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:47:            _logger.debug(summary)
scripts\mcp\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:48:            _logger.debug(ex.details)
scripts\mcp\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:134:            _logger.debug(f"ignored error: {ex.__class__.__name__} - {ex}")
scripts\mcp\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:427:        _logger.debug(f"ignored error: {ex.__class__.__name__} - {ex}")
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:10:import logging
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:33:_logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:237:                _logger.warning(f"Command option {cmd}.{key} is not defined")
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:263:        _logger.warning(f"{msg}: {ex}")
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:12:_logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:52:    Depending on the level of the verbosity of the ``logging`` configuration
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:54:    ``summary`` and ``details`` (when the logging level is set to :obj:`logging.DEBUG`).
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:91:        if _logger.getEffectiveLevel() <= logging.DEBUG and self.details:
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:8:_logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:77:    _logger.warning(
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:155:            _logger.debug(msg)
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:163:            _logger.debug(msg)
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:168:                _logger.debug("Problem with download, skipping validation")
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:194:            _logger.warning(
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:240:        _logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:253:        _logger.warning(f"`{value}` - using extras for entry points is not recommended")
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:186:        log.log(level, msg)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dist.py:47:        log.log(log.WARN, msg)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\dist.py:960:        log.log(level, msg)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\log.py:4:# replaced with a standard Python logging implementation.
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\log.py:19:    def _log(self, level, msg, args):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\log.py:39:    def log(self, level, msg, *args):
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\log.py:40:        self._log(level, msg, args)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\log.py:43:        self._log(DEBUG, msg, args)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\log.py:46:        self._log(INFO, msg, args)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\log.py:49:        self._log(WARN, msg, args)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\log.py:52:        self._log(ERROR, msg, args)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\log.py:55:        self._log(FATAL, msg, args)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\log.py:58:_global_log = Log()
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:253:        self.changelog = self._format_changelog(self.changelog)
scripts\mcp\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:597:    def _format_changelog(self, changelog):
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1633:           def add_logging(f: Callable[P, T]) -> Callable[P, T]:
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1634:               '''A type-safe decorator to add logging to a function.'''
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1636:                   logging.info(f'{f.__name__} was called')
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1640:           @add_logging
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:1077:    `side_effect` can be used for logging, updating progress bars, or anything
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3281:    # "Reservoir-Sampling Algorithms of Time Complexity O(n(1+log(N/n)))".
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3288:    W = exp(log(random()) / k)
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3292:    next_index = k + floor(log(random()) / log(1 - W))
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3299:            W *= exp(log(random()) / k)
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3300:            next_index += floor(log(random()) / log(1 - W)) + 1
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3310:    weight_keys = (log(random()) / weight for weight in weights)
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3320:    weights_to_skip = log(random()) / smallest_weight_key
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3329:            weight_key = log(r_2) / weight
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3332:            weights_to_skip = log(random()) / smallest_weight_key
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:115:        logger.debug(
scripts\mcp\.venv\Lib\site-packages\sse_starlette\sse.py:2:import logging
scripts\mcp\.venv\Lib\site-packages\sse_starlette\sse.py:26:logger = logging.getLogger(__name__)
scripts\mcp\.venv\Lib\site-packages\sse_starlette\sse.py:73:    logger.debug(
scripts\mcp\.venv\Lib\site-packages\sse_starlette\sse.py:179:            logger.debug("chunk: %s", chunk)
scripts\mcp\.venv\Lib\site-packages\sse_starlette\sse.py:200:                logger.debug("Got event: http.disconnect. Stop streaming.")
scripts\mcp\.venv\Lib\site-packages\sse_starlette\sse.py:236:            logger.debug("ping: %s", ping_bytes)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:6:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:7:import logging.config
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:21:from uvicorn.logging import TRACE_LOG_LEVEL
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:34:    "critical": logging.CRITICAL,
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:35:    "error": logging.ERROR,
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:36:    "warning": logging.WARNING,
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:37:    "info": logging.INFO,
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:38:    "debug": logging.DEBUG,
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:68:LOGGING_CONFIG: dict[str, Any] = {
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:73:            "()": "uvicorn.logging.DefaultFormatter",
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:78:            "()": "uvicorn.logging.AccessFormatter",
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:85:            "class": "logging.StreamHandler",
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:90:            "class": "logging.StreamHandler",
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:101:logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:195:        log_config: dict[str, Any] | str | RawConfigParser | IO[Any] | None = LOGGING_CONFIG,
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:275:        self.configure_logging()
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:283:            logger.warning(
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:312:                    logger.warning(
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:319:            logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:327:            logger.info("Loading environment from '%s'", env_file)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:340:            logger.warning('"workers" flag is ignored when reloading is enabled.')
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:359:    def configure_logging(self) -> None:
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:360:        logging.addLevelName(TRACE_LOG_LEVEL, "TRACE")
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:367:                logging.config.dictConfig(self.log_config)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:371:                    logging.config.dictConfig(loaded_config)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:379:                    logging.config.dictConfig(loaded_config)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:382:                # https://docs.python.org/3/library/logging.config.html#configuration-file-format
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:383:                logging.config.fileConfig(self.log_config, disable_existing_loggers=False)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:390:            logging.getLogger("uvicorn.error").setLevel(log_level)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:391:            logging.getLogger("uvicorn.access").setLevel(log_level)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:392:            logging.getLogger("uvicorn.asgi").setLevel(log_level)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:394:            logging.getLogger("uvicorn.access").handlers = []
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:395:            logging.getLogger("uvicorn.access").propagate = False
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:438:            logger.error("Error loading ASGI app. %s" % exc)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:445:                logger.error("Error loading ASGI app factory: %s", exc)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:449:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:469:        if logger.getEffectiveLevel() <= TRACE_LOG_LEVEL:
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:491:                logger.error(exc)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:518:                logger.error(exc)
scripts\mcp\.venv\Lib\site-packages\uvicorn\config.py:525:        logger.info(message, *logger_args, extra={"color_message": color_message})
scripts\mcp\.venv\Lib\site-packages\uvicorn\logging.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\logging.py:14:class ColourizedFormatter(logging.Formatter):
scripts\mcp\.venv\Lib\site-packages\uvicorn\logging.py:25:        logging.DEBUG: lambda level_name: click.style(str(level_name), fg="cyan"),
scripts\mcp\.venv\Lib\site-packages\uvicorn\logging.py:26:        logging.INFO: lambda level_name: click.style(str(level_name), fg="green"),
scripts\mcp\.venv\Lib\site-packages\uvicorn\logging.py:27:        logging.WARNING: lambda level_name: click.style(str(level_name), fg="yellow"),
scripts\mcp\.venv\Lib\site-packages\uvicorn\logging.py:28:        logging.ERROR: lambda level_name: click.style(str(level_name), fg="red"),
scripts\mcp\.venv\Lib\site-packages\uvicorn\logging.py:29:        logging.CRITICAL: lambda level_name: click.style(str(level_name), fg="bright_red"),
scripts\mcp\.venv\Lib\site-packages\uvicorn\logging.py:55:    def formatMessage(self, record: logging.LogRecord) -> str:
scripts\mcp\.venv\Lib\site-packages\uvicorn\logging.py:97:    def formatMessage(self, record: logging.LogRecord) -> str:
scripts\mcp\.venv\Lib\site-packages\uvicorn\main.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\main.py:22:    LOGGING_CONFIG,
scripts\mcp\.venv\Lib\site-packages\uvicorn\main.py:45:logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\main.py:200:    help="Logging configuration file. Supported formats: .ini, .json, .yaml.",
scripts\mcp\.venv\Lib\site-packages\uvicorn\main.py:220:    help="Enable/Disable colorized logging.",
scripts\mcp\.venv\Lib\site-packages\uvicorn\main.py:429:        log_config=LOGGING_CONFIG if log_config is None else log_config,
scripts\mcp\.venv\Lib\site-packages\uvicorn\main.py:488:    log_config: dict[str, Any] | str | RawConfigParser | IO[Any] | None = LOGGING_CONFIG,
scripts\mcp\.venv\Lib\site-packages\uvicorn\main.py:568:        logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\main.py:569:        logger.warning("You must pass the application as an import string to enable 'reload' or 'workers'.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:38:logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:84:        logger.info(message, process_id, extra={"color_message": color_message})
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:94:        logger.info(message, process_id, extra={"color_message": color_message})
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:172:                logger.error(exc)
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:194:            logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:200:            logger.info("Uvicorn running on unix socket %s (Press CTRL+C to quit)", config.uds)
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:216:            logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:258:            logger.warning(f"Maximum request limit of {max_requests} exceeded. Terminating process.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:264:        logger.info("Shutting down")
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:284:            logger.error(
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:299:            logger.info(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\server.py:306:            logger.info(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\workers.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\workers.py:34:        logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\workers.py:35:        logger.handlers = self.log.error_log.handlers
scripts\mcp\.venv\Lib\site-packages\uvicorn\workers.py:36:        logger.setLevel(self.log.error_log.level)
scripts\mcp\.venv\Lib\site-packages\uvicorn\workers.py:37:        logger.propagate = False
scripts\mcp\.venv\Lib\site-packages\uvicorn\workers.py:39:        logger = logging.getLogger("uvicorn.access")
scripts\mcp\.venv\Lib\site-packages\uvicorn\workers.py:40:        logger.handlers = self.log.access_log.handlers
scripts\mcp\.venv\Lib\site-packages\uvicorn\workers.py:41:        logger.setLevel(self.log.access_log.level)
scripts\mcp\.venv\Lib\site-packages\uvicorn\workers.py:42:        logger.propagate = False
scripts\mcp\.venv\Lib\site-packages\uvicorn\_subprocess.py:75:    # Logging needs to be setup again for each child.
scripts\mcp\.venv\Lib\site-packages\uvicorn\_subprocess.py:76:    config.configure_logging()
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:37:        self.logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:48:        self.logger.info("Waiting for application startup.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:59:            self.logger.error("Application startup failed. Exiting.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:62:            self.logger.info("Application startup complete.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:67:        self.logger.info("Waiting for application shutdown.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:73:            self.logger.error("Application shutdown failed. Exiting.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:76:            self.logger.info("Application shutdown complete.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:94:                self.logger.info(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:97:                self.logger.error(msg, exc_info=exc)
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:121:                self.logger.error(message["message"])
scripts\mcp\.venv\Lib\site-packages\uvicorn\lifespan\on.py:134:                self.logger.error(message["message"])
scripts\mcp\.venv\Lib\site-packages\uvicorn\loops\asyncio.py:2:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\loops\asyncio.py:5:logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:12:from uvicorn.logging import TRACE_LOG_LEVEL
scripts\mcp\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:40:        self.logger = logging.getLogger("uvicorn.asgi")
scripts\mcp\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:43:            self.logger.log(TRACE_LOG_LEVEL, message, *args, **kwargs)
scripts\mcp\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:45:        self.logger.trace = trace  # type: ignore
scripts\mcp\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:63:            self.logger.trace(  # type: ignore
scripts\mcp\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:71:            self.logger.trace(  # type: ignore
scripts\mcp\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:78:        self.logger.trace(log_text, prefix, task_counter, logged_scope)  # type: ignore
scripts\mcp\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:83:            self.logger.trace(log_text, prefix, task_counter)  # type: ignore
scripts\mcp\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:87:            self.logger.trace(log_text, prefix, task_counter)  # type: ignore
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:22:from uvicorn.logging import TRACE_LOG_LEVEL
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:52:        self.logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:53:        self.access_logger = logging.getLogger("uvicorn.access")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:54:        self.access_log = self.access_logger.hasHandlers()
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:99:        if self.logger.level <= TRACE_LOG_LEVEL:
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:101:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection made", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:106:        if self.logger.level <= TRACE_LOG_LEVEL:
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:108:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection lost", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:155:        self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:158:            self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:180:                self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:226:                    self.logger.warning(message)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:273:        if self.logger.level <= TRACE_LOG_LEVEL:  # pragma: full coverage
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:275:            self.logger.log(TRACE_LOG_LEVEL, "%sUpgrading to WebSocket", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:369:        logger: logging.Logger,
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:370:        access_logger: logging.Logger,
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:408:            self.logger.error(msg, exc_info=exc)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:416:                self.logger.error(msg, result)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:420:                self.logger.error(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:424:                self.logger.error(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:473:                self.access_logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:23:from uvicorn.logging import TRACE_LOG_LEVEL
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:57:        self.logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:58:        self.access_logger = logging.getLogger("uvicorn.access")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:59:        self.access_log = self.access_logger.hasHandlers()
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:109:        if self.logger.level <= TRACE_LOG_LEVEL:
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:111:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection made", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:116:        if self.logger.level <= TRACE_LOG_LEVEL:
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:118:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection lost", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:158:        self.logger.warning("Unsupported upgrade request.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:161:            self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:174:            self.logger.warning(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:184:        if self.logger.level <= TRACE_LOG_LEVEL:
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:186:            self.logger.log(TRACE_LOG_LEVEL, "%sUpgrading to WebSocket", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:270:            self.logger.warning(message)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:372:        logger: logging.Logger,
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:373:        access_logger: logging.Logger,
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:414:            self.logger.error(msg, exc_info=exc)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:422:                self.logger.error(msg, result)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:426:                self.logger.error(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:430:                self.logger.error(msg)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:476:                self.access_logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:5:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:34:from uvicorn.logging import TRACE_LOG_LEVEL
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:61:    logger: logging.Logger | logging.LoggerAdapter[Any]
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:113:            logger=logging.getLogger("uvicorn.error"),
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:129:        if self.logger.isEnabledFor(TRACE_LOG_LEVEL):
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:131:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection made", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:138:        if self.logger.isEnabledFor(TRACE_LOG_LEVEL):
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:140:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection lost", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:250:            self.logger.exception("Exception in ASGI application\n")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:259:                self.logger.error("ASGI callable returned without sending handshake.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:263:                self.logger.error("ASGI callable should return None, but returned '%s'.", result)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:273:                self.logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:291:                self.logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:302:                self.logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:28:from uvicorn.logging import TRACE_LOG_LEVEL
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:58:        self.logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:92:            logger=logging.getLogger("uvicorn.error"),
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:111:        if self.logger.level <= TRACE_LOG_LEVEL:
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:113:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection made", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:120:        if self.logger.level <= TRACE_LOG_LEVEL:
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:122:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection lost", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:231:                self.logger.exception("Invalid UTF-8 sequence received from client.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:276:            self.logger.exception("Exception in ASGI application\n")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:281:                self.logger.error("ASGI callable returned without completing handshake.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:285:                self.logger.error("ASGI callable should return None, but returned '%s'.", result)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:304:                self.logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:327:                self.logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py:343:                self.logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:4:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:26:from uvicorn.logging import TRACE_LOG_LEVEL
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:52:        self.logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:96:        if self.logger.level <= TRACE_LOG_LEVEL:
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:98:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection made", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:105:        if self.logger.level <= TRACE_LOG_LEVEL:
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:107:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection lost", prefix)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:239:            self.logger.exception("Exception in ASGI application\n")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:244:                self.logger.error("ASGI callable returned without completing handshake.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:248:                self.logger.error("ASGI callable should return None, but returned '%s'.", result)
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:259:                self.logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:282:                self.logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:300:                self.logger.info(
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:24:logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:55:                logger.warning(
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:80:        logger.info(message, extra={"color_message": color_message})
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:116:        logger.info(message, extra={"color_message": color_message})
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:22:logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:83:            logger.info(f"Terminated child process [{self.process.pid}]")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:94:        logger.info(f"Waiting for child process [{self.process.pid}]")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:147:        logger.info(message, extra={"color_message": color_message})
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:160:        logger.info(message, extra={"color_message": color_message})
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:176:            logger.info(f"Child process [{process.pid}] died")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:189:                logger.debug(f"Received signal {sig_name}, but no handler is defined for it.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:192:        logger.info("Received SIGINT, exiting.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:196:        logger.info("Received SIGTERM, exiting.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:200:        logger.info("Received SIGBREAK, exiting.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:204:        logger.info("Received SIGHUP, restarting processes.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:208:        logger.info("Received SIGTTIN, increasing the number of processes.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:215:        logger.info("Received SIGTTOU, decreasing number of processes.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:217:            logger.info("Already reached one process, cannot decrease the number of processes anymore.")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\statreload.py:3:import logging
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\statreload.py:12:logger = logging.getLogger("uvicorn.error")
scripts\mcp\.venv\Lib\site-packages\uvicorn\supervisors\statreload.py:27:            logger.warning("--reload-include and --reload-exclude have no effect unless watchfiles is installed.")
scripts\mcp\.venv\Lib\site-packages\win32\Demos\eventLogDemo.py:8:def ReadLog(computer, logType="Application", dumpEachRecord=0):
scripts\mcp\.venv\Lib\site-packages\win32\Demos\eventLogDemo.py:10:    h = win32evtlog.OpenEventLog(computer, logType)
scripts\mcp\.venv\Lib\site-packages\win32\Demos\eventLogDemo.py:16:        objects = win32evtlog.ReadEventLog(
scripts\mcp\.venv\Lib\site-packages\win32\Demos\eventLogDemo.py:62:    win32evtlog.CloseEventLog(h)
scripts\mcp\.venv\Lib\site-packages\win32\Demos\eventLogDemo.py:134:        ReadLog(computer, logType, verbose > 0)
scripts\mcp\.venv\Lib\site-packages\win32\Demos\win32gui_dialog.py:306:    def OnInitDialog(self, hwnd, msg, wparam, lparam):
scripts\mcp\.venv\Lib\site-packages\win32\Demos\win32gui_dialog.py:423:class DemoDialog(DemoWindowBase):
scripts\mcp\.venv\Lib\site-packages\win32\Demos\win32gui_dialog.py:428:        win32gui.EndDialog(hwnd, 0)
scripts\mcp\.venv\Lib\site-packages\win32\Demos\win32gui_dialog.py:432:    w = DemoDialog()
scripts\mcp\.venv\Lib\site-packages\win32\Demos\win32rcparser_demo.py:39:    def OnInitDialog(self, hwnd, msg, wparam, lparam):
scripts\mcp\.venv\Lib\site-packages\win32\Demos\win32rcparser_demo.py:56:            win32gui.EndDialog(hwnd, id)
scripts\mcp\.venv\Lib\site-packages\win32\Demos\win32rcparser_demo.py:59:        win32gui.EndDialog(hwnd, 0)
scripts\mcp\.venv\Lib\site-packages\win32\Demos\win32ts_logoff_disconnected.py:18:        print("Logging off disconnected user:", username)
scripts\mcp\.venv\Lib\site-packages\win32\lib\ntsecuritycon.py:130:DOMAIN_ALIAS_RID_LOGGING_USERS = 559
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32cryptcon.py:1336:CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG = 0x1
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32cryptcon.py:1337:CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG = 0x2
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32evtlogutil.py:33:    # function to get a handle of an event log, the event logging service
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32evtlogutil.py:217:    h = win32evtlog.OpenEventLog(machineName, logName)
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32evtlogutil.py:220:            objects = win32evtlog.ReadEventLog(h, readFlags, 0)
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32evtlogutil.py:225:        win32evtlog.CloseEventLog(h)
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32pdhquery.py:46:    query.collectdatawhile(period) # start a logging thread for collecting data
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32pdhquery.py:47:    query.collectdatawhile_stop() # signal the logging thread to stop logging
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32pdhquery.py:532:        on the next logging iteration.
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32rcparser.py:394:    def parse_dialog(self, name):
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32timezone.py:242:import logging
scripts\mcp\.venv\Lib\site-packages\win32\lib\win32timezone.py:276:log = logging.getLogger(__file__)
scripts\mcp\.venv\Lib\site-packages\win32\lib\winioctlcon.py:128:DISK_LOGGING_START = 0
scripts\mcp\.venv\Lib\site-packages\win32\lib\winioctlcon.py:129:DISK_LOGGING_STOP = 1
scripts\mcp\.venv\Lib\site-packages\win32\lib\winioctlcon.py:130:DISK_LOGGING_DUMP = 2
scripts\mcp\.venv\Lib\site-packages\win32\lib\winioctlcon.py:449:IOCTL_DISK_LOGGING = CTL_CODE(IOCTL_DISK_BASE, 0x000A, METHOD_BUFFERED, FILE_ANY_ACCESS)
scripts\mcp\.venv\Lib\site-packages\win32\scripts\backupEventLog.py:9:def BackupClearLog(logType):
scripts\mcp\.venv\Lib\site-packages\win32\scripts\backupEventLog.py:29:        hlog = win32evtlog.OpenEventLog(None, logType)
scripts\mcp\.venv\Lib\site-packages\win32\scripts\backupEventLog.py:37:        win32evtlog.ClearEventLog(hlog, fname)
scripts\mcp\.venv\Lib\site-packages\win32\scripts\backupEventLog.py:40:        win32evtlog.CloseEventLog(hlog)
scripts\mcp\.venv\Lib\site-packages\win32\scripts\backupEventLog.py:44:    BackupClearLog("Application")
scripts\mcp\.venv\Lib\site-packages\win32\scripts\backupEventLog.py:45:    BackupClearLog("System")
scripts\mcp\.venv\Lib\site-packages\win32\scripts\backupEventLog.py:46:    BackupClearLog("Security")
scripts\mcp\.venv\Lib\site-packages\win32\scripts\ControlService.py:53:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\win32\scripts\ControlService.py:70:        return dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\win32\scripts\ControlService.py:269:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\win32\scripts\ControlService.py:275:        return dialog.Dialog.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\win32\scripts\regsetup.py:213:        dlg = win32ui.CreateFileDialog(1, None, fileName, flags, filter, None)
scripts\mcp\.venv\Lib\site-packages\win32\scripts\VersionStamp\vssutil.py:70:def VssLog(project, linePrefix="", noLabels=5, maxItems=150):
scripts\mcp\.venv\Lib\site-packages\win32com\client\makepy.py:172:            self.dialog = status.ThreadedStatusProgressDialog(tlb_desc)
scripts\mcp\.venv\Lib\site-packages\win32com\client\tlbrowse.py:38:class TypeBrowseDialog(TypeBrowseDialog_Parent):
scripts\mcp\.venv\Lib\site-packages\win32com\client\tlbrowse.py:78:        dlg = win32ui.CreateFileDialog(1, None, None, openFlags, fspec)
scripts\mcp\.venv\Lib\site-packages\win32com\client\tlbrowse.py:87:    def OnInitDialog(self):
scripts\mcp\.venv\Lib\site-packages\win32com\client\tlbrowse.py:104:        return TypeBrowseDialog_Parent.OnInitDialog(self)
scripts\mcp\.venv\Lib\site-packages\win32com\client\tlbrowse.py:273:    dlg = TypeBrowseDialog(fname)
scripts\mcp\.venv\Lib\site-packages\win32com\demos\trybag.py:64:    log = Log()
scripts\mcp\.venv\Lib\site-packages\win32com\server\dispatcher.py:130:                self.logger.exception("pythoncom server error")
scripts\mcp\.venv\Lib\site-packages\win32com\server\dispatcher.py:139:            self.logger.debug(record)
scripts\mcp\.venv\Lib\site-packages\win32com\test\errorSemantics.py:176:    import logging
scripts\mcp\.venv\Lib\site-packages\win32com\test\errorSemantics.py:178:    logging = None
scripts\mcp\.venv\Lib\site-packages\win32com\test\errorSemantics.py:179:if logging is not None:
scripts\mcp\.venv\Lib\site-packages\win32com\test\errorSemantics.py:182:    class TestLogHandler(logging.Handler):
scripts\mcp\.venv\Lib\site-packages\win32com\test\errorSemantics.py:185:            logging.Handler.__init__(self)
scripts\mcp\.venv\Lib\site-packages\win32com\test\errorSemantics.py:202:        formatter = logging.Formatter("%(message)s")
scripts\mcp\.venv\Lib\site-packages\win32com\test\errorSemantics.py:204:        log = logging.getLogger("win32com_test")
scripts\mcp\.venv\Lib\site-packages\win32com\test\errorSemantics.py:238:    if logging is not None:
scripts\mcp\.venv\Lib\site-packages\win32com\test\util.py:1:import logging
scripts\mcp\.venv\Lib\site-packages\win32com\test\util.py:174:class LogHandler(logging.Handler):
scripts\mcp\.venv\Lib\site-packages\win32com\test\util.py:177:        logging.Handler.__init__(self)
scripts\mcp\.venv\Lib\site-packages\win32com\test\util.py:190:        _win32com_logger = logging.Logger("test")
scripts\mcp\.venv\Lib\site-packages\win32com\test\util.py:192:        _win32com_logger.addHandler(handler)
scripts\mcp\.venv\Lib\site-packages\win32com\test\util.py:195:    handler = _win32com_logger.handlers[0]
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\objectPicker.py:46:    do = picker.InvokeDialog(hwnd)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:55:import logging
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:57:logger = logging  # use logging module global methods for now.
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:59:# still a bit confused about log(n, ...) vs logger.info/debug()
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:113:    logger.info("New connection point is at %s", container_name)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:124:    logger.debug("Removing connection point '%s' from %s", container_name, dn)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:129:    logger.info("Deleted service connection point '%s'", container_name)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:202:    logger.info("Set security on object for account %r", trustee)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:233:    logger.debug("SpnRegister using DN '%s'", serviceAcctDN)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:246:    logger.debug("DsWriteAccountSpn with spns %s")
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:269:def log(level, msg, *args):
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:314:        log(2, "ScpDelete ignoring ERROR_DS_OBJ_NOT_FOUND for service-class '%s'", sc)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:334:    log(2, "Created SPN: %s", spn)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:459:        help="""The log-level to use - may be a number or a logging
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:461:        default=str(logging.WARNING),
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:476:            log_level = int(getattr(logging, options.log_level.upper()))
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:480:        sl = logger.setLevel
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:483:        # logger is logging module
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:484:        sl = logging.getLogger().setLevel
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:498:        log(1, "--test - pretending args are:\n %s", args)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:502:            log(2, "--test: --service-class=%s", options.service_class)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:505:            log(2, "--test: --keyword=%s", options.keywords)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:508:            log(2, "--test: --binding-string=%s", options.binding_string)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:519:        log(2, "Translating account name '%s'", options.account_name)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:523:        log(2, "NameSamCompatible is '%s'", options.account_name_sam)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:527:        log(2, "NameFullyQualifiedDNis '%s'", options.account_name_dn)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:537:                log(2, "Executing '%s'...", arg)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:539:                log(1, "%s: %s", arg, result)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\scp.py:558:            log(1, "Command '%s' failed: %s", arg, err_msg)
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\search.py:37:def log(level, msg, *args):
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\search.py:57:        log(2, "property '%s' has type '%s'", prop_name, getADsTypeName(prop_type))
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\search.py:69:        log(0, "Can't find the global catalog")
scripts\mcp\.venv\Lib\site-packages\win32comext\adsi\demos\search.py:74:    log(3, "SetSearchPreference returned %d/%r", hr, statuses)
scripts\mcp\.venv\Lib\site-packages\win32comext\internet\inetcon.py:212:URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING = 0x00001D06
scripts\mcp\.venv\Lib\site-packages\win32comext\mapi\emsabtags.py:275:PR_EMS_AB_DXA_LOGGING_LEVEL = PROP_TAG(PT_LONG, 32905)
scripts\openai_batch\.venv\Lib\site-packages\typing_extensions.py:1808:           def add_logging(f: Callable[P, T]) -> Callable[P, T]:
scripts\openai_batch\.venv\Lib\site-packages\typing_extensions.py:1809:               '''A type-safe decorator to add logging to a function.'''
scripts\openai_batch\.venv\Lib\site-packages\typing_extensions.py:1811:                   logging.info(f'{f.__name__} was called')
scripts\openai_batch\.venv\Lib\site-packages\typing_extensions.py:1815:           @add_logging
scripts\openai_batch\.venv\Lib\site-packages\anyio\streams\tls.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\anyio\streams\tls.py:332:            logging.getLogger(__name__).exception(
scripts\openai_batch\.venv\Lib\site-packages\distro\distro.py:33:import logging
scripts\openai_batch\.venv\Lib\site-packages\distro\distro.py:1363:    logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\distro\distro.py:1364:    logger.setLevel(logging.DEBUG)
scripts\openai_batch\.venv\Lib\site-packages\distro\distro.py:1365:    logger.addHandler(logging.StreamHandler(sys.stdout))
scripts\openai_batch\.venv\Lib\site-packages\distro\distro.py:1393:        logger.info(json.dumps(dist.info(), indent=4, sort_keys=True))
scripts\openai_batch\.venv\Lib\site-packages\distro\distro.py:1395:        logger.info("Name: %s", dist.name(pretty=True))
scripts\openai_batch\.venv\Lib\site-packages\distro\distro.py:1397:        logger.info("Version: %s", distribution_version)
scripts\openai_batch\.venv\Lib\site-packages\distro\distro.py:1399:        logger.info("Codename: %s", distribution_codename)
scripts\openai_batch\.venv\Lib\site-packages\dotenv\main.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\dotenv\main.py:21:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\dotenv\main.py:27:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\dotenv\main.py:61:                logger.info(
scripts\openai_batch\.venv\Lib\site-packages\dotenv\main.py:112:            logger.warning("Key %s not found in %s.", key, self.dotenv_path)
scripts\openai_batch\.venv\Lib\site-packages\dotenv\main.py:213:        logger.warning("Can't delete from %s - it doesn't exist.", dotenv_path)
scripts\openai_batch\.venv\Lib\site-packages\dotenv\main.py:225:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_trace.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_trace.py:15:        logger: logging.Logger,
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_trace.py:24:        self.debug = self.logger.isEnabledFor(logging.DEBUG)
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_trace.py:28:        self.prefix = self.logger.name.split(".")[-1]
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_trace.py:47:            self.logger.debug(message)
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_trace.py:87:            self.logger.debug(message)
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\connection.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\connection.py:22:logger = logging.getLogger("httpcore.connection")
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\http11.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\http11.py:25:logger = logging.getLogger("httpcore.http11")
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\http2.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\http2.py:26:logger = logging.getLogger("httpcore.http2")
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\http_proxy.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\http_proxy.py:32:logger = logging.getLogger("httpcore.proxy")
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:19:logger = logging.getLogger("httpcore.socks")
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\connection.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\connection.py:22:logger = logging.getLogger("httpcore.connection")
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\http11.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\http11.py:25:logger = logging.getLogger("httpcore.http11")
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\http2.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\http2.py:26:logger = logging.getLogger("httpcore.http2")
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\http_proxy.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\http_proxy.py:32:logger = logging.getLogger("httpcore.proxy")
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:19:logger = logging.getLogger("httpcore.socks")
scripts\openai_batch\.venv\Lib\site-packages\httpx\_client.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\httpx\_client.py:117:logger = logging.getLogger("httpx")
scripts\openai_batch\.venv\Lib\site-packages\httpx\_client.py:1025:        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\httpx\_client.py:1740:        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\idna\intranges.py:5:in the original list?" in time O(log(# runs)).
scripts\openai_batch\.venv\Lib\site-packages\openai\_base_client.py:10:import logging
scripts\openai_batch\.venv\Lib\site-packages\openai\_base_client.py:88:log: logging.Logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\openai\_base_client.py:481:        if log.isEnabledFor(logging.DEBUG):
scripts\openai_batch\.venv\Lib\site-packages\openai\_legacy_response.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\openai\_legacy_response.py:42:log: logging.Logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\openai\_response.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\openai\_response.py:45:log: logging.Logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\openai\__init__.py:37:from ._utils._logs import setup_logging as _setup_logging
scripts\openai_batch\.venv\Lib\site-packages\openai\__init__.py:97:_setup_logging()
scripts\openai_batch\.venv\Lib\site-packages\openai\cli\_cli.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\openai\cli\_cli.py:23:logger = logging.getLogger()
scripts\openai_batch\.venv\Lib\site-packages\openai\cli\_cli.py:24:formatter = logging.Formatter("[%(asctime)s] %(message)s")
scripts\openai_batch\.venv\Lib\site-packages\openai\cli\_cli.py:25:handler = logging.StreamHandler(sys.stderr)
scripts\openai_batch\.venv\Lib\site-packages\openai\cli\_cli.py:27:logger.addHandler(handler)
scripts\openai_batch\.venv\Lib\site-packages\openai\lib\_parsing\_completions.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\openai\lib\_parsing\_completions.py:40:log: logging.Logger = logging.getLogger("openai.lib.parsing")
scripts\openai_batch\.venv\Lib\site-packages\openai\resources\audio\transcriptions.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\openai\resources\audio\transcriptions.py:31:log: logging.Logger = logging.getLogger("openai.audio.transcriptions")
scripts\openai_batch\.venv\Lib\site-packages\openai\resources\audio\translations.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\openai\resources\audio\translations.py:26:log: logging.Logger = logging.getLogger("openai.audio.transcriptions")
scripts\openai_batch\.venv\Lib\site-packages\openai\resources\beta\realtime\realtime.py:6:import logging
scripts\openai_batch\.venv\Lib\site-packages\openai\resources\beta\realtime\realtime.py:62:log: logging.Logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\openai\resources\uploads\uploads.py:7:import logging
scripts\openai_batch\.venv\Lib\site-packages\openai\resources\uploads\uploads.py:40:log: logging.Logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\openai\_utils\_logs.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\openai\_utils\_logs.py:7:logger: logging.Logger = logging.getLogger("openai")
scripts\openai_batch\.venv\Lib\site-packages\openai\_utils\_logs.py:8:httpx_logger: logging.Logger = logging.getLogger("httpx")
scripts\openai_batch\.venv\Lib\site-packages\openai\_utils\_logs.py:16:    logging.basicConfig(
scripts\openai_batch\.venv\Lib\site-packages\openai\_utils\_logs.py:22:def setup_logging() -> None:
scripts\openai_batch\.venv\Lib\site-packages\openai\_utils\_logs.py:26:        logger.setLevel(logging.DEBUG)
scripts\openai_batch\.venv\Lib\site-packages\openai\_utils\_logs.py:27:        httpx_logger.setLevel(logging.DEBUG)
scripts\openai_batch\.venv\Lib\site-packages\openai\_utils\_logs.py:30:        logger.setLevel(logging.INFO)
scripts\openai_batch\.venv\Lib\site-packages\openai\_utils\_logs.py:31:        httpx_logger.setLevel(logging.INFO)
scripts\openai_batch\.venv\Lib\site-packages\openai\_utils\_logs.py:34:class SensitiveHeadersFilter(logging.Filter):
scripts\openai_batch\.venv\Lib\site-packages\openai\_utils\_logs.py:36:    def filter(self, record: logging.LogRecord) -> bool:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\build_env.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\build_env.py:28:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\build_env.py:244:        if logger.getEffectiveLevel() <= logging.DEBUG:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cache.py:6:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cache.py:21:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cache.py:146:                logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cache.py:200:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cache.py:272:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cache.py:282:                    logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\configuration.py:26:from pip._internal.utils.logging import getLogger
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\configuration.py:208:            logger.info("Writing to %s", fname)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\configuration.py:230:        logger.debug("Will be working with %s variant only", self.load_only)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\configuration.py:248:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\configuration.py:259:                    logger.debug("Skipping file '%s' (variant: %s)", fname, variant)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\configuration.py:268:        logger.verbose("For variant '%s', will try loading '%s'", variant, fname)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\exceptions.py:11:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\exceptions.py:30:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\exceptions.py:726:            exc_info = logger.isEnabledFor(VERBOSE)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\exceptions.py:727:            logger.warning("Failed to read %s", config, exc_info=exc_info)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:33:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:201:            logger.debug("No remote pip version found")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:206:    logger.debug("Remote version of pip: %s", remote_version)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:207:    logger.debug("Local version of pip:  %s", local_version)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:210:    logger.debug("Was pip installed by pip? %s", pip_installed_by_pip)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:245:            logger.warning("%s", upgrade_prompt, extra={"rich": True})
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:247:        logger.warning("There was an error checking the latest version of pip.")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:248:        logger.debug("See below for error", exc_info=True)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:22:from pip._internal.utils.logging import indent_log
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:30:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:55:            logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:183:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:200:            logger.warning("Built %s for %s is invalid: %s", artifact, req.name, e)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:218:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:222:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:255:                logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:262:                logger.info("Stored in directory: %s", output_dir)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:265:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:282:    logger.info("Running setup.py clean for %s", req.name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:289:        logger.error("Failed cleaning build dir for %s", req.name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:309:    logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:314:    with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:344:        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:349:        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\__init__.py:5:# init_logging() must be called before any call to logging.getLogger()
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\__init__.py:7:_log.init_logging()
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:5:import logging.config
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:34:from pip._internal.utils.logging import BrokenStdoutLoggingError, setup_logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:42:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:103:            logging.shutdown()
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:119:        level_number = setup_logging(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:129:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:140:            logger.critical(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:158:                logger.critical("Could not find an activated virtualenv (required).")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:164:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:178:            def exc_logging_wrapper(*args: Any) -> int:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:184:                    logger.error("%s", exc, extra={"rich": True})
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:185:                    logger.debug("Exception information:", exc_info=True)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:189:                    logger.critical(str(exc))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:190:                    logger.debug("Exception information:", exc_info=True)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:199:                    logger.critical(str(exc))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:200:                    logger.debug("Exception information:", exc_info=True)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:204:                    logger.critical("%s", exc)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:205:                    logger.debug("Exception information:", exc_info=True)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:208:                except BrokenStdoutLoggingError:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:212:                    if level_number <= logging.DEBUG:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:217:                    logger.critical("Operation cancelled by user")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:218:                    logger.debug("Exception information:", exc_info=True)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:222:                    logger.critical("Exception:", exc_info=True)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:226:            return exc_logging_wrapper
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:14:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:33:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:138:        "instead of logging them to stderr."
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:219:        " times (corresponding to WARNING, ERROR, and CRITICAL logging"
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\main.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\main.py:16:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\main.py:76:        logger.debug("Ignoring error %s when setting locale", e)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\parser.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\parser.py:15:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\parser.py:88:    def format_epilog(self, epilog: str) -> str:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\parser.py:191:                logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\progress_bars.py:17:from pip._internal.utils.logging import get_indentation
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:8:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:47:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:57:        logger.warning("Disabling truststore since ssl support is missing")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:220:    logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:293:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:304:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:477:            logger.info(locations)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:9:from pip._internal.utils.logging import get_indentation
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:11:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:85:        logger.info("%s: %s", self._message, status)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:118:    # through the logging system, but it acts like it has level INFO,
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:120:    # Non-interactive spinner goes through the logging system, so it is always
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:121:    # in sync with logging configuration.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:122:    if sys.stdout.isatty() and logger.getEffectiveLevel() <= logging.INFO:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:152:    elif not file.isatty() or logger.getEffectiveLevel() > logging.INFO:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:10:from pip._internal.utils.logging import getLogger
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:61:            logger.error("pip cache commands can not function since cache is disabled.")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:66:            logger.error(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:78:            logger.error(e.args[0])
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:87:        logger.info(options.cache_dir)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:129:        logger.info(message)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:148:            logger.info("No locally built wheels cached.")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:156:        logger.info("Cache contents:\n")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:157:        logger.info("\n".join(sorted(results)))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:161:            logger.info("\n".join(sorted(files)))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:181:            logger.warning(no_matching_msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:185:            logger.verbose("Removed %s", filename)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\cache.py:186:        logger.info("Files removed: %s", len(files))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\check.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\check.py:14:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:16:from pip._internal.utils.logging import indent_log
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:19:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:108:            logger.error(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:123:            logger.error(e.args[0])
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:136:            logger.error(e.args[0])
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:205:                with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:214:            with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:220:        with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:267:            logger.exception(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:20:from pip._internal.utils.logging import indent_log
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:23:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:27:    logger.info("%s: %s", name, value)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:31:    logger.info("sys.implementation:")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:33:    with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:100:        logger.info("%s==%s%s", module_name, actual_version, extra_message)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:104:    logger.info("vendored library versions:")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:107:    with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:124:    logger.info(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:132:    with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:134:            logger.info(str(tag))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:138:            logger.info(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\debug.py:173:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\download.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\download.py:15:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\hash.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\hash.py:12:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\index.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\index.py:19:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\index.py:53:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\index.py:61:            logger.error(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\index.py:73:            logger.error(e.args[0])
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\inspect.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\inspect.py:16:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:34:from pip._internal.utils.logging import getLogger
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:261:                "to avoid mixing pip logging output with JSON output."
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:293:        logger.verbose("Using %s", get_pip_version())
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:504:            logger.error(message, exc_info=show_traceback)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:549:                        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:556:                        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:577:            logger.exception(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:631:        logger.critical("\n".join(parts))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:677:        logger.debug("Non-user install by explicit request")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:691:        logger.debug("User install by explicit request")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:699:        logger.debug("Non-user install due to --prefix or --target option")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:704:        logger.debug("Non-user install because user site-packages disabled")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:710:        logger.debug("Non-user install because site-packages writeable")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\install.py:713:    logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\list.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\list.py:36:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\search.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\search.py:19:from pip._internal.utils.logging import indent_log
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\search.py:31:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\search.py:120:        with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\show.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\show.py:12:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\show.py:40:            logger.warning("ERROR: Please provide a package name or names.")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\show.py:87:        logger.warning("Package(s) not found: %s", ", ".join(missing))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:22:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:76:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:21:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:174:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:11:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:85:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:89:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:10:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:50:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:133:    logger.debug("Getting page %s", redact_auth_from_url(url))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:171:    logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:319:        meth = logger.debug
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:342:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:361:        logger.debug(" file: URL is directory, getting %s", url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:366:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:372:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:387:        _handle_get_simple_fail(link, reason, meth=logger.info)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:433:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:492:        if logger.isEnabledFor(logging.DEBUG):
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\collector.py:502:            logger.debug("\n".join(lines))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:6:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:34:from pip._internal.utils.logging import indent_log
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:71:        logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:80:                logger.verbose(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:88:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:247:        logger.debug("Found link %s, version: %s", link, version)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:273:        logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:283:    # Collect the non-matches for logging purposes.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:312:    logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:749:            logger.debug("Skipping link: %s: %s", detail, link)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:787:        logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:797:        with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:844:        if logger.isEnabledFor(logging.DEBUG) and file_candidates:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:853:            logger.debug("Local files found: %s", ", ".join(paths))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:935:            logger.critical(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:955:                logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:962:                logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:970:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:978:        logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\sources.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\sources.py:21:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\sources.py:251:        logger.warning(msg, location)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\index\sources.py:281:    logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:17:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:32:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:60:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\locations\_sysconfig.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\locations\_sysconfig.py:13:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:38:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:71:    _MISMATCH_LEVEL = logging.WARNING
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:73:    _MISMATCH_LEVEL = logging.DEBUG
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:201:    logger.log(_MISMATCH_LEVEL, message, key, issue_url, old, new)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:227:    logger.log(_MISMATCH_LEVEL, "\n".join(parts), user, home, root, prefix)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\base.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\base.py:53:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\base.py:311:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\base.py:445:            logger.warning(message, self.raw_name, e)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\base.py:637:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:29:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:211:            logger.warning("No metadata found in %s", displaying_path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:21:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:66:                logger.warning("Skipping %s due to %s", info_location, e.reason)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\models\link.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\models\link.py:36:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\models\link.py:351:                logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\models\link.py:559:        logger.debug("Ignoring egg= fragment in %s", link)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:14:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:54:                    logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:93:                    logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:6:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:23:from pip._internal.utils.logging import getLogger
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:85:            logger.debug("Getting credentials from keyring for %s", url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:92:            logger.debug("Getting password from keyring for %s", url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:163:    logger.verbose("Keyring provider requested: %s", provider)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:171:            logger.verbose("Keyring provider set: import")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:181:            logger.warning(msg, exc, exc_info=logger.isEnabledFor(logging.DEBUG))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:216:            logger.verbose("Keyring provider set: subprocess with executable %s", cli)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:219:    logger.verbose("Keyring provider set: disabled")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:273:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:346:            logger.debug("Found credentials in url for %s", netloc)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:356:                logger.debug("Found index url %s", index_url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:362:                logger.debug("Found credentials in index url for %s", netloc)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:369:                logger.debug("Found credentials in netrc for %s", netloc)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:382:                logger.debug("Found credentials in keyring for %s", netloc)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:541:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:556:                logger.info("Saving credentials to keyring")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\auth.py:561:                logger.exception("Failed to save credentials")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\download.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\download.py:20:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\download.py:48:        logger.info("Using cached %s", logged_url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\download.py:50:        logger.info("Downloading %s", logged_url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\download.py:52:    if logger.getEffectiveLevel() > logging.INFO:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\download.py:137:            logger.critical(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\download.py:171:                logger.critical(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\session.py:9:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\session.py:58:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\session.py:399:            self.add_trusted_host(host, suppress_logging=True)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\session.py:409:        self, host: str, source: Optional[str] = None, suppress_logging: bool = False
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\session.py:414:        :param source: An optional source string, for logging where the host
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\session.py:417:        if not suppress_logging:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\session.py:421:            logger.info(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\session.py:502:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:18:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:57:            logger.critical(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\check.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\check.py:18:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\check.py:49:            logger.warning("Error parsing requirements for %s: %s", name, e)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:18:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:101:                        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:107:                        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:117:                                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:135:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:169:        logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:200:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:208:        logger.warning("Error when trying to get requirement for VCS system %s", exc)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:212:    logger.warning("Could not determine repository location of %s", location)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:45:from pip._internal.utils.logging import indent_log
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:198:    logger.info("File was already downloaded %s", download_path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:204:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:295:            logger.info(message, information)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:298:            with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:299:                logger.info("Using cached %s", req.link.filename)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:361:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:366:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:385:        logger.verbose(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:425:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:433:        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:442:            logger.debug("%s does not support range requests", url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:468:            logger.debug("Downloading link %s to %s", link, filepath)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:495:        with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:582:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:659:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:673:            logger.info("Saved %s", download_path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:682:        logger.info("Obtaining %s", req)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:684:        with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:719:        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:722:        with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:724:                logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:12:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:48:            logger.debug("Initialized build tracking at %s", root)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:70:        logger.debug("Created build tracker: %s", self._root)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:73:        logger.debug("Entered build tracker: %s", self._root)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:113:        logger.debug("Added %s to build tracker %r", req, self._root)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:122:        logger.debug("Removed %s from build tracker %r", req, self._root)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:128:        logger.debug("Removed build tracker: %r", self._root)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:18:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:47:    logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:9:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:24:        logger.debug("Destination directory: %s", tempd)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:35:        logger.error("Failed building wheel for %s", name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:9:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:24:        logger.debug("Destination directory: %s", tempd)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:36:                logger.error(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:44:        logger.error("Failed building editable for %s", name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:9:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:16:    """Format command information for logging."""
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:22:    elif logger.getEffectiveLevel() > logging.DEBUG:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:45:        logger.warning(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:54:        logger.warning(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:80:        logger.debug("Destination directory: %s", tempd)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:91:            logger.error("Failed building wheel for %s", name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:7:from pip._internal.utils.logging import indent_log
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:11:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:29:    logger.info("Running setup.py develop for %s", name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:40:    with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:9:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:74:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:255:            logger.warning("RECORD line has more than three elements: %s", row)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:442:        logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:619:        logger.debug(stdout.getvalue())
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:650:            logger.warning(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\constructors.py:12:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\constructors.py:39:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\constructors.py:182:        logger.debug("Cannot parse '%s' as requirements file", req)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\constructors.py:305:    logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\constructors.py:419:        for logging purposes in case of an error.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_file.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_file.py:89:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_file.py:219:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:62:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:187:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:378:            logger.debug("Creating directory %s", build_dir)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:421:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:626:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:632:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:686:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:722:            logger.warning("Skipping %s as it is not installed.", self.name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:724:        logger.info("Found existing installation: %s", dist)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:766:                logger.warning("Deleting %s", display_path(archive_path))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:770:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:809:        logger.info("Saved %s", display_path(archive_path))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:833:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_install.py:919:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_set.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_set.py:12:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:13:from pip._internal.utils.logging import getLogger, indent_log
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:284:            logger.info("Moving to %s\n from %s", *p)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:288:                logger.debug("Replacing %s from %s", new_path, path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:295:                logger.error("Failed to restore %s", new_path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:296:                logger.debug("Exception: %s", ex)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:364:            logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:371:        logger.info("Uninstalling %s:", dist_name_version)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:373:        with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:381:                    logger.verbose("Removing file or directory %s", path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:386:                logger.info("Successfully uninstalled %s", dist_name_version)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:395:            logger.info(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:396:            with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:398:                    logger.info(path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:419:            logger.error(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:424:        logger.info("Rolling back uninstall of %s", self._dist.raw_name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:438:            logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:446:            logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:459:            logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:557:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:616:        logger.verbose("Removing pth entries from %s:", self.file)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:620:            logger.warning("Cannot remove entries from nonexistent file %s", self.file)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:635:                logger.verbose("Removing entry: %s", entry)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:644:            logger.error("Cannot roll back changes to %s, none were made", self.file)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:646:        logger.debug("Rolling %s back to previous state", self.file)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\__init__.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\__init__.py:5:from pip._internal.utils.logging import indent_log
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\__init__.py:18:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\__init__.py:55:        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\__init__.py:62:    with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\__init__.py:65:                logger.info("Attempting uninstall: %s", req_name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\req\__init__.py:66:                with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:16:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:49:from pip._internal.utils.logging import indent_log
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:53:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:88:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:98:        logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:218:            logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:302:        logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:402:            logger.warning(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:430:            logger.debug("Using cached wheel link: %s", cache_entry.link)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:483:                logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:534:        with indent_log():
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:548:                    logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:556:                    logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:29:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:261:            logger.debug("Using cached wheel link: %s", cache_entry.link)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:343:        # This is just logging some messages, so we can do it eagerly.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:513:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:80:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:215:                    logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:236:                    logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:475:            logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:686:            logger.critical(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:691:            logger.critical(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:696:        logger.critical(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:703:            logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:780:        logger.critical(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:806:        logger.info(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:2:from logging import getLogger
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:43:        logger.info("INFO: %s", message.format(package_name=candidate.name))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:55:        logger.debug(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:62:        logger.info("Reporter.starting()")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:65:        logger.info("Reporter.starting_round(%r)", index)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:68:        logger.info("Reporter.ending_round(%r, state)", index)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:71:        logger.info("Reporter.ending(%r)", state)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:74:        logger.info("Reporter.adding_requirement(%r, %r)", requirement, parent)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:77:        logger.info("Reporter.rejecting_candidate(%r, %r)", criterion, candidate)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:80:        logger.info("Reporter.pinning(%r)", candidate)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:35:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:147:                    logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:174:                logger.warning(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\compat.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\compat.py:11:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:23:# Warnings <-> Logging Integration
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:38:        logger = logging.getLogger("pip._internal.deprecations")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:39:        logger.warning(message)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:4:import logging.handlers
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:10:from logging import Filter
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:22:from pip._vendor.rich.logging import RichHandler
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:35:class BrokenStdoutLoggingError(Exception):
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:37:    Raised if BrokenPipeError occurs for the stdout stream while logging.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:55:def indent_log(num: int = 2) -> Generator[None, None, None]:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:73:class IndentingFormatter(logging.Formatter):
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:83:        A logging.Formatter that obeys the indent_log() context manager.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:96:        if levelno < logging.WARNING:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:102:        if levelno < logging.ERROR:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:107:    def format(self, record: logging.LogRecord) -> str:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:153:    def emit(self, record: logging.LogRecord) -> None:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:171:                if record.levelno >= logging.ERROR:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:173:                elif record.levelno >= logging.WARNING:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:181:    def handleError(self, record: logging.LogRecord) -> None:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:182:        """Called when logging is unable to log some output."""
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:186:        # stdout stream in logging's Handler.emit(), then raise our special
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:187:        # exception so we can handle it in main() instead of logging the
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:195:            raise BrokenStdoutLoggingError()
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:200:class BetterRotatingFileHandler(logging.handlers.RotatingFileHandler):
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:210:    def filter(self, record: logging.LogRecord) -> bool:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:217:    A logging Filter that excludes records from a logger (or its children).
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:220:    def filter(self, record: logging.LogRecord) -> bool:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:226:def setup_logging(verbosity: int, no_color: bool, user_log_file: Optional[str]) -> int:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:227:    """Configures and sets up all of the logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:229:    Returns the requested logging level, as its integer value.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:232:    # Determine the level to be logging at.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:234:        level_number = logging.DEBUG
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:238:        level_number = logging.WARNING
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:240:        level_number = logging.ERROR
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:242:        level_number = logging.CRITICAL
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:244:        level_number = logging.INFO
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:246:    level = logging.getLevelName(level_number)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:258:    # Disable any logging besides WARNING unless we have DEBUG level logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:268:        "stream": "pip._internal.utils.logging.RichPipStreamHandler",
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:269:        "file": "pip._internal.utils.logging.BetterRotatingFileHandler",
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:275:    logging.config.dictConfig(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:281:                    "()": "pip._internal.utils.logging.MaxLevelFilter",
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:282:                    "level": logging.WARNING,
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:285:                    "()": "logging.Filter",
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:286:                    "name": subprocess_logger.name,
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:289:                    "()": "pip._internal.utils.logging.ExcludeLoggerFilter",
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:290:                    "name": subprocess_logger.name,
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:321:                # A handler responsible for logging to the console messages
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\logging.py:322:                # from the "subprocessor" logger.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\misc.py:6:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\misc.py:66:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\misc.py:383:    logger.info(msg, *args)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\packaging.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\packaging.py:11:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:20:from pip._internal.utils.logging import VERBOSE, subprocess_logger
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:95:        logging of both stdout and stderr occurs when the subprocess has
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:96:        terminated, else logging occurs as subprocess output is produced.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:107:    # - If DEBUG logging isn't enabled (e.g. if --verbose logging wasn't
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:112:    #   (e.g. if --verbose logging wasn't enabled).  This way we don't log
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:119:        log_subprocess: Callable[..., None] = subprocess_logger.info
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:120:        used_level = logging.INFO
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:124:        log_subprocess = subprocess_logger.verbose
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:128:    showing_subprocess = subprocess_logger.getEffectiveLevel() <= used_level
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:153:            subprocess_logger.critical(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:212:                subprocess_logger.error("%s", error, extra={"rich": True})
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:213:                subprocess_logger.verbose(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:218:                subprocess_logger.verbose(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:226:            subprocess_logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:22:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:178:        logger.debug("Created temporary directory: %s", path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:200:                logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:206:                logger.debug("%s failed with %s.", func.__qualname__, formatted_exc)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:217:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:295:        logger.debug("Created temporary directory: %s", path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:22:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:32:    logger.debug("bz2 module is not available")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:40:    logger.debug("lzma module is not available")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:168:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:195:                    logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:208:                    logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:250:        logger.critical(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:8:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:66:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\wheel.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\wheel.py:17:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\wheel.py:131:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\_log.py:1:"""Customize logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\_log.py:3:Defines custom logger class for the `logger.verbose(...)` method.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\_log.py:5:init_logging() must be called before any other modules that call logging.getLogger.
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\_log.py:8:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\_log.py:16:class VerboseLogger(logging.Logger):
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\_log.py:23:        return self.log(VERBOSE, msg, *args, **kwargs)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\_log.py:27:    """logging.getLogger, but ensures our VerboseLogger class is returned"""
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\_log.py:28:    return cast(VerboseLogger, logging.getLogger(name))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\_log.py:31:def init_logging() -> None:
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\_log.py:37:    logging.setLoggerClass(VerboseLogger)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\utils\_log.py:38:    logging.addLevelName(VERBOSE, "VERBOSE")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:15:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:40:        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\git.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\git.py:26:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\git.py:102:            logger.warning("Can't parse git version: %s", version)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\git.py:227:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\git.py:265:        logger.info("Cloning %s%s to %s", url, rev_display, display_path(dest))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\git.py:292:            logger.debug("Rev options %s, branch_name %s", rev_options, branch_name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\git.py:319:        logger.info("Resolved %s to commit %s", url, rev_options.rev)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\git.py:510:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:17:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:40:        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:69:            logger.warning("Could not switch Mercurial repository to %s: %s", url, exc)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:152:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:22:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:119:                logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:284:        logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:52:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:101:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:221:            logger.warning("Cannot register VCS %s", cls.__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:225:            logger.debug("Registered VCS backend: %s", cls.name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:241:            logger.debug("Determine that %s uses VCS: %s", location, vcs_backend.name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:528:                logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:535:                    logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:543:                    logger.info("Skipping because already up-to-date.")
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:546:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:555:            logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:564:        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:575:            logger.warning("Deleting %s", display_path(dest))
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:582:            logger.warning("Backing up %s to %s", display_path(dest), dest_dir)
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:589:            logger.info(
scripts\openai_batch\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:688:        logger.debug("Checking in %s for %s (%s)...", path, cls.dirname, cls.name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\typing_extensions.py:1656:           def add_logging(f: Callable[P, T]) -> Callable[P, T]:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\typing_extensions.py:1657:               '''A type-safe decorator to add logging to a function.'''
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\typing_extensions.py:1659:                   logging.info(f'{f.__name__} was called')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\typing_extensions.py:1663:           @add_logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\__init__.py:111:    vendored("rich.logging")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:11:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:30:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:118:                logger.debug("Ignoring unknown cache-control directive: %s", directive)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:128:                        logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:133:                    logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:149:            logger.debug("No cache entry available")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:159:            logger.warning("Cache entry deserialization failed, entry ignored")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:169:        logger.debug('Looking up "%s" in the cache', cache_url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:174:            logger.debug('Request header has "no-cache", cache bypassed')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:178:            logger.debug('Request header has "max_age" as 0, cache bypassed')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:200:            logger.debug(msg)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:208:                logger.debug("Purging cached response: no date or etag")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:210:            logger.debug("Ignoring cached response: no date")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:218:        logger.debug("Current age based on date: %i", current_age)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:233:            logger.debug("Freshness lifetime from max-age: %i", freshness_lifetime)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:241:                logger.debug("Freshness lifetime from expires: %i", freshness_lifetime)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:248:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:256:            logger.debug("Adjusted current age from min-fresh: %i", current_age)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:260:            logger.debug('The response is "fresh", returning cached response')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:261:            logger.debug("%i > %i", freshness_lifetime, current_age)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:266:            logger.debug('The cached response is "stale" with no etag, purging')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:333:            logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:366:        logger.debug('Updating cache with response from "%s"', cache_url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:372:            logger.debug('Response header has "no-store"')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:375:            logger.debug('Request header has "no-store"')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:377:            logger.debug('Purging existing cache entry to honor "no-store"')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:388:            logger.debug('Response header has "Vary: *"')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:401:            logger.debug(f"etag object cached for {expires_time} seconds")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:402:            logger.debug("Caching due to etag")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:408:            logger.debug("Caching permanent redirect")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:421:                logger.debug("Caching b/c date exists and max-age > 0")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:441:                    logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\filewrapper.py:67:        # TODO: Add some logging here...
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:6:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:22:def setup_logging() -> None:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:23:    logger.setLevel(logging.DEBUG)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:24:    handler = logging.StreamHandler()
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:25:    logger.addHandler(handler)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:53:    # Turn on logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:54:    setup_logging()
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\__init__.py:26:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\cachecontrol\__init__.py:28:logging.getLogger(__name__).addHandler(logging.NullHandler())
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\charsetgroupprober.py:95:                self.logger.debug("%s not active", prober.charset_name)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\charsetgroupprober.py:98:            self.logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\charsetprober.py:29:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\charsetprober.py:48:        self.logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\codingstatemachine.py:28:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\codingstatemachine.py:63:        self.logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\eucjpprober.py:66:                self.logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\mbcharsetprober.py:64:                self.logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\sbcharsetprober.py:129:                    self.logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\sbcharsetprober.py:134:                    self.logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\sjisprober.py:65:                self.logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:40:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:118:        self.logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:299:            self.logger.debug("no data received!")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:341:        if self.logger.getEffectiveLevel() <= logging.DEBUG:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:343:                self.logger.debug("no probers hit minimum threshold")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:349:                            self.logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:356:                        self.logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\compat.py:912:    from logging.config import BaseConfigurator, valid_ident
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:14:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:33:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:153:                        logger.debug('Found %s', r.path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:160:                        logger.debug('Found %s', r.path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:165:                    logger.warning(msg, r.path, e)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:284:                logger.debug('No "provides": %s', dist)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:393:        logger.debug('%s: got requirements %r from metadata: %r', self.name,
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:433:            logger.warning('could not read version %r - using name only', req)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:694:        logger.info('creating %s', record_path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:790:        logger.info('creating %s', shared_path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:914:                    logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:919:                    logger.warning('Not recognised as a requirement: %r', line)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:922:                    logger.warning('extra requirements in requires.txt are '
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:1047:                        logger.warning('Non-existent file: %s', p)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:1151:        logger.debug('%s missing %r', distribution, requirement)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:1228:            logger.debug('Moving to result: %s',
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:1259:            logger.debug('Add to provided: %s, %s, %s', name, version, dist)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:1271:                logger.warning('could not read version %r - using name only',
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:8:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:23:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:132:        :param name: The logical name of the stream (used for logging only).
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:143:            logger.debug('%s: %s' % (name, s))
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:171:        logger.debug('invoking: %s', ' '.join(cmd))
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:263:                logger.warning('no signing program available - not signed')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:338:        logger.debug('invoking: %s', ' '.join(cmd))
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:389:            logger.debug('No digest specified')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:396:            logger.debug('Digest specified: %s' % digest)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:440:            logger.debug('Digest verified: %s', digest)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:11:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:34:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:223:                logger.debug('Not replacing %r with %r', url1, url2)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:225:                logger.debug('Replacing %r with %r', url1, url2)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:248:            logger.debug('%s: version hint in fragment: %r',
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:262:                    logger.debug('Wheel not compatible: %s', path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:279:                logger.warning('invalid path for wheel: %s', path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:281:            logger.debug('Not downloadable: %s', path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:289:                        logger.debug('No match for project/version: %s', path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:372:        logger.debug('matcher: %s (%s)', matcher, type(matcher).__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:383:                        pass  # logger.debug('%s did not match %r', matcher, k)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:388:                    logger.warning('error matching %s with %r', matcher, k)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:393:                logger.debug('sorted list: %s', slist)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:524:            logger.exception('JSON fetch failed: %s', e)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:663:                logger.debug('Queueing %s', url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:694:        logger.debug('process_download: %s -> %s', url, info)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:725:        logger.debug('should_queue: %s (%s) from %s -> %s', link, rel,
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:749:                                    logger.debug('Queueing %s from %s', link, url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:759:                # logger.debug('Sentinel seen, quitting.')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:777:            logger.debug('Returning %s from cache: %s', url, result)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:782:                logger.debug('Skipping %s due to bad host %s', url, host)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:786:                    logger.debug('Fetching %s', url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:788:                    logger.debug('Fetched %s', url)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:810:                        logger.exception('Fetch failed: %s: %s', url, e)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:812:                    logger.exception('Fetch failed: %s: %s', url, e)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:816:                    logger.exception('Fetch failed: %s: %s', url, e)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1088:        logger.debug('adding distribution %s', dist)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1094:            logger.debug('Add to provided: %s, %s, %s', name, version, dist)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1103:        logger.debug('removing distribution %s', dist)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1109:            logger.debug('Remove from provided: %s, %s, %s', name, version, dist)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1234:            logger.debug('passed %s as requirement', odist)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1240:            logger.debug('located %s', odist)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1268:                    logger.debug('No providers found for %r', r)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1275:                        logger.debug('Cannot satisfy %r', r)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1284:                            logger.debug('Adding %s to install_dists',
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1300:                logger.debug('%s is a build-time dependency only.',
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1302:        logger.debug('find done for %s', odist)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:12:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:24:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:112:            logger.debug('add_dir added %s', d)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:155:                    logger.warning('no files found matching %r', pattern)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:164:                    logger.warning('no files found matching %r '
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:174:                    logger.warning('no files found matching %r '
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:183:                logger.warning('no directories found matching %r',
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:188:                logger.warning('no previously-included directories found '
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:15:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:25:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:148:            logger.debug('Removed 1.0 due to %s', key)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:151:            logger.debug('Removed 1.1 due to %s', key)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:154:            logger.debug('Removed 1.2 due to %s', key)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:157:            logger.debug('Removed 1.3 due to %s', key)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:161:                logger.debug('Removed 2.1 due to %s', key)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:164:            logger.debug('Removed 2.2 due to %s', key)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:167:            # logger.debug('Removed 2.0 due to %s', key)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:173:        logger.debug('Out of options - unknown metadata set: %s', fields)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:372:        # logger.debug('Attempting to set metadata for %s', self)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:453:        if logger.isEnabledFor(logging.WARNING):
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:461:                        logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:467:                    logger.warning("'%s': '%s' is not a valid version (field '%s')",
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:471:                    logger.warning("'%s': '%s' is not a valid version (field '%s')",
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:917:                logger.warning('Metadata: missing: %s, warnings: %s',
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:11:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:21:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:239:            logger.debug('_find failed: %r %r', path, self.loader.prefix)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:241:            logger.debug('_find worked: %r %r', path, self.loader.prefix)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:8:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:21:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:121:                logger.warning('Failed to open %s', executable)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:286:                    logger.warning('Failed to write executable - trying to '
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:293:                    logger.debug('Able to replace executable using '
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:304:                    logger.warning('Skipping existing file %s', outname)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:346:            logger.debug('not copying %s (up-to-date)', script)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:361:                logger.warning('%s is an empty file (skipping)', script)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:377:            logger.info('copying and adjusting %s -> %s', script,
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:12:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:40:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:538:        logger.info('Copying %s to %s', infile, outfile)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:554:        logger.info('Copying stream %s to %s', instream, outfile)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:584:                    logger.info("changing mode of %s", f)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:587:                    logger.info("changing mode of %s to %o", f, mode)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:598:            logger.info('Creating %s' % path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:611:        logger.info('Byte-compiling %s to %s', path, dpath)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:632:                logger.debug('Removing directory tree at %s', path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:643:                logger.debug('Removing %s %s', s, path)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:799:            logger.warning('Directory exists but is not writable: %s', result)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:805:            logger.warning('Unable to create %s', result, exc_info=True)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:809:        logger.warning('Default location unusable, using %s', result)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:933:                logger.warning('undeclared extra: %s' % unwanted)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:938:                logger.warning('undeclared extra: %s' % r)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:958:            logger.debug('Unexpected response for JSON request: %s', ct)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:965:        logger.exception('Failed to get external data for %s: %s', url, e)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1003:            logger.warning('Directory \'%s\' is not private', base)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1092:                logger.exception('Exception during event publication')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1095:        logger.debug('publish %s: args = %s, kwargs = %s, result = %s', event,
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1512:                    logger.debug('Host verified: %s', self.host)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\version.py:11:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\version.py:22:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\version.py:642:            logger.warning('Cannot compute compatible match for version %s '
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:15:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:33:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:369:                logger.debug('Wrote %s to %s in wheel', p, ap)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:603:                        logger.debug('lib_only: skipping %s', u_arcname)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:646:                                logger.warning('Byte-compilation failed',
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:661:                    logger.debug('lib_only: returning None')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:688:                            logger.warning('Unable to read legacy script '
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:699:                            logger.warning('Unable to read JSON metadata, so '
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:739:                logger.exception('installation failed.')
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:810:            logger.debug('%s already in path', pathname)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:825:            logger.debug('%s not in path', pathname)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:930:                logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:938:                logger.debug('Version updated from %r to %r', version, updated)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:7:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:17:    from logging import NullHandler
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:20:    class NullHandler(logging.Handler):
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:32:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:33:logger.addHandler(NullHandler())
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:33:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1359:    logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1360:    logger.setLevel(logging.DEBUG)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1361:    logger.addHandler(logging.StreamHandler(sys.stdout))
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1389:        logger.info(json.dumps(dist.info(), indent=4, sort_keys=True))
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1391:        logger.info("Name: %s", dist.name(pretty=True))
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1393:        logger.info("Version: %s", distribution_version)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1395:        logger.info("Codename: %s", distribution_codename)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\idna\intranges.py:5:in the original list?" in time O(log(# runs)).
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:115:        logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:145:# Set default logging handler to avoid "No handler found" warnings.
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:146:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:147:from logging import NullHandler
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:179:logging.getLogger(__name__).addHandler(NullHandler())
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\console.py:618:        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\console.py:619:        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\console.py:1089:        """A context manager to *capture* the result of print() or log() in a string,
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\console.py:1907:    def log(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\console.py:1932:            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\console.py:2583:    console.log(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\console.py:2598:    console.log("Hello, World!", "{'a': 1}", repr(console))
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:53:    "logging.keyword": Style(bold=True, color="yellow"),
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:54:    "logging.level.notset": Style(dim=True),
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:55:    "logging.level.debug": Style(color="green"),
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:56:    "logging.level.info": Style(color="blue"),
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:57:    "logging.level.warning": Style(color="red"),
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:58:    "logging.level.error": Style(color="red", bold=True),
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:59:    "logging.level.critical": Style(color="red", bold=True, reverse=True),
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\diagnose.py:28:        "VSCODE_VERBOSE_LOGGING",
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\live.py:353:                    console.log(next(examples))
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:3:from logging import Handler, LogRecord
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:19:    """A logging handler that renders output with Rich. The time / level / message and file are displayed in columns.
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:23:        Be careful when enabling console markup in log messages if you have configured logging for libraries not
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:27:        level (Union[int, str], optional): Log level. Defaults to logging.NOTSET.
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:65:        level: Union[int, str] = logging.NOTSET,
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:122:            level_name.ljust(8), f"logging.level.{level_name.lower()}"
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:127:        """Invoked by logging."""
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:178:            record (LogRecord): logging Record.
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:195:            message_text.highlight_words(self.keywords, "logging.keyword")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:209:            record (LogRecord): logging Record.
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:239:    logging.basicConfig(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:245:    log = logging.getLogger("rich")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\progress.py:1702:                progress.log(next(examples))
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\segment.py:4:from logging import getLogger
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\status.py:118:        console.log("Importing advanced AI")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\status.py:120:        console.log("Advanced Covid AI Ready")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\status.py:124:        console.log("Found 10,000,000,000 copies of Covid32.exe")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\_log_render.py:94:    c.log("[on blue]hello", justify="right")
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\rich\__main__.py:204:        """Progress bars, columns, styled logging handler, tracebacks, etc...""",
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\tenacity\after.py:22:    import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\tenacity\after.py:31:def after_log(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\tenacity\after.py:32:    logger: "logging.Logger",
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\tenacity\after.py:44:        logger.log(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\tenacity\before.py:22:    import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\tenacity\before.py:31:def before_log(logger: "logging.Logger", log_level: int) -> typing.Callable[["RetryCallState"], None]:
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\tenacity\before.py:40:        logger.log(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\tenacity\before_sleep.py:22:    import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\tenacity\before_sleep.py:31:def before_sleep_log(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\tenacity\before_sleep.py:32:    logger: "logging.Logger",
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\tenacity\before_sleep.py:65:        logger.log(
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\connection.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\connection.py:65:log = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\connectionpool.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\connectionpool.py:62:log = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\poolmanager.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\poolmanager.py:26:log = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\response.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\response.py:32:log = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:6:# Set default logging handler to avoid "No handler found" warnings.
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:7:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:9:from logging import NullHandler
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:60:logging.getLogger(__name__).addHandler(NullHandler())
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:63:def add_stderr_logger(level=logging.DEBUG):
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:65:    Helper for quickly adding a StreamHandler to the logger. Useful for
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:72:    logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:73:    handler = logging.StreamHandler()
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:74:    handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(message)s"))
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:75:    logger.addHandler(handler)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:76:    logger.setLevel(level)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:77:    logger.debug("Added a stderr logging handler to logger: %s", __name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\appengine.py:44:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\appengine.py:68:log = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\ntlmpool.py:9:from logging import getLogger
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\pyopenssl.py:73:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\pyopenssl.py:127:log = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\util\retry.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\util\retry.py:22:log = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pip\_vendor\urllib3\util\ssl_.py:345:    # Enable logging of TLS session keys via defacto standard environment variable
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:1235:    `side_effect` can be used for logging, updating progress bars, or anything
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3475:    # "Reservoir-Sampling Algorithms of Time Complexity O(n(1+log(N/n)))".
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3482:    W = exp(log(random()) / k)
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3486:    next_index = k + floor(log(random()) / log(1 - W))
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3493:            W *= exp(log(random()) / k)
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3494:            next_index += floor(log(random()) / log(1 - W)) + 1
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3504:    weight_keys = (log(random()) / weight for weight in weights)
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3514:    weights_to_skip = log(random()) / smallest_weight_key
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3523:            weight_key = log(r_2) / weight
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py:3526:            weights_to_skip = log(random()) / smallest_weight_key
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\tags.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\tags.py:115:        logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\pydantic\types.py:1577:    """A generic base class used for defining a field with sensitive information that you do not want to be visible in logging or tracebacks.
scripts\openai_batch\.venv\Lib\site-packages\pydantic\types.py:1807:    """A string used for storing sensitive information that you do not want to be visible in logging or tracebacks.
scripts\openai_batch\.venv\Lib\site-packages\pydantic\types.py:1874:    """A bytes used for storing sensitive information that you do not want to be visible in logging or tracebacks.
scripts\openai_batch\.venv\Lib\site-packages\setuptools\logging.py:2:import logging
scripts\openai_batch\.venv\Lib\site-packages\setuptools\logging.py:8:    return record.levelno < logging.WARNING
scripts\openai_batch\.venv\Lib\site-packages\setuptools\logging.py:13:    Configure logging to emit warning and above to stderr
scripts\openai_batch\.venv\Lib\site-packages\setuptools\logging.py:18:    err_handler = logging.StreamHandler()
scripts\openai_batch\.venv\Lib\site-packages\setuptools\logging.py:19:    err_handler.setLevel(logging.WARNING)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\logging.py:20:    out_handler = logging.StreamHandler(sys.stdout)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\logging.py:23:    logging.basicConfig(
scripts\openai_batch\.venv\Lib\site-packages\setuptools\logging.py:24:        format="{message}", style='{', handlers=handlers, level=logging.DEBUG)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\logging.py:35:    logging.root.setLevel(level*10)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\__init__.py:22:from . import logging
scripts\openai_batch\.venv\Lib\site-packages\setuptools\__init__.py:85:    logging.configure()
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:13:import logging
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:56:_logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:341:            _logger.info(f"Installing {category} as non editable")
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:398:        _logger.warning(msg + _LENIENT_WARNING)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:462:        _logger.warning(msg + _STRICT_WARNING)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:502:        _logger.warning(msg + _LENIENT_WARNING)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:6:import logging
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:23:_logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:47:            _logger.debug(summary)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:48:            _logger.debug(ex.details)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:134:            _logger.debug(f"ignored error: {ex.__class__.__name__} - {ex}")
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:427:        _logger.debug(f"ignored error: {ex.__class__.__name__} - {ex}")
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:10:import logging
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:33:_logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:237:                _logger.warning(f"Command option {cmd}.{key} is not defined")
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:263:        _logger.warning(f"{msg}: {ex}")
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:3:import logging
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:12:_logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:52:    Depending on the level of the verbosity of the ``logging`` configuration
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:54:    ``summary`` and ``details`` (when the logging level is set to :obj:`logging.DEBUG`).
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:91:        if _logger.getEffectiveLevel() <= logging.DEBUG and self.details:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:1:import logging
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:8:_logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:77:    _logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:155:            _logger.debug(msg)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:163:            _logger.debug(msg)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:168:                _logger.debug("Problem with download, skipping validation")
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:194:            _logger.warning(
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:240:        _logger.warning(msg)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:253:        _logger.warning(f"`{value}` - using extras for entry points is not recommended")
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:186:        log.log(level, msg)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dist.py:47:        log.log(log.WARN, msg)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\dist.py:960:        log.log(level, msg)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\log.py:4:# replaced with a standard Python logging implementation.
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\log.py:19:    def _log(self, level, msg, args):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\log.py:39:    def log(self, level, msg, *args):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\log.py:40:        self._log(level, msg, args)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\log.py:43:        self._log(DEBUG, msg, args)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\log.py:46:        self._log(INFO, msg, args)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\log.py:49:        self._log(WARN, msg, args)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\log.py:52:        self._log(ERROR, msg, args)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\log.py:55:        self._log(FATAL, msg, args)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\log.py:58:_global_log = Log()
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:253:        self.changelog = self._format_changelog(self.changelog)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:597:    def _format_changelog(self, changelog):
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1633:           def add_logging(f: Callable[P, T]) -> Callable[P, T]:
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1634:               '''A type-safe decorator to add logging to a function.'''
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1636:                   logging.info(f'{f.__name__} was called')
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1640:           @add_logging
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:1077:    `side_effect` can be used for logging, updating progress bars, or anything
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3281:    # "Reservoir-Sampling Algorithms of Time Complexity O(n(1+log(N/n)))".
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3288:    W = exp(log(random()) / k)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3292:    next_index = k + floor(log(random()) / log(1 - W))
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3299:            W *= exp(log(random()) / k)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3300:            next_index += floor(log(random()) / log(1 - W)) + 1
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3310:    weight_keys = (log(random()) / weight for weight in weights)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3320:    weights_to_skip = log(random()) / smallest_weight_key
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3329:            weight_key = log(r_2) / weight
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3332:            weights_to_skip = log(random()) / smallest_weight_key
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:5:import logging
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:115:        logger.debug(
scripts\openai_batch\.venv\Lib\site-packages\tqdm\cli.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\tqdm\cli.py:14:log = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\tqdm\cli.py:178:    logging.basicConfig(level=getattr(logging, logLevel),
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:2:Helper functionality for interoperability with stdlib `logging`.
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:4:import logging
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:16:class _TqdmLoggingHandler(logging.StreamHandler):
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:35:def _is_console_logging_handler(handler):
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:36:    return (isinstance(handler, logging.StreamHandler)
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:40:def _get_first_found_console_logging_handler(handlers):
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:42:        if _is_console_logging_handler(handler):
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:47:def logging_redirect_tqdm(
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:48:    loggers=None,  # type: Optional[List[logging.Logger]],
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:53:    Context manager redirecting console logging to `tqdm.write()`, leaving
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:54:    other logging handlers (e.g. log files) unaffected.
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:59:      Which handlers to redirect (default: [logging.root]).
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:65:    import logging
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:67:    from tqdm.contrib.logging import logging_redirect_tqdm
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:69:    LOG = logging.getLogger(__name__)
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:72:        logging.basicConfig(level=logging.INFO)
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:73:        with logging_redirect_tqdm():
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:76:                    LOG.info("console logging redirected to `tqdm.write()`")
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:77:        # logging restored
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:81:        loggers = [logging.root]
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:82:    original_handlers_list = [logger.handlers for logger in loggers]
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:85:            tqdm_handler = _TqdmLoggingHandler(tqdm_class)
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:86:            orig_handler = _get_first_found_console_logging_handler(logger.handlers)
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:90:            logger.handlers = [
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:91:                handler for handler in logger.handlers
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:92:                if not _is_console_logging_handler(handler)] + [tqdm_handler]
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:96:            logger.handlers = original_handlers
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:100:def tqdm_logging_redirect(
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:102:    # loggers=None,  # type: Optional[List[logging.Logger]]
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:111:        with logging_redirect_tqdm(loggers=loggers, tqdm_class=tqdm_class):
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\logging.py:125:        with logging_redirect_tqdm(loggers=loggers, tqdm_class=tqdm_class):
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\slack.py:11:import logging
scripts\openai_batch\.venv\Lib\site-packages\tqdm\contrib\slack.py:86:            logging.getLogger("HTTPClient").setLevel(logging.WARNING)
services\mcp_client.py:88:                logger.info("✅ MCP-klient initialiserad")
services\mcp_client.py:91:                logger.error(f"❌ MCP-initiering misslyckades: {response}")
services\mcp_client.py:95:            logger.error(f"❌ MCP-initiering fel: {e}")
services\mcp_client.py:119:                logger.info(f"📋 Hittade {len(tools)} MCP-tools")
services\mcp_client.py:122:                logger.error(f"❌ Kunde inte lista tools: {response}")
services\mcp_client.py:126:            logger.error(f"❌ List tools fel: {e}")
services\mcp_client.py:147:                logger.info(f"✅ Tool {tool_name} anropat framgångsrikt")
services\mcp_client.py:150:                logger.error(f"❌ Tool {tool_name} misslyckades: {response}")
services\mcp_client.py:154:            logger.error(f"❌ Tool call fel för {tool_name}: {e}")
services\mcp_client.py:169:                logger.error(f"❌ HTTP {response.status_code}: {response.text}")
services\mcp_client.py:173:            logger.error("❌ MCP-request timeout")
services\mcp_client.py:176:            logger.error("❌ MCP-anslutning misslyckades")
services\mcp_client.py:179:            logger.error(f"❌ MCP-request fel: {e}")
services\mcp_client.py:198:            logger.error(f"❌ get_trading_status fel: {e}")
services\mcp_client.py:216:            logger.error(f"❌ execute_trade fel: {e}")
services\mcp_client.py:228:            logger.error(f"❌ get_performance_metrics fel: {e}")
services\mcp_client.py:242:            logger.error(f"❌ update_strategy_parameters fel: {e}")
tradingbot-backend\main.py:35:    logger.error(f"❌ Critical startup error - cannot import Settings: {e}")
tradingbot-backend\main.py:36:    logger.error("This error will also appear in uvicorn.out.txt")
tradingbot-backend\main.py:42:    logger.error(f"❌ Critical startup error - cannot import socket_app: {e}")
tradingbot-backend\main.py:62:    logger.error(f"❌ Critical startup error - cannot import core modules: {e}")
tradingbot-backend\main.py:81:        logger.info("🔍 Asyncio debug aktiverat")
tradingbot-backend\main.py:83:    logger.warning(f"⚠️ Could not configure asyncio debug: {e}")
tradingbot-backend\main.py:100:    logger.info("🚀 TradingBot Backend startar...")
tradingbot-backend\main.py:111:                logger.info("✅ WebSocket-anslutning etablerad (%.0f ms)", (_t1 - _t0) * 1000)
tradingbot-backend\main.py:116:                logger.info("🔗 Enhetliga services kopplade till WebSocket")
tradingbot-backend\main.py:123:                    logger.info("🔐 WS‑auth klar (%.0f ms)", (_tb - _ta) * 1000)
tradingbot-backend\main.py:125:                    logger.warning("⚠️ WS‑auth timeout – fortsätter utan auth vid startup")
tradingbot-backend\main.py:127:                    logger.warning(f"⚠️ WS‑auth misslyckades: {e}")
tradingbot-backend\main.py:129:                logger.warning("⚠️ WS‑connect timeout – hoppar över WS vid startup")
tradingbot-backend\main.py:131:                logger.warning(f"⚠️ WebSocket-anslutning misslyckades: {e}")
tradingbot-backend\main.py:133:            logger.info("WS‑connect vid start är AV. Kan startas via WS‑test sidan eller API.")
tradingbot-backend\main.py:135:        logger.warning(f"⚠️ WebSocket-anslutning block misslyckades: {e}")
tradingbot-backend\main.py:138:    logger.info("🚫 Scheduler avstängd för att undvika rate limiting")
tradingbot-backend\main.py:143:    logger.info("🛑 TradingBot Backend stängs av...")
tradingbot-backend\main.py:148:        logger.info("✅ WebSocket-anslutning stängd")
tradingbot-backend\main.py:150:        logger.warning(f"⚠️ Fel vid stängning av WebSocket: {e}")
tradingbot-backend\main.py:157:        logger.info("✅ Scheduler stoppad")
tradingbot-backend\main.py:159:        logger.warning(f"⚠️ Fel vid stopp av scheduler: {e}")
tradingbot-backend\main.py:167:            logger.info(f"🔄 Avbryter {len(all_tasks)} aktiva tasks...")
tradingbot-backend\main.py:174:                logger.info("✅ Alla tasks avbrutna")
tradingbot-backend\main.py:176:                logger.warning("⚠️ Timeout vid avbrytning av tasks - fortsätter shutdown")
tradingbot-backend\main.py:178:        logger.warning(f"⚠️ Fel vid task cleanup: {e}")
tradingbot-backend\main.py:186:            logger.info("✅ HTTP-klient stängd")
tradingbot-backend\main.py:188:        logger.warning(f"⚠️ Fel vid stängning av HTTP-klient: {e}")
tradingbot-backend\main.py:190:    logger.info("✅ Shutdown komplett")
tradingbot-backend\main.py:200:    logger.error(f"❌ Critical startup error - cannot create Settings instance: {e}")
tradingbot-backend\main.py:203:logger.info("🔑 Kontroll vid startup:")
tradingbot-backend\main.py:204:logger.info(
tradingbot-backend\main.py:208:logger.info(
tradingbot-backend\main.py:265:    #     logger.info("MCP routes aktiverade")
tradingbot-backend\main.py:267:    logger.info("MCP routes avstängda")
tradingbot-backend\main.py:269:    logger.info("MCP routes avstängda")
tradingbot-backend\main.py:294:    logger.warning(f"Kunde inte konfigurera lokala Swagger-assets: {_e}")
tradingbot-backend\main.py:487:            logger.warning(
tradingbot-backend\main.py:497:            logger.error(
tradingbot-backend\main.py:529:        logger.error(
tradingbot-backend\main.py:546:logger.info("Socket.IO UI aktiverad")
tradingbot-backend\main.py:555:        logger.info(f"📡 Mottog signal {signum}, startar shutdown...")
tradingbot-backend\main.py:579:        logger.error(f"❌ Critical startup error - cannot start uvicorn: {e}")
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:21:import logging
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:202:    loggr = logging.getLogger("nodeenv")
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:203:    loggr.setLevel(logging.INFO)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:211:    logging.StreamHandler.emit = emit
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:214:    ch = logging.StreamHandler()
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:215:    ch.setLevel(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:218:    formatter = logging.Formatter(fmt="%(message)s")
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:414:        logger.debug(' * Creating: %s ... ', path, extra=dict(continued=True))
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:416:        logger.debug('done.')
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:418:        logger.debug(' * Directory %s already exists', path)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:436:        logger.debug(' * Writing %s ... ', dest, extra=dict(continued=True))
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:440:        logger.debug('done.')
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:446:            logger.debug(' * Content %s already in place', dest)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:450:            logger.info(' * File %s exists with different content; '
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:455:            logger.info(' * Appending data to %s', dest)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:460:        logger.info(' * Overwriting %s with new content', dest)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:480:    logger.debug(" ** Running command %s" % cmd_desc)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:503:        logger.error("Error %s while executing command %s" % (e, cmd_desc))
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:520:            logger.info(line)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:527:                logger.critical(s)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:604:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:617:    logger.info('.', extra=dict(continued=True))
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:619:    logger.info('.', extra=dict(continued=True))
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:680:    logger.info('.', extra=dict(continued=True))
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:702:    logger.info('.', extra=dict(continued=True))
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:728:        logger.debug(' * Temporarily pointing python to %s', python2_path)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:751:    logger.info('.', extra=dict(continued=True))
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:753:    logger.info('.', extra=dict(continued=True))
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:766:        logger.info('')
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:775:    logger.info(' * Install %s node (%s) ' % (src_type, args.node),
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:793:                logger.warning('Failed to download from %s' % node_url)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:795:    logger.info('.', extra=dict(continued=True))
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:802:    logger.info(' done.')
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:810:    logger.info(' * Install npm.js (%s) ... ' % args.npm,
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:832:        logger.info(out)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:833:    logger.info('done.')
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:841:    logger.info(' * Install npm.js (%s) ... ' % args.npm,
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:882:    logger.info(' * Install node.js packages ... ',
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:902:    logger.info('done.')
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:983:                logger.error('Error: Failed to create nodejs.exe link')
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:999:        logger.info(' * Environment already exists: %s', env_dir)
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:1045:        logger.info('\t'.join(chunk))
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:1072:            logger.error('No python virtualenv is available')
tradingbot-backend\.venv\Lib\site-packages\nodeenv.py:1096:        logger.error('Installing system node.js on win32 is not supported!')
tradingbot-backend\.venv\Lib\site-packages\typing_extensions.py:1808:           def add_logging(f: Callable[P, T]) -> Callable[P, T]:
tradingbot-backend\.venv\Lib\site-packages\typing_extensions.py:1809:               '''A type-safe decorator to add logging to a function.'''
tradingbot-backend\.venv\Lib\site-packages\typing_extensions.py:1811:                   logging.info(f'{f.__name__} was called')
tradingbot-backend\.venv\Lib\site-packages\typing_extensions.py:1815:           @add_logging
tradingbot-backend\.venv\Lib\site-packages\anyio\streams\tls.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\anyio\streams\tls.py:332:            logging.getLogger(__name__).exception(
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\baseline.py:15:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\baseline.py:31:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\baseline.py:145:# #################### Setup logging ##########################################
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\baseline.py:147:    """Init logger."""
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\baseline.py:149:    log_level = logging.INFO
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\baseline.py:151:    logging.captureWarnings(True)
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\baseline.py:153:    handler = logging.StreamHandler(sys.stdout)
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\baseline.py:154:    handler.setFormatter(logging.Formatter(log_format_string))
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\config_generator.py:7:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\config_generator.py:16:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\config_generator.py:51:    """Init logger."""
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\config_generator.py:53:    log_level = logging.INFO
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\config_generator.py:55:    logging.captureWarnings(True)
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\config_generator.py:57:    handler = logging.StreamHandler(sys.stdout)
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\config_generator.py:58:    handler.setFormatter(logging.Formatter(log_format_string))
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:8:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:20:LOG = logging.getLogger()
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:23:def _init_logger(log_level=logging.INFO, log_format=None):
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:24:    """Initialize the logger.
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:27:    :return: An instantiated logging instance
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:37:    logging.captureWarnings(True)
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:40:    handler = logging.StreamHandler(sys.stderr)
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:41:    handler.setFormatter(logging.Formatter(log_format_string))
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:43:    LOG.debug("logging initialized")
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:136:    # bring our logging stuff up as early as possible
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:138:        logging.DEBUG
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:140:        else logging.INFO
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:609:        _init_logger(log_level=logging.DEBUG, log_format=log_format)
tradingbot-backend\.venv\Lib\site-packages\bandit\cli\main.py:612:        _init_logger(log_level=logging.WARN)
tradingbot-backend\.venv\Lib\site-packages\bandit\core\config.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\core\config.py:22:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\core\extension_loader.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\core\extension_loader.py:10:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\core\manager.py:9:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\core\manager.py:26:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\core\manager.py:271:            and LOG.getEffectiveLevel() <= logging.INFO
tradingbot-backend\.venv\Lib\site-packages\bandit\core\manager.py:336:            if not LOG.isEnabledFor(logging.DEBUG):
tradingbot-backend\.venv\Lib\site-packages\bandit\core\meta_ast.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\core\meta_ast.py:8:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\core\node_visitor.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\core\node_visitor.py:13:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\core\tester.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\core\tester.py:14:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\core\test_properties.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\core\test_properties.py:9:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\core\test_set.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\core\test_set.py:11:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\core\utils.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\core\utils.py:15:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\csv.py:33:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\csv.py:38:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\custom.py:28:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\custom.py:36:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\html.py:149:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\html.py:157:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\json.py:80:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\json.py:87:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\sarif.py:128:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\sarif.py:140:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\sarif.py:156:    log = om.SarifLog(
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\screen.py:36:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\screen.py:58:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\text.py:36:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\text.py:44:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\xml.py:36:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\xml.py:42:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\yaml.py:65:import logging
tradingbot-backend\.venv\Lib\site-packages\bandit\formatters\yaml.py:73:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:6:B612: Test for insecure use of logging.config.listen
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:10:``logging.config.listen`` function. The logging.config.listen
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:19:logging.config.listen provides the ability to verify bytes received
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:26:    >> Issue: [B612:logging_config_listen] Use of insecure
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:27:    logging.config.listen detected.
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:30:       Location: examples/logging_config_insecure_listen.py:3:4
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:32:    3	t = logging.config.listen(9999)
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:36: - https://docs.python.org/3/library/logging.config.html#logging.config.listen
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:48:def logging_config_insecure_listen(context):
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:50:        context.call_function_name_qual == "logging.config.listen"
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py:57:            text="Use of insecure logging.config.listen detected.",
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\try_except_continue.py:12:a later point in the program, typically some error handling or logging action
tradingbot-backend\.venv\Lib\site-packages\bandit\plugins\try_except_pass.py:12:a later point in the program, typically some error handling or logging action
tradingbot-backend\.venv\Lib\site-packages\black\concurrency.py:8:import logging
tradingbot-backend\.venv\Lib\site-packages\black\concurrency.py:63:        cf_logger = logging.getLogger("concurrent.futures")
tradingbot-backend\.venv\Lib\site-packages\black\concurrency.py:64:        cf_logger.setLevel(logging.CRITICAL)
tradingbot-backend\.venv\Lib\site-packages\blackd\__init__.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\blackd\__init__.py:82:    logging.basicConfig(level=logging.INFO)
tradingbot-backend\.venv\Lib\site-packages\blackd\__init__.py:164:        logging.exception("Exception during handling a request")
tradingbot-backend\.venv\Lib\site-packages\blib2to3\pgen2\driver.py:20:import logging
tradingbot-backend\.venv\Lib\site-packages\blib2to3\pgen2\driver.py:26:from logging import Logger
tradingbot-backend\.venv\Lib\site-packages\blib2to3\pgen2\driver.py:111:            logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\blib2to3\pgen2\driver.py:151:                self.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\blib2to3\pgen2\driver.py:164:                    self.logger.debug("Stop.")
tradingbot-backend\.venv\Lib\site-packages\blib2to3\pgen2\driver.py:255:        logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\blib2to3\pgen2\driver.py:311:    logging.basicConfig(level=logging.INFO, stream=sys.stdout, format="%(message)s")
tradingbot-backend\.venv\Lib\site-packages\bs4\dammit.py:16:import logging
tradingbot-backend\.venv\Lib\site-packages\bs4\dammit.py:583:        self.log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_dammit.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_dammit.py:119:        logging.disable(logging.WARNING)
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_dammit.py:131:            logging.disable(logging.NOTSET)
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_pageelement.py:152:   console.log("< < hey > > ");
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_pageelement.py:161:   console.log("< < hey > > ");
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_soup.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_soup.py:470:        logging.disable(logging.WARNING)
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\test_soup.py:483:            logging.disable(logging.NOTSET)
tradingbot-backend\.venv\Lib\site-packages\bs4\tests\__init__.py:1047:        soup.script.string = 'console.log("< < hey > > ");'
tradingbot-backend\.venv\Lib\site-packages\build\env.py:93:            _ctx.log(f'Creating isolated environment: {self._env_backend.display_name}...')
tradingbot-backend\.venv\Lib\site-packages\build\env.py:136:        _ctx.log('Installing packages in isolated environment:\n' + '\n'.join(f'- {r}' for r in sorted(requirements)))
tradingbot-backend\.venv\Lib\site-packages\build\env.py:227:            result = virtualenv.cli_run(opts, setup_logging=False)
tradingbot-backend\.venv\Lib\site-packages\build\env.py:312:            _ctx.log(f'Using external uv from {uv_bin}')
tradingbot-backend\.venv\Lib\site-packages\build\_builder.py:221:        _ctx.log(f'Getting build dependencies for {distribution}...')
tradingbot-backend\.venv\Lib\site-packages\build\_builder.py:259:        _ctx.log(f'Getting metadata for {distribution}...')
tradingbot-backend\.venv\Lib\site-packages\build\_builder.py:289:        _ctx.log(f'Building {distribution}...')
tradingbot-backend\.venv\Lib\site-packages\build\_ctx.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\build\_ctx.py:19:_default_logger = logging.getLogger(_package_name)
tradingbot-backend\.venv\Lib\site-packages\build\_ctx.py:24:        _default_logger.log(logging.INFO, message, stacklevel=2)
tradingbot-backend\.venv\Lib\site-packages\build\_ctx.py:32:    log = LOGGER.get()
tradingbot-backend\.venv\Lib\site-packages\build\_ctx.py:34:    log(subprocess.list2cmdline(error.cmd), origin=('subprocess', 'cmd'))
tradingbot-backend\.venv\Lib\site-packages\build\_ctx.py:39:            log(stream.decode() if isinstance(stream, bytes) else stream, origin=('subprocess', stream_name))
tradingbot-backend\.venv\Lib\site-packages\build\_ctx.py:48:        log = LOGGER.get()
tradingbot-backend\.venv\Lib\site-packages\build\_ctx.py:52:                log(line, origin=('subprocess', stream_name))
tradingbot-backend\.venv\Lib\site-packages\build\_ctx.py:58:            log(subprocess.list2cmdline(cmd), origin=('subprocess', 'cmd'))
tradingbot-backend\.venv\Lib\site-packages\build\_ctx.py:60:            # Logging in sub-thread to more-or-less ensure order of stdout and stderr whilst also
tradingbot-backend\.venv\Lib\site-packages\build\_ctx.py:86:            return LOGGER.get()
tradingbot-backend\.venv\Lib\site-packages\build\__main__.py:80:def _log(message: str, *, origin: tuple[str, ...] | None = None) -> None:
tradingbot-backend\.venv\Lib\site-packages\build\__main__.py:107:    _ctx.LOGGER.set(_log)
tradingbot-backend\.venv\Lib\site-packages\build\__main__.py:279:                _ctx.log(f'Building {_natural_language_list(distributions)} from sdist')
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:26:logger = logging.getLogger("charset_normalizer")
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:27:explain_handler = logging.StreamHandler()
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:29:    logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:60:    Custom logging format and handler can be set manually.
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:71:        previous_logger_level: int = logger.level
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:72:        logger.addHandler(explain_handler)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:73:        logger.setLevel(TRACE)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:78:        logger.debug("Encoding detection on empty bytes, assuming utf_8 intention.")
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:80:            logger.removeHandler(explain_handler)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:81:            logger.setLevel(previous_logger_level or logging.WARNING)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:85:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:96:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:107:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:124:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:131:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:146:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:168:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:199:            logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:206:            logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:216:            logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:244:                logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:261:            logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:282:            logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:330:            logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:349:                logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:361:            logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:393:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:406:            logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:430:            logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:462:                logger.debug(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:467:                    logger.removeHandler(explain_handler)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:468:                    logger.setLevel(previous_logger_level)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:480:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:485:                logger.removeHandler(explain_handler)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:486:                logger.setLevel(previous_logger_level)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:491:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:497:                logger.removeHandler(explain_handler)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:498:                logger.setLevel(previous_logger_level)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:503:            logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:509:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:523:            logger.debug("Encoding detection: utf_8 will be used as a fallback match")
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:526:            logger.debug("Encoding detection: ascii will be used as a fallback match")
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:530:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:536:        logger.debug("Encoding detection: Unable to determine any suitable charset.")
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:539:        logger.removeHandler(explain_handler)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\api.py:540:        logger.setLevel(previous_logger_level)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\constant.py:573:# Logging LEVEL below DEBUG
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\md.py:4:from logging import getLogger
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\md.py:621:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\md.py:629:            logger.log(TRACE, f"Starting with: {decoded_sequence[:16]}")
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\md.py:630:            logger.log(TRACE, f"Ending with: {decoded_sequence[-16::]}")
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\md.py:633:            logger.log(TRACE, f"{dt.__class__}: {dt.ratio}")
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\utils.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\utils.py:348:def set_logging_handler(
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\utils.py:350:    level: int = logging.INFO,
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\utils.py:353:    logger = logging.getLogger(name)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\utils.py:354:    logger.setLevel(level)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\utils.py:356:    handler = logging.StreamHandler()
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\utils.py:357:    handler.setFormatter(logging.Formatter(format_string))
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\utils.py:358:    logger.addHandler(handler)
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\__init__.py:24:import logging
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\__init__.py:29:from .utils import set_logging_handler
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\__init__.py:42:    "set_logging_handler",
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\__init__.py:46:# https://docs.python.org/3.3/howto/logging.html#configuring-logging-for-a-library
tradingbot-backend\.venv\Lib\site-packages\charset_normalizer\__init__.py:48:logging.getLogger("charset_normalizer").addHandler(logging.NullHandler())
tradingbot-backend\.venv\Lib\site-packages\click\core.py:1105:        self.format_epilog(ctx, formatter)
tradingbot-backend\.venv\Lib\site-packages\click\core.py:1143:    def format_epilog(self, ctx: Context, formatter: HelpFormatter) -> None:
tradingbot-backend\.venv\Lib\site-packages\dateutil\zoneinfo\rebuild.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\dateutil\zoneinfo\rebuild.py:72:        logging.error(
tradingbot-backend\.venv\Lib\site-packages\distlib\compat.py:911:    from logging.config import BaseConfigurator, valid_ident
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:14:import logging
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:31:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:145:                        logger.debug('Found %s', r.path)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:149:                        logger.debug('Found %s', r.path)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:154:                    logger.warning(msg, r.path, e)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:272:                logger.debug('No "provides": %s', dist)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:381:        logger.debug('%s: got requirements %r from metadata: %r', self.name, req_attr, reqts)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:419:            logger.warning('could not read version %r - using name only', req)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:677:        logger.info('creating %s', record_path)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:771:        logger.info('creating %s', shared_path)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:893:                    logger.warning('Unexpected line: quitting requirement scan: %r', line)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:897:                    logger.warning('Not recognised as a requirement: %r', line)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:900:                    logger.warning('extra requirements in requires.txt are '
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:1022:                        logger.warning('Non-existent file: %s', p)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:1125:        logger.debug('%s missing %r', distribution, requirement)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:1201:            logger.debug('Moving to result: %s', ['%s (%s)' % (d.name, d.version) for d in to_remove])
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:1231:            logger.debug('Add to provided: %s, %s, %s', name, version, dist)
tradingbot-backend\.venv\Lib\site-packages\distlib\database.py:1242:                logger.warning('could not read version %r - using name only', req)
tradingbot-backend\.venv\Lib\site-packages\distlib\index.py:8:import logging
tradingbot-backend\.venv\Lib\site-packages\distlib\index.py:23:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\index.py:132:        :param name: The logical name of the stream (used for logging only).
tradingbot-backend\.venv\Lib\site-packages\distlib\index.py:143:            logger.debug('%s: %s' % (name, s))
tradingbot-backend\.venv\Lib\site-packages\distlib\index.py:171:        logger.debug('invoking: %s', ' '.join(cmd))
tradingbot-backend\.venv\Lib\site-packages\distlib\index.py:263:                logger.warning('no signing program available - not signed')
tradingbot-backend\.venv\Lib\site-packages\distlib\index.py:338:        logger.debug('invoking: %s', ' '.join(cmd))
tradingbot-backend\.venv\Lib\site-packages\distlib\index.py:389:            logger.debug('No digest specified')
tradingbot-backend\.venv\Lib\site-packages\distlib\index.py:396:            logger.debug('Digest specified: %s' % digest)
tradingbot-backend\.venv\Lib\site-packages\distlib\index.py:440:            logger.debug('Digest verified: %s', digest)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:11:import logging
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:31:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:219:                logger.debug('Not replacing %r with %r', url1, url2)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:221:                logger.debug('Replacing %r with %r', url1, url2)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:245:            logger.debug('%s: version hint in fragment: %r', project_name, frag)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:258:                    logger.debug('Wheel not compatible: %s', path)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:273:                logger.warning('invalid path for wheel: %s', path)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:275:            logger.debug('Not downloadable: %s', path)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:283:                        logger.debug('No match for project/version: %s', path)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:365:        logger.debug('matcher: %s (%s)', matcher, type(matcher).__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:376:                        pass  # logger.debug('%s did not match %r', matcher, k)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:381:                    logger.warning('error matching %s with %r', matcher, k)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:386:                logger.debug('sorted list: %s', slist)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:521:            logger.exception('JSON fetch failed: %s', e)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:660:                logger.debug('Queueing %s', url)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:691:        logger.debug('process_download: %s -> %s', url, info)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:721:        logger.debug('should_queue: %s (%s) from %s -> %s', link, rel, referrer, result)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:743:                                    logger.debug('Queueing %s from %s', link, url)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:753:                # logger.debug('Sentinel seen, quitting.')
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:771:            logger.debug('Returning %s from cache: %s', url, result)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:776:                logger.debug('Skipping %s due to bad host %s', url, host)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:780:                    logger.debug('Fetching %s', url)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:782:                    logger.debug('Fetched %s', url)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:804:                        logger.exception('Fetch failed: %s: %s', url, e)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:806:                    logger.exception('Fetch failed: %s: %s', url, e)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:810:                    logger.exception('Fetch failed: %s: %s', url, e)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:1084:        logger.debug('adding distribution %s', dist)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:1090:            logger.debug('Add to provided: %s, %s, %s', name, version, dist)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:1099:        logger.debug('removing distribution %s', dist)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:1105:            logger.debug('Remove from provided: %s, %s, %s', name, version, dist)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:1229:            logger.debug('passed %s as requirement', odist)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:1234:            logger.debug('located %s', odist)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:1262:                    logger.debug('No providers found for %r', r)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:1269:                        logger.debug('Cannot satisfy %r', r)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:1278:                            logger.debug('Adding %s to install_dists', provider.name_and_version)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:1293:                logger.debug('%s is a build-time dependency only.', dist.name_and_version)
tradingbot-backend\.venv\Lib\site-packages\distlib\locators.py:1294:        logger.debug('find done for %s', odist)
tradingbot-backend\.venv\Lib\site-packages\distlib\manifest.py:12:import logging
tradingbot-backend\.venv\Lib\site-packages\distlib\manifest.py:24:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\manifest.py:112:            logger.debug('add_dir added %s', d)
tradingbot-backend\.venv\Lib\site-packages\distlib\manifest.py:155:                    logger.warning('no files found matching %r', pattern)
tradingbot-backend\.venv\Lib\site-packages\distlib\manifest.py:164:                    logger.warning('no files found matching %r '
tradingbot-backend\.venv\Lib\site-packages\distlib\manifest.py:174:                    logger.warning('no files found matching %r '
tradingbot-backend\.venv\Lib\site-packages\distlib\manifest.py:183:                logger.warning('no directories found matching %r',
tradingbot-backend\.venv\Lib\site-packages\distlib\manifest.py:188:                logger.warning('no previously-included directories found '
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:15:import logging
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:24:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:134:            logger.debug('Removed 1.0 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:137:            logger.debug('Removed 1.1 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:140:            logger.debug('Removed 1.2 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:143:            logger.debug('Removed 1.3 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:147:                logger.debug('Removed 2.1 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:150:            logger.debug('Removed 2.2 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:153:        # logger.debug('Removed 2.0 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:159:        logger.debug('Out of options - unknown metadata set: %s', fields)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:354:        # logger.debug('Attempting to set metadata for %s', self)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:434:        if logger.isEnabledFor(logging.WARNING):
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:442:                        logger.warning("'%s': '%s' is not valid (field '%s')", project_name, v, name)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:446:                    logger.warning("'%s': '%s' is not a valid version (field '%s')", project_name, value, name)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:449:                    logger.warning("'%s': '%s' is not a valid version (field '%s')", project_name, value, name)
tradingbot-backend\.venv\Lib\site-packages\distlib\metadata.py:885:                logger.warning('Metadata: missing: %s, warnings: %s', missing, warnings)
tradingbot-backend\.venv\Lib\site-packages\distlib\resources.py:11:import logging
tradingbot-backend\.venv\Lib\site-packages\distlib\resources.py:21:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\resources.py:239:            logger.debug('_find failed: %r %r', path, self.loader.prefix)
tradingbot-backend\.venv\Lib\site-packages\distlib\resources.py:241:            logger.debug('_find worked: %r %r', path, self.loader.prefix)
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:8:import logging
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:20:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:132:                logger.warning('Failed to open %s', executable)
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:290:                    logger.warning('Failed to write executable - trying to '
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:297:                    logger.debug('Able to replace executable using '
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:307:                    logger.warning('Skipping existing file %s', outname)
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:347:            logger.debug('not copying %s (up-to-date)', script)
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:362:                logger.warning('%s is an empty file (skipping)', script)
tradingbot-backend\.venv\Lib\site-packages\distlib\scripts.py:378:            logger.info('copying and adjusting %s -> %s', script, self.target_dir)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:12:import logging
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:38:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:525:        logger.info('Copying %s to %s', infile, outfile)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:541:        logger.info('Copying stream %s to %s', instream, outfile)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:571:                    logger.info("changing mode of %s", f)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:574:                    logger.info("changing mode of %s to %o", f, mode)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:585:            logger.info('Creating %s' % path)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:593:        logger.info('Byte-compiling %s to %s', path, dpath)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:613:                logger.debug('Removing directory tree at %s', path)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:624:                logger.debug('Removing %s %s', s, path)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:778:            logger.warning('Directory exists but is not writable: %s', result)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:784:            logger.warning('Unable to create %s', result, exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:788:        logger.warning('Default location unusable, using %s', result)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:911:                logger.warning('undeclared extra: %s' % unwanted)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:916:                logger.warning('undeclared extra: %s' % r)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:936:            logger.debug('Unexpected response for JSON request: %s', ct)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:943:        logger.exception('Failed to get external data for %s: %s', url, e)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:981:            logger.warning('Directory \'%s\' is not private', base)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:1070:                logger.exception('Exception during event publication')
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:1073:        logger.debug('publish %s: args = %s, kwargs = %s, result = %s', event, args, kwargs, result)
tradingbot-backend\.venv\Lib\site-packages\distlib\util.py:1485:                    logger.debug('Host verified: %s', self.host)
tradingbot-backend\.venv\Lib\site-packages\distlib\version.py:11:import logging
tradingbot-backend\.venv\Lib\site-packages\distlib\version.py:22:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\version.py:641:            logger.warning('Cannot compute compatible match for version %s '
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:15:import logging
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:32:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:367:                logger.debug('Wrote %s to %s in wheel', p, ap)
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:603:                        logger.debug('lib_only: skipping %s', u_arcname)
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:642:                                logger.warning('Byte-compilation failed', exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:656:                    logger.debug('lib_only: returning None')
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:683:                            logger.warning('Unable to read legacy script '
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:694:                            logger.warning('Unable to read JSON metadata, so '
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:733:                logger.exception('installation failed.')
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:802:            logger.debug('%s already in path', pathname)
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:817:            logger.debug('%s not in path', pathname)
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:921:                logger.debug('Cannot update non-compliant (PEP-440) '
tradingbot-backend\.venv\Lib\site-packages\distlib\wheel.py:928:                logger.debug('Version updated from %r to %r', version, updated)
tradingbot-backend\.venv\Lib\site-packages\distlib\__init__.py:7:import logging
tradingbot-backend\.venv\Lib\site-packages\distlib\__init__.py:17:    from logging import NullHandler
tradingbot-backend\.venv\Lib\site-packages\distlib\__init__.py:20:    class NullHandler(logging.Handler):
tradingbot-backend\.venv\Lib\site-packages\distlib\__init__.py:32:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\distlib\__init__.py:33:logger.addHandler(NullHandler())
tradingbot-backend\.venv\Lib\site-packages\dotenv\main.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\dotenv\main.py:21:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\dotenv\main.py:27:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\dotenv\main.py:61:                logger.info(
tradingbot-backend\.venv\Lib\site-packages\dotenv\main.py:111:            logger.warning("Key %s not found in %s.", key, self.dotenv_path)
tradingbot-backend\.venv\Lib\site-packages\dotenv\main.py:209:        logger.warning("Can't delete from %s - it doesn't exist.", dotenv_path)
tradingbot-backend\.venv\Lib\site-packages\dotenv\main.py:221:        logger.warning("Key %s not removed from %s - key doesn't exist.", key_to_unset, dotenv_path)
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:52:    :param logger: To enable logging set to ``True`` or pass a logger object to
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:53:                   use. To disable logging set to ``False``. The default is
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:115:                self.logger.warning('Signal handler is unsupported')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:236:            self.logger.error('aiohttp not installed -- cannot make HTTP '
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:240:        self.logger.info('Attempting polling connection to ' + self.base_url)
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:267:        self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:296:            self.logger.error('aiohttp package not installed')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:301:            self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:308:            self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:345:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:355:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:362:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:368:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:375:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:380:            self.logger.info('WebSocket upgrade was successful')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:390:            self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:412:        self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:425:            self.logger.error('Received unexpected packet of type %s',
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:433:        self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:456:            self.logger.info('HTTP %s request to %s failed with error %s.',
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:487:                        self.logger.exception(event + ' async handler error')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:514:                        self.logger.exception(event + ' handler error')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:524:            self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:530:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:535:                self.logger.warning('Unexpected status code %s in server '
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:543:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:551:            self.logger.info('Waiting for write loop task to end')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:561:        self.logger.info('Exiting read loop task')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:572:                    self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:581:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:586:                self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:591:                self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:599:                self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:606:            self.logger.info('Waiting for write loop task to end')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:616:        self.logger.info('Exiting read loop task')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:631:                self.logger.error('packet queue is empty, aborting')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:660:                    self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:664:                    self.logger.warning('Unexpected status code %s in server '
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:679:                    self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_client.py:683:        self.logger.info('Exiting write loop task')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:63:    :param logger: To enable logging set to ``True`` or pass a logger object to
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:64:                   use. To disable logging set to ``False``. Note that fatal
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:118:            self.logger.warning('Cannot send to sid %s', sid)
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:337:                    self.logger.exception('post request handler error')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:342:            self.logger.warning('Method %s not supported', method)
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:364:        self.logger.info('Socket.IO is shutting down')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:469:            self.logger.warning('Application rejected connection')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:521:                        self.logger.exception(event + ' async handler error')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:547:                        self.logger.exception(event + ' handler error')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:602:                self.logger.info('service task canceled')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:606:                    self.logger.info('event loop is closed, exiting service '
tradingbot-backend\.venv\Lib\site-packages\engineio\async_server.py:611:                self.logger.exception('service task exception')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_socket.py:37:        self.server.logger.info('%s: Received packet %s data %s',
tradingbot-backend\.venv\Lib\site-packages\engineio\async_socket.py:61:            self.server.logger.info('%s: Client is gone, closing socket',
tradingbot-backend\.venv\Lib\site-packages\engineio\async_socket.py:77:        self.server.logger.info('%s: Sending packet %s data %s',
tradingbot-backend\.venv\Lib\site-packages\engineio\async_socket.py:89:            self.server.logger.info('%s: Received request to upgrade to %s',
tradingbot-backend\.venv\Lib\site-packages\engineio\async_socket.py:170:                self.server.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_socket.py:185:                self.server.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_socket.py:217:        self.server.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\async_socket.py:251:                self.server.logger.info('Receive error -- socket is closed')
tradingbot-backend\.venv\Lib\site-packages\engineio\async_socket.py:256:                self.server.logger.exception('Unknown receive error')
tradingbot-backend\.venv\Lib\site-packages\engineio\base_client.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\engineio\base_client.py:8:default_logger = logging.getLogger('engineio.client')
tradingbot-backend\.venv\Lib\site-packages\engineio\base_client.py:77:            if self.logger.level == logging.NOTSET:
tradingbot-backend\.venv\Lib\site-packages\engineio\base_client.py:79:                    self.logger.setLevel(logging.INFO)
tradingbot-backend\.venv\Lib\site-packages\engineio\base_client.py:81:                    self.logger.setLevel(logging.ERROR)
tradingbot-backend\.venv\Lib\site-packages\engineio\base_client.py:82:                self.logger.addHandler(logging.StreamHandler())
tradingbot-backend\.venv\Lib\site-packages\engineio\base_server.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\engineio\base_server.py:12:default_logger = logging.getLogger('engineio.server')
tradingbot-backend\.venv\Lib\site-packages\engineio\base_server.py:70:            if self.logger.level == logging.NOTSET:
tradingbot-backend\.venv\Lib\site-packages\engineio\base_server.py:72:                    self.logger.setLevel(logging.INFO)
tradingbot-backend\.venv\Lib\site-packages\engineio\base_server.py:74:                    self.logger.setLevel(logging.ERROR)
tradingbot-backend\.venv\Lib\site-packages\engineio\base_server.py:75:                self.logger.addHandler(logging.StreamHandler())
tradingbot-backend\.venv\Lib\site-packages\engineio\base_server.py:112:        self.logger.info('Server initialized for %s.', self.async_mode)
tradingbot-backend\.venv\Lib\site-packages\engineio\base_server.py:348:        """Log message with logging.ERROR level the first time, then log
tradingbot-backend\.venv\Lib\site-packages\engineio\base_server.py:351:            self.logger.error(message + ' (further occurrences of this error '
tradingbot-backend\.venv\Lib\site-packages\engineio\base_server.py:355:            self.logger.info(message)
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:23:default_logger = logging.getLogger('engineio.client')
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:32:    :param logger: To enable logging set to ``True`` or pass a logger object to
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:33:                   use. To disable logging set to ``False``. The default is
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:180:            self.logger.error('requests package is not installed -- cannot '
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:184:        self.logger.info('Attempting polling connection to ' + self.base_url)
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:210:        self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:241:            self.logger.error('websocket-client package not installed, only '
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:246:            self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:253:            self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:338:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:348:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:355:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:361:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:368:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:373:            self.logger.info('WebSocket upgrade was successful')
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:383:            self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:407:        self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:419:            self.logger.error('Received unexpected packet of type %s',
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:427:        self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:443:            self.logger.info('HTTP %s request to %s failed with error %s.',
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:466:                    self.logger.exception(event + ' handler error')
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:471:            self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:477:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:482:                self.logger.warning('Unexpected status code %s in server '
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:489:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:497:            self.logger.info('Waiting for write loop task to end')
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:507:        self.logger.info('Exiting read loop task')
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:519:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:524:                self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:530:                    self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:533:                    self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:541:                self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:548:            self.logger.info('Waiting for write loop task to end')
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:558:        self.logger.info('Exiting read loop task')
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:573:                self.logger.error('packet queue is empty, aborting')
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:600:                    self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:604:                    self.logger.warning('Unexpected status code %s in server '
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:620:                    self.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\engineio\client.py:623:        self.logger.info('Exiting write loop task')
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:9:default_logger = logging.getLogger('engineio.server')
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:62:    :param logger: To enable logging set to ``True`` or pass a logger object to
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:63:                   use. To disable logging set to ``False``. The default is
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:103:            self.logger.warning('Cannot send to sid %s', sid)
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:316:                    self.logger.exception('post request handler error')
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:321:            self.logger.warning('Method %s not supported', method)
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:346:        self.logger.info('Socket.IO is shutting down')
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:412:            self.logger.warning('Application rejected connection')
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:460:                    self.logger.exception(event + ' handler error')
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:499:                self.logger.info('service task canceled')
tradingbot-backend\.venv\Lib\site-packages\engineio\server.py:503:                self.logger.exception('service task exception')
tradingbot-backend\.venv\Lib\site-packages\engineio\socket.py:39:        self.server.logger.info('%s: Received packet %s data %s',
tradingbot-backend\.venv\Lib\site-packages\engineio\socket.py:62:            self.server.logger.info('%s: Client is gone, closing socket',
tradingbot-backend\.venv\Lib\site-packages\engineio\socket.py:78:        self.server.logger.info('%s: Sending packet %s data %s',
tradingbot-backend\.venv\Lib\site-packages\engineio\socket.py:90:            self.server.logger.info('%s: Received request to upgrade to %s',
tradingbot-backend\.venv\Lib\site-packages\engineio\socket.py:176:                self.server.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\socket.py:187:                self.server.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\socket.py:219:        self.server.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\socket.py:230:                    self.server.logger.info(
tradingbot-backend\.venv\Lib\site-packages\engineio\socket.py:243:                self.server.logger.info('Receive error -- socket is closed')
tradingbot-backend\.venv\Lib\site-packages\engineio\socket.py:248:                self.server.logger.exception('Unknown receive error')
tradingbot-backend\.venv\Lib\site-packages\fastapi\applications.py:118:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\fastapi\logger.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\fastapi\logger.py:3:logger = logging.getLogger("fastapi")
tradingbot-backend\.venv\Lib\site-packages\fastapi\dependencies\utils.py:108:                logger.error(multipart_incorrect_install_error)
tradingbot-backend\.venv\Lib\site-packages\fastapi\dependencies\utils.py:111:            logger.error(multipart_not_installed_error)
tradingbot-backend\.venv\Lib\site-packages\fastapi\openapi\models.py:21:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\filelock\asyncio.py:7:import logging
tradingbot-backend\.venv\Lib\site-packages\filelock\asyncio.py:32:_LOGGER = logging.getLogger("filelock")
tradingbot-backend\.venv\Lib\site-packages\filelock\asyncio.py:230:                    _LOGGER.debug("Attempting to acquire lock %s on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\filelock\asyncio.py:233:                    _LOGGER.debug("Lock %s acquired on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\filelock\asyncio.py:236:                    _LOGGER.debug("Failed to immediately acquire lock %s on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\filelock\asyncio.py:239:                    _LOGGER.debug("Timeout on acquiring lock %s on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\filelock\asyncio.py:242:                _LOGGER.debug(msg, lock_id, lock_filename, poll_interval)
tradingbot-backend\.venv\Lib\site-packages\filelock\asyncio.py:263:                _LOGGER.debug("Attempting to release lock %s on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\filelock\asyncio.py:266:                _LOGGER.debug("Lock %s released on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\filelock\_api.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\filelock\_api.py:27:_LOGGER = logging.getLogger("filelock")
tradingbot-backend\.venv\Lib\site-packages\filelock\_api.py:331:                    _LOGGER.debug("Attempting to acquire lock %s on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\filelock\_api.py:334:                    _LOGGER.debug("Lock %s acquired on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\filelock\_api.py:337:                    _LOGGER.debug("Failed to immediately acquire lock %s on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\filelock\_api.py:340:                    _LOGGER.debug("Timeout on acquiring lock %s on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\filelock\_api.py:343:                _LOGGER.debug(msg, lock_id, lock_filename, poll_interval)
tradingbot-backend\.venv\Lib\site-packages\filelock\_api.py:364:                _LOGGER.debug("Attempting to release lock %s on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\filelock\_api.py:367:                _LOGGER.debug("Lock %s released on %s", lock_id, lock_filename)
tradingbot-backend\.venv\Lib\site-packages\gotrue\types.py:614:    the value. Avoid logging this value to the console.
tradingbot-backend\.venv\Lib\site-packages\gotrue\types.py:620:    scan the QR code. Avoid logging this value to the console.
tradingbot-backend\.venv\Lib\site-packages\h2\config.py:35:    A Logger object that does not actual logging, hence a DummyLogger.
tradingbot-backend\.venv\Lib\site-packages\h2\config.py:39:    logging functions when no logger is passed into the corresponding object.
tradingbot-backend\.venv\Lib\site-packages\h2\config.py:47:        No-op logging. Only level needed for now.
tradingbot-backend\.venv\Lib\site-packages\h2\config.py:52:        No-op logging. Only level needed for now.
tradingbot-backend\.venv\Lib\site-packages\h2\config.py:151:    :type logger: ``logging.Logger``
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:481:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:503:        self.config.logger.debug("Stream ID %d created", stream_id)
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:507:        self.config.logger.debug("Current streams: %s", self.streams.keys())
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:521:        self.config.logger.debug("Initializing connection")
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:531:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:570:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:602:        self.config.logger.debug("Process input %s", connection_input)
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:676:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:789:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:874:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:887:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:906:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:923:        self.config.logger.debug("End stream ID %d", stream_id)
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:958:            self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:968:            self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:999:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1038:        self.config.logger.debug("Send Ping frame")
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1066:        self.config.logger.debug("Reset stream ID %d", stream_id)
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1090:        self.config.logger.debug("Close connection")
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1115:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1357:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1504:        self.config.logger.trace(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1537:        self.config.logger.trace("Received frame: %s", repr(frame))
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1715:            self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1724:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\connection.py:1973:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:115:        for logging purposes.
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:847:        self.config.logger.debug("Upgrading %r", self)
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:866:        self.config.logger.debug("Send headers %s on %r", headers, self)
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:922:        self.config.logger.debug("Push stream %r", self)
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:964:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:989:        self.config.logger.debug("End stream %r", self)
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1001:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1013:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1033:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1055:        self.config.logger.debug("%r pushed by remote peer", self)
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1110:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1134:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1173:        self.config.logger.debug("Receive Continuation frame on %r", self)
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1185:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1211:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1224:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\h2\stream.py:1241:        self.config.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\hpack\hpack.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\hpack\hpack.py:19:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\hpack\table.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\hpack\table.py:8:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\httpcore\_trace.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\httpcore\_trace.py:13:        logger: logging.Logger,
tradingbot-backend\.venv\Lib\site-packages\httpcore\_trace.py:22:        self.debug = self.logger.isEnabledFor(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\httpcore\_trace.py:26:        self.prefix = self.logger.name.split(".")[-1]
tradingbot-backend\.venv\Lib\site-packages\httpcore\_trace.py:45:            self.logger.debug(message)
tradingbot-backend\.venv\Lib\site-packages\httpcore\_trace.py:85:            self.logger.debug(message)
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\connection.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\connection.py:20:logger = logging.getLogger("httpcore.connection")
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\http11.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\http11.py:30:logger = logging.getLogger("httpcore.http11")
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\http2.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\http2.py:24:logger = logging.getLogger("httpcore.http2")
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\http_proxy.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\http_proxy.py:29:logger = logging.getLogger("httpcore.proxy")
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\httpcore\_async\socks_proxy.py:18:logger = logging.getLogger("httpcore.socks")
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\connection.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\connection.py:20:logger = logging.getLogger("httpcore.connection")
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\http11.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\http11.py:30:logger = logging.getLogger("httpcore.http11")
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\http2.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\http2.py:24:logger = logging.getLogger("httpcore.http2")
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\http_proxy.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\http_proxy.py:29:logger = logging.getLogger("httpcore.proxy")
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py:18:logger = logging.getLogger("httpcore.socks")
tradingbot-backend\.venv\Lib\site-packages\httpx\_client.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\httpx\_client.py:87:logger = logging.getLogger("httpx")
tradingbot-backend\.venv\Lib\site-packages\httpx\_client.py:1013:        logger.info(
tradingbot-backend\.venv\Lib\site-packages\httpx\_client.py:1731:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\httpx\_config.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\httpx\_config.py:36:logger = logging.getLogger("httpx")
tradingbot-backend\.venv\Lib\site-packages\httpx\_config.py:79:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\httpx\_config.py:146:            logger.debug("load_verify_locations cafile=%r", cafile)
tradingbot-backend\.venv\Lib\site-packages\httpx\_config.py:150:            logger.debug("load_verify_locations capath=%r", capath)
tradingbot-backend\.venv\Lib\site-packages\idna\intranges.py:5:in the original list?" in time O(log(# runs)).
tradingbot-backend\.venv\Lib\site-packages\lxml\isoschematron\__init__.py:295:        self._clear_error_log()
tradingbot-backend\.venv\Lib\site-packages\markdown_it\parser_block.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\parser_block.py:18:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\blockquote.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\blockquote.py:9:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\blockquote.py:13:    LOGGER.debug(
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\code.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\code.py:7:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\code.py:11:    LOGGER.debug("entering code: %s, %s, %s, %s", state, startLine, endLine, silent)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\fence.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\fence.py:6:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\fence.py:10:    LOGGER.debug("entering fence: %s, %s, %s, %s", state, startLine, endLine, silent)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\heading.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\heading.py:10:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\heading.py:14:    LOGGER.debug("entering heading: %s, %s, %s, %s", state, startLine, endLine, silent)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\hr.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\hr.py:11:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\hr.py:15:    LOGGER.debug("entering hr: %s, %s, %s, %s", state, startLine, endLine, silent)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\html_block.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\html_block.py:11:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\html_block.py:35:    LOGGER.debug(
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\lheading.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\lheading.py:6:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\lheading.py:10:    LOGGER.debug("entering lheading: %s, %s, %s, %s", state, startLine, endLine, silent)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\list.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\list.py:7:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\list.py:102:    LOGGER.debug("entering list: %s, %s, %s, %s", state, startLine, endLine, silent)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\paragraph.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\paragraph.py:7:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\paragraph.py:11:    LOGGER.debug(
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\reference.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\reference.py:6:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_block\reference.py:10:    LOGGER.debug(
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_core\replacements.py:19:import logging
tradingbot-backend\.venv\Lib\site-packages\markdown_it\rules_core\replacements.py:25:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\numpy\array_api\_elementwise_functions.py:428:def log(x: Array, /) -> Array:
tradingbot-backend\.venv\Lib\site-packages\numpy\array_api\_elementwise_functions.py:436:    return Array._new(np.log(x._array))
tradingbot-backend\.venv\Lib\site-packages\numpy\core\fromnumeric.py:931:    'heapsort'     3     O(n*log(n))       0          no
tradingbot-backend\.venv\Lib\site-packages\numpy\core\fromnumeric.py:932:    'mergesort'    2     O(n*log(n))      ~n/2        yes
tradingbot-backend\.venv\Lib\site-packages\numpy\core\fromnumeric.py:933:    'timsort'      2     O(n*log(n))      ~n/2        yes
tradingbot-backend\.venv\Lib\site-packages\numpy\core\fromnumeric.py:966:    This implementation makes quicksort O(n*log(n)) in the worst case.
tradingbot-backend\.venv\Lib\site-packages\numpy\core\function_base.py:437:    # necessary because np.exp(np.log(x)) is not necessarily equal to x.
tradingbot-backend\.venv\Lib\site-packages\numpy\core\setup.py:442:            decl="double log(double);",
tradingbot-backend\.venv\Lib\site-packages\numpy\core\_ufunc_config.py:289:    >>> log = Log()
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_function_base.py:119:        # np.exp(np.log(x)) isn't necessarily exactly equal to x
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_ufunc.py:2596:    # adding inf and -inf (or log(-inf) creates an invalid float and warns
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1259:            assert_almost_equal(np.log(xf), yf)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1263:        xf = np.log(x)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1264:        assert_almost_equal(np.log(x, out=x), xf)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1266:        # test log() of max for dtype does not raise
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1270:                np.log(x)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1280:            y_true = np.log(x_f64)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1281:            y_special = np.log(x_special)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1283:                assert_array_almost_equal_nulp(np.log(x_f64[::jj]), y_true[::jj], nulp=2)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1284:                assert_array_almost_equal_nulp(np.log(x_special[::jj]), y_special[::jj], nulp=2)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1346:                assert_equal(np.log(yf), xf)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1384:            np.log(a)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1790:        assert_array_max_ulp(np.log(x_f32), np.float32(np.log(x_f64)), maxulp=4)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1819:            log_true = np.log(x_f32)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1824:                assert_array_almost_equal_nulp(np.log(x_f32[::jj]), log_true[::jj], nulp=2)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1834:            xf = np.log(np.array(x, dtype=dt))
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1835:            yf = np.log(np.array(y, dtype=dt))
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1836:            zf = np.log(np.array(z, dtype=dt))
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1875:        assert_almost_equal(ncu.log1p(0.2), ncu.log(1.2))
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath.py:1876:        assert_almost_equal(ncu.log1p(1e-6), ncu.log(1+1e-6))
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:22:                            or (np.log(complex(np.NZERO, 0)).imag != np.pi))
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:135:        y_r = np.log(np.abs(x)) + 1j * np.angle(x)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:136:        y = np.log(x)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:149:        # clog(-0 + i0) returns -inf + i pi and raises the 'divide-by-zero'
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:156:            assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:161:        # clog(+0 + i0) returns -inf + i0 and raises the 'divide-by-zero'
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:168:            assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:173:        # clog(x + i inf returns +inf + i pi /2, for finite x.
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:176:        assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:181:        assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:185:        # clog(x + iNaN) returns NaN + iNaN and optionally raises the
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:192:            assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:201:            assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:206:        # clog(- inf + iy) returns +inf + ipi , for finite positive-signed y.
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:209:        assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:213:        # clog(+ inf + iy) returns +inf + i0, for finite positive-signed y.
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:216:        assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:220:        # clog(- inf + i inf) returns +inf + i3pi /4.
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:223:        assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:227:        # clog(+ inf + i inf) returns +inf + ipi /4.
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:230:        assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:234:        # clog(+/- inf + iNaN) returns +inf + iNaN.
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:237:        assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:242:        assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:246:        # clog(NaN + iy) returns NaN + iNaN and optionally raises the
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:250:        assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:254:        # clog(NaN + i inf) returns +inf + iNaN.
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:257:        assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:261:        # clog(NaN + iNaN) returns NaN + iNaN.
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:264:        assert_almost_equal(np.log(x), y)
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:268:        # clog(conj(z)) = conj(clog(z)).
tradingbot-backend\.venv\Lib\site-packages\numpy\core\tests\test_umath_complex.py:273:                assert_almost_equal(np.log(xa[i].conj()), ya[i].conj())
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:630:            self.dist_log(str(e), stderr=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:685:    def dist_log(*args, stderr=False):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:701:            _Distutils.dist_log(e, stderr=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:806:            self.dist_log("cache is disabled by `Config`")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:813:                self.dist_log("load cache from file ->", cache_path)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:816:                    self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:822:                    self.dist_log("invalid cache file", stderr=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:824:                    self.dist_log("hit the file cache")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:829:                    self.dist_log("miss the file cache")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:834:                self.dist_log("hit the memory cache")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:857:        self.dist_log("write cache to path ->", self._cache_path)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1016:            self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1024:            self.dist_log("Optimization is disabled by the Config", stderr=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1032:            self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1077:        self.dist_log("testing flags", flags)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1081:            self.dist_log("testing failed", stderr=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1089:        self.dist_log("testing compiler expression", cexpr)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1100:            self.dist_log("testing failed", stderr=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1244:                self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1551:        self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1567:            self.dist_log("testing failed", stderr=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1631:        self.dist_log("Testing extra checks for feature '%s'" % name, extra_checks)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1649:            self.dist_log("testing failed for checks", not_available, stderr=True)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1786:        self.dist_log("check requested baseline")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1795:        self.dist_log("check requested dispatch-able features")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1807:                self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1811:        self.dist_log("initialize targets groups")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1813:            self.dist_log("parse target group", group_name)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:1853:        self.dist_log("looking for '@targets' inside -> ", source)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2024:            self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2037:                self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2048:                self.dist_log("policy '%s' is ON" % p)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2136:            self.dist_log("skip baseline features", skipped)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2142:        self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2157:            self.dist_log("debug mode is detected, policy 'maxopt' is skipped.")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2159:            self.dist_log("optimization is disabled, policy 'maxopt' is skipped.")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2163:                self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2175:            self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2180:            self.dist_log("compiler warnings are treated as errors")
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2200:            self.dist_log("skip non auto-vectorized features", skipped)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2217:            self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2357:        self.dist_log("generate CPU dispatch header: (%s)" % header_path)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2366:            self.dist_log(
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2553:        self.dist_log("wrap dispatch-able target -> ", wrap_path)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py:2593:        self.dist_log("generate dispatched config -> ", config_path)
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\log.py:19:class Log(old_Log):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\log.py:20:    def _log(self, level, msg, args):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\command\build_src.py:55:         "change logging level from WARN to INFO which will show all " +
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt.py:74:    def dist_log(*args, stderr=False):
tradingbot-backend\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py:30:    def dist_log(*args, stderr=False):
tradingbot-backend\.venv\Lib\site-packages\numpy\doc\constants.py:126:    >>> np.log(-1)
tradingbot-backend\.venv\Lib\site-packages\numpy\doc\constants.py:128:    >>> np.log([-1, 1, 2])
tradingbot-backend\.venv\Lib\site-packages\numpy\doc\constants.py:327:    >>> np.log(0)
tradingbot-backend\.venv\Lib\site-packages\numpy\fft\_pocketfft.py:810:    >>> plt.imshow(np.log(np.abs(np.fft.fftshift(FS))**2))
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\scimath.py:10:  >>> np.emath.log(-math.exp(1)) == (1+1j*math.pi)
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\scimath.py:46:_ln2 = nx.log(2.0)
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\scimath.py:252:def log(x):
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\scimath.py:257:    of :math:`log_e(x)`. For real `x > 0`, this is a real number (``log(0)``
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\scimath.py:258:    returns ``-inf`` and ``log(np.inf)`` returns ``inf``). Otherwise, the
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\scimath.py:278:    For a log() that returns ``NAN`` when real `x < 0`, use `numpy.log`
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\scimath.py:285:    >>> np.emath.log(np.exp(1))
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\scimath.py:289:    ``exp(log(x)) == x`` does *not* hold for real ``x < 0``):
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\scimath.py:291:    >>> np.emath.log(-np.exp(1)) == (1 + np.pi * 1j)
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\scimath.py:296:    return nx.log(x)
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\scimath.py:386:    return nx.log(x)/nx.log(n)
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\twodim_base.py:778:    >>> y = 2*np.log(x) + np.random.rand(n) - 0.5
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\twodim_base.py:789:    >>> ax1.plot(x, 2*np.log(x), 'k-')
tradingbot-backend\.venv\Lib\site-packages\numpy\lib\twodim_base.py:799:    >>> ax2.plot(x, 2*np.log(x), 'k-')
tradingbot-backend\.venv\Lib\site-packages\numpy\ma\tests\test_core.py:1142:        assert_equal(np.log(abs(x)), log(xm))
tradingbot-backend\.venv\Lib\site-packages\numpy\ma\tests\test_core.py:1857:        control = masked_array([np.nan, np.nan, 0, np.log(2), -1],
tradingbot-backend\.venv\Lib\site-packages\numpy\ma\tests\test_core.py:1860:        test = log(a)
tradingbot-backend\.venv\Lib\site-packages\numpy\ma\tests\test_core.py:1865:        test = np.log(a)
tradingbot-backend\.venv\Lib\site-packages\numpy\ma\tests\test_core.py:2517:            log(m)
tradingbot-backend\.venv\Lib\site-packages\numpy\ma\tests\test_old_ma.py:142:            assert_(eq(np.log(abs(x)), log(xm)))
tradingbot-backend\.venv\Lib\site-packages\numpy\ma\tests\test_subclassing.py:205:            assert_(isinstance(log(mx), msubarray))
tradingbot-backend\.venv\Lib\site-packages\numpy\ma\tests\test_subclassing.py:206:            assert_equal(log(x), np.log(x))
tradingbot-backend\.venv\Lib\site-packages\numpy\ma\tests\test_subclassing.py:429:            assert_(isinstance(np.log(wm), WrappedArray))
tradingbot-backend\.venv\Lib\site-packages\numpy\matrixlib\tests\test_masked_matrix.py:190:            assert_(isinstance(log(mx), MMatrix))
tradingbot-backend\.venv\Lib\site-packages\numpy\matrixlib\tests\test_masked_matrix.py:191:            assert_equal(log(x), np.log(x))
tradingbot-backend\.venv\Lib\site-packages\numpy\random\tests\test_direct.py:125:        f = np.sqrt(-2.0 * np.log(r2) / r2)
tradingbot-backend\.venv\Lib\site-packages\numpy\random\tests\test_smoke.py:198:    def test_standard_exponential_float_log(self):
tradingbot-backend\.venv\Lib\site-packages\numpy\random\_examples\numba\extending.py:21:        f = np.sqrt(-2.0 * np.log(r2) / r2)
tradingbot-backend\.venv\Lib\site-packages\numpy\tests\test_public_api.py:354:    'numpy.distutils.log.logging',
tradingbot-backend\.venv\Lib\site-packages\packaging\tags.py:7:import logging
tradingbot-backend\.venv\Lib\site-packages\packaging\tags.py:25:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\packaging\tags.py:115:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pandas\core\nanops.py:170:        # unlike numpy which implements pairwise summation, which has O(log(n)) loss
tradingbot-backend\.venv\Lib\site-packages\pandas\core\sorting.py:640:    np.argsort(kind='mergesort') is O(count x log(count)) where count is the
tradingbot-backend\.venv\Lib\site-packages\pandas\core\sorting.py:661:    do_groupsort = count > 0 and ((alpha + beta * ngroups) < (count * np.log(count)))
tradingbot-backend\.venv\Lib\site-packages\pandas\core\window\ewm.py:85:        decay = 1 - np.exp(np.log(0.5) / halflife)
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\test_downstream.py:150:    smf.ols("Lottery ~ Literacy + np.log(Pop1831)", data=df).fit()
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_operators.py:403:            np.log(s)
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\groupby\test_apply.py:324:            logged = np.log(piece)
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\io\conftest.py:95:            # pipe to null to avoid logging in terminal
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\io\parser\test_network.py:9:import logging
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\io\parser\test_network.py:303:        with caplog.at_level(logging.DEBUG, logger="s3fs"):
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\plotting\test_series.py:248:    def test_bar_log(self):
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\plotting\frame\test_frame.py:347:    def test_negative_log(self):
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\scalar\test_na_scalar.py:230:    assert np.log(NA) is NA
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\series\methods\test_reindex.py:414:def test_reindexing_with_float64_NA_log():
tradingbot-backend\.venv\Lib\site-packages\pandas\tests\series\methods\test_reindex.py:422:        result_log = np.log(s_reindex)
tradingbot-backend\.venv\Lib\site-packages\pbr\core.py:49:import logging
tradingbot-backend\.venv\Lib\site-packages\pbr\core.py:106:        # NB: This will output to the console if no explicit logging has
tradingbot-backend\.venv\Lib\site-packages\pbr\core.py:109:        logging.exception('Error parsing')
tradingbot-backend\.venv\Lib\site-packages\pbr\git.py:167:def _iter_changelog(changelog):
tradingbot-backend\.venv\Lib\site-packages\pbr\git.py:265:def write_git_changelog(
tradingbot-backend\.venv\Lib\site-packages\pbr\git.py:282:            changelog = _iter_changelog(changelog)
tradingbot-backend\.venv\Lib\site-packages\pbr\sphinxext.py:21:from sphinx.util import logging
tradingbot-backend\.venv\Lib\site-packages\pbr\sphinxext.py:27:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pbr\sphinxext.py:63:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\pbr\sphinxext.py:76:            logger.info('Could not extract project metadata from setup.cfg')
tradingbot-backend\.venv\Lib\site-packages\pbr\util.py:59:import logging  # noqa
tradingbot-backend\.venv\Lib\site-packages\pbr\tests\test_git.py:231:    def test_write_git_changelog(self):
tradingbot-backend\.venv\Lib\site-packages\pbr\tests\test_git.py:238:        git.write_git_changelog(git_dir=self.git_dir, dest_dir=self.temp_path)
tradingbot-backend\.venv\Lib\site-packages\pbr\tests\test_packaging.py:491:    def test_skip_write_git_changelog(self):
tradingbot-backend\.venv\Lib\site-packages\pbr\tests\functional\test_changelog_author.py:57:    def test_changelog(self):
tradingbot-backend\.venv\Lib\site-packages\pbr\tests\functional\test_changelog_author.py:63:    def test_install_no_ChangeLog(self):
tradingbot-backend\.venv\Lib\site-packages\pbr\tests\functional\test_changelog_author.py:85:    def test_changelog(self):
tradingbot-backend\.venv\Lib\site-packages\pbr\tests\functional\test_changelog_author.py:111:    def test_changelog(self):
tradingbot-backend\.venv\Lib\site-packages\pbr\tests\functional\test_changelog_author.py:155:    def test_install_writes_changelog(self):
tradingbot-backend\.venv\Lib\site-packages\pbr\_compat\commands.py:303:        changelog = git._iter_changelog(changelog)
tradingbot-backend\.venv\Lib\site-packages\pbr\_compat\commands.py:304:    git.write_git_changelog(option_dict=option_dict, changelog=changelog)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\build_env.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\build_env.py:28:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\build_env.py:244:        if logger.getEffectiveLevel() <= logging.DEBUG:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cache.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cache.py:21:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cache.py:146:                logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cache.py:200:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cache.py:272:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cache.py:282:                    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\configuration.py:26:from pip._internal.utils.logging import getLogger
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\configuration.py:208:            logger.info("Writing to %s", fname)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\configuration.py:230:        logger.debug("Will be working with %s variant only", self.load_only)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\configuration.py:248:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\configuration.py:259:                    logger.debug("Skipping file '%s' (variant: %s)", fname, variant)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\configuration.py:268:        logger.verbose("For variant '%s', will try loading '%s'", variant, fname)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\exceptions.py:11:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\exceptions.py:30:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\exceptions.py:726:            exc_info = logger.isEnabledFor(VERBOSE)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\exceptions.py:727:            logger.warning("Failed to read %s", config, exc_info=exc_info)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:33:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:201:            logger.debug("No remote pip version found")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:206:    logger.debug("Remote version of pip: %s", remote_version)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:207:    logger.debug("Local version of pip:  %s", local_version)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:210:    logger.debug("Was pip installed by pip? %s", pip_installed_by_pip)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:245:            logger.warning("%s", upgrade_prompt, extra={"rich": True})
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:247:        logger.warning("There was an error checking the latest version of pip.")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py:248:        logger.debug("See below for error", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:22:from pip._internal.utils.logging import indent_log
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:30:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:55:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:183:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:200:            logger.warning("Built %s for %s is invalid: %s", artifact, req.name, e)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:218:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:222:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:255:                logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:262:                logger.info("Stored in directory: %s", output_dir)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:265:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:282:    logger.info("Running setup.py clean for %s", req.name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:289:        logger.error("Failed cleaning build dir for %s", req.name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:309:    logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:314:    with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:344:        logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\wheel_builder.py:349:        logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\__init__.py:5:# init_logging() must be called before any call to logging.getLogger()
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\__init__.py:7:_log.init_logging()
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:5:import logging.config
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:34:from pip._internal.utils.logging import BrokenStdoutLoggingError, setup_logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:42:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:103:            logging.shutdown()
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:119:        level_number = setup_logging(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:129:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:140:            logger.critical(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:158:                logger.critical("Could not find an activated virtualenv (required).")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:164:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:178:            def exc_logging_wrapper(*args: Any) -> int:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:184:                    logger.error("%s", exc, extra={"rich": True})
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:185:                    logger.debug("Exception information:", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:189:                    logger.critical(str(exc))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:190:                    logger.debug("Exception information:", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:199:                    logger.critical(str(exc))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:200:                    logger.debug("Exception information:", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:204:                    logger.critical("%s", exc)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:205:                    logger.debug("Exception information:", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:208:                except BrokenStdoutLoggingError:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:212:                    if level_number <= logging.DEBUG:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:217:                    logger.critical("Operation cancelled by user")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:218:                    logger.debug("Exception information:", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:222:                    logger.critical("Exception:", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\base_command.py:226:            return exc_logging_wrapper
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:14:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:33:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:138:        "instead of logging them to stderr."
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py:219:        " times (corresponding to WARNING, ERROR, and CRITICAL logging"
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\main.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\main.py:16:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\main.py:76:        logger.debug("Ignoring error %s when setting locale", e)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\parser.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\parser.py:15:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\parser.py:88:    def format_epilog(self, epilog: str) -> str:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\parser.py:191:                logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\progress_bars.py:17:from pip._internal.utils.logging import get_indentation
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:8:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:47:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:57:        logger.warning("Disabling truststore since ssl support is missing")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:220:    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:293:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:304:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\req_command.py:477:            logger.info(locations)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:9:from pip._internal.utils.logging import get_indentation
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:11:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:85:        logger.info("%s: %s", self._message, status)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:118:    # through the logging system, but it acts like it has level INFO,
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:120:    # Non-interactive spinner goes through the logging system, so it is always
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:121:    # in sync with logging configuration.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:122:    if sys.stdout.isatty() and logger.getEffectiveLevel() <= logging.INFO:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\cli\spinners.py:152:    elif not file.isatty() or logger.getEffectiveLevel() > logging.INFO:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:10:from pip._internal.utils.logging import getLogger
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:61:            logger.error("pip cache commands can not function since cache is disabled.")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:66:            logger.error(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:78:            logger.error(e.args[0])
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:87:        logger.info(options.cache_dir)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:129:        logger.info(message)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:148:            logger.info("No locally built wheels cached.")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:156:        logger.info("Cache contents:\n")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:157:        logger.info("\n".join(sorted(results)))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:161:            logger.info("\n".join(sorted(files)))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:181:            logger.warning(no_matching_msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:185:            logger.verbose("Removed %s", filename)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\cache.py:186:        logger.info("Files removed: %s", len(files))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\check.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\check.py:14:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:16:from pip._internal.utils.logging import indent_log
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:19:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:108:            logger.error(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:123:            logger.error(e.args[0])
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:136:            logger.error(e.args[0])
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:205:                with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:214:            with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:220:        with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\configuration.py:267:            logger.exception(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:20:from pip._internal.utils.logging import indent_log
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:23:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:27:    logger.info("%s: %s", name, value)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:31:    logger.info("sys.implementation:")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:33:    with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:100:        logger.info("%s==%s%s", module_name, actual_version, extra_message)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:104:    logger.info("vendored library versions:")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:107:    with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:124:    logger.info(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:132:    with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:134:            logger.info(str(tag))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:138:            logger.info(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\debug.py:173:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\download.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\download.py:15:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\hash.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\hash.py:12:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\index.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\index.py:19:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\index.py:53:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\index.py:61:            logger.error(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\index.py:73:            logger.error(e.args[0])
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\inspect.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\inspect.py:16:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:34:from pip._internal.utils.logging import getLogger
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:261:                "to avoid mixing pip logging output with JSON output."
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:293:        logger.verbose("Using %s", get_pip_version())
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:504:            logger.error(message, exc_info=show_traceback)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:549:                        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:556:                        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:577:            logger.exception(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:631:        logger.critical("\n".join(parts))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:677:        logger.debug("Non-user install by explicit request")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:691:        logger.debug("User install by explicit request")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:699:        logger.debug("Non-user install due to --prefix or --target option")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:704:        logger.debug("Non-user install because user site-packages disabled")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:710:        logger.debug("Non-user install because site-packages writeable")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\install.py:713:    logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\list.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\list.py:36:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\search.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\search.py:19:from pip._internal.utils.logging import indent_log
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\search.py:31:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\search.py:120:        with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\show.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\show.py:12:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\show.py:40:            logger.warning("ERROR: Please provide a package name or names.")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\show.py:87:        logger.warning("Package(s) not found: %s", ", ".join(missing))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:22:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\uninstall.py:76:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:21:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\commands\wheel.py:174:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:11:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:85:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py:89:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:10:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:50:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:133:    logger.debug("Getting page %s", redact_auth_from_url(url))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:171:    logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:319:        meth = logger.debug
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:342:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:361:        logger.debug(" file: URL is directory, getting %s", url)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:366:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:372:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:387:        _handle_get_simple_fail(link, reason, meth=logger.info)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:433:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:492:        if logger.isEnabledFor(logging.DEBUG):
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\collector.py:502:            logger.debug("\n".join(lines))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:34:from pip._internal.utils.logging import indent_log
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:71:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:80:                logger.verbose(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:88:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:247:        logger.debug("Found link %s, version: %s", link, version)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:273:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:283:    # Collect the non-matches for logging purposes.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:312:    logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:749:            logger.debug("Skipping link: %s: %s", detail, link)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:787:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:797:        with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:844:        if logger.isEnabledFor(logging.DEBUG) and file_candidates:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:853:            logger.debug("Local files found: %s", ", ".join(paths))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:935:            logger.critical(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:955:                logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:962:                logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:970:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\package_finder.py:978:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\sources.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\sources.py:21:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\sources.py:251:        logger.warning(msg, location)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\index\sources.py:281:    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:17:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:32:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\locations\_distutils.py:60:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\locations\_sysconfig.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\locations\_sysconfig.py:13:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:38:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:71:    _MISMATCH_LEVEL = logging.WARNING
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:73:    _MISMATCH_LEVEL = logging.DEBUG
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:201:    logger.log(_MISMATCH_LEVEL, message, key, issue_url, old, new)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\locations\__init__.py:227:    logger.log(_MISMATCH_LEVEL, "\n".join(parts), user, home, root, prefix)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\base.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\base.py:53:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\base.py:311:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\base.py:445:            logger.warning(message, self.raw_name, e)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\base.py:637:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:29:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py:211:            logger.warning("No metadata found in %s", displaying_path)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:21:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py:66:                logger.warning("Skipping %s due to %s", info_location, e.reason)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\models\link.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\models\link.py:36:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\models\link.py:351:                logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\models\link.py:559:        logger.debug("Ignoring egg= fragment in %s", link)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:14:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:54:                    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\models\search_scope.py:93:                    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:23:from pip._internal.utils.logging import getLogger
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:85:            logger.debug("Getting credentials from keyring for %s", url)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:92:            logger.debug("Getting password from keyring for %s", url)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:163:    logger.verbose("Keyring provider requested: %s", provider)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:171:            logger.verbose("Keyring provider set: import")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:181:            logger.warning(msg, exc, exc_info=logger.isEnabledFor(logging.DEBUG))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:216:            logger.verbose("Keyring provider set: subprocess with executable %s", cli)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:219:    logger.verbose("Keyring provider set: disabled")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:273:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:346:            logger.debug("Found credentials in url for %s", netloc)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:356:                logger.debug("Found index url %s", index_url)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:362:                logger.debug("Found credentials in index url for %s", netloc)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:369:                logger.debug("Found credentials in netrc for %s", netloc)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:382:                logger.debug("Found credentials in keyring for %s", netloc)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:541:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:556:                logger.info("Saving credentials to keyring")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\auth.py:561:                logger.exception("Failed to save credentials")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\download.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\download.py:20:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\download.py:48:        logger.info("Using cached %s", logged_url)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\download.py:50:        logger.info("Downloading %s", logged_url)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\download.py:52:    if logger.getEffectiveLevel() > logging.INFO:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\download.py:137:            logger.critical(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\download.py:171:                logger.critical(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\session.py:9:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\session.py:58:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\session.py:399:            self.add_trusted_host(host, suppress_logging=True)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\session.py:409:        self, host: str, source: Optional[str] = None, suppress_logging: bool = False
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\session.py:414:        :param source: An optional source string, for logging where the host
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\session.py:417:        if not suppress_logging:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\session.py:421:            logger.info(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\session.py:502:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:18:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py:57:            logger.critical(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\check.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\check.py:18:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\check.py:49:            logger.warning("Error parsing requirements for %s: %s", name, e)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:18:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:101:                        logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:107:                        logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:117:                                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:135:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:169:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:200:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:208:        logger.warning("Error when trying to get requirement for VCS system %s", exc)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\freeze.py:212:    logger.warning("Could not determine repository location of %s", location)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:45:from pip._internal.utils.logging import indent_log
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:198:    logger.info("File was already downloaded %s", download_path)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:204:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:295:            logger.info(message, information)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:298:            with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:299:                logger.info("Using cached %s", req.link.filename)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:361:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:366:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:385:        logger.verbose(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:425:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:433:        logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:442:            logger.debug("%s does not support range requests", url)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:468:            logger.debug("Downloading link %s to %s", link, filepath)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:495:        with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:582:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:659:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:673:            logger.info("Saved %s", download_path)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:682:        logger.info("Obtaining %s", req)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:684:        with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:719:        logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:722:        with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\prepare.py:724:                logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:12:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:48:            logger.debug("Initialized build tracking at %s", root)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:70:        logger.debug("Created build tracker: %s", self._root)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:73:        logger.debug("Entered build tracker: %s", self._root)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:113:        logger.debug("Added %s to build tracker %r", req, self._root)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:122:        logger.debug("Removed %s from build tracker %r", req, self._root)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py:128:        logger.debug("Removed build tracker: %r", self._root)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:18:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py:47:    logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:9:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:24:        logger.debug("Destination directory: %s", tempd)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py:35:        logger.error("Failed building wheel for %s", name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:9:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:24:        logger.debug("Destination directory: %s", tempd)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:36:                logger.error(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py:44:        logger.error("Failed building editable for %s", name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:9:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:16:    """Format command information for logging."""
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:22:    elif logger.getEffectiveLevel() > logging.DEBUG:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:45:        logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:54:        logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:80:        logger.debug("Destination directory: %s", tempd)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py:91:            logger.error("Failed building wheel for %s", name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:7:from pip._internal.utils.logging import indent_log
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:11:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:29:    logger.info("Running setup.py develop for %s", name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py:40:    with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:9:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:74:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:255:            logger.warning("RECORD line has more than three elements: %s", row)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:442:        logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:619:        logger.debug(stdout.getvalue())
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py:650:            logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\constructors.py:12:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\constructors.py:39:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\constructors.py:182:        logger.debug("Cannot parse '%s' as requirements file", req)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\constructors.py:305:    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\constructors.py:419:        for logging purposes in case of an error.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_file.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_file.py:89:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_file.py:219:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:62:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:187:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:378:            logger.debug("Creating directory %s", build_dir)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:421:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:626:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:632:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:686:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:722:            logger.warning("Skipping %s as it is not installed.", self.name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:724:        logger.info("Found existing installation: %s", dist)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:766:                logger.warning("Deleting %s", display_path(archive_path))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:770:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:809:        logger.info("Saved %s", display_path(archive_path))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:833:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_install.py:919:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_set.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_set.py:12:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:13:from pip._internal.utils.logging import getLogger, indent_log
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:284:            logger.info("Moving to %s\n from %s", *p)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:288:                logger.debug("Replacing %s from %s", new_path, path)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:295:                logger.error("Failed to restore %s", new_path)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:296:                logger.debug("Exception: %s", ex)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:364:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:371:        logger.info("Uninstalling %s:", dist_name_version)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:373:        with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:381:                    logger.verbose("Removing file or directory %s", path)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:386:                logger.info("Successfully uninstalled %s", dist_name_version)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:395:            logger.info(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:396:            with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:398:                    logger.info(path)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:419:            logger.error(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:424:        logger.info("Rolling back uninstall of %s", self._dist.raw_name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:438:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:446:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:459:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:557:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:616:        logger.verbose("Removing pth entries from %s:", self.file)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:620:            logger.warning("Cannot remove entries from nonexistent file %s", self.file)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:635:                logger.verbose("Removing entry: %s", entry)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:644:            logger.error("Cannot roll back changes to %s, none were made", self.file)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py:646:        logger.debug("Rolling %s back to previous state", self.file)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\__init__.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\__init__.py:5:from pip._internal.utils.logging import indent_log
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\__init__.py:18:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\__init__.py:55:        logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\__init__.py:62:    with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\__init__.py:65:                logger.info("Attempting uninstall: %s", req_name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\req\__init__.py:66:                with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:16:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:49:from pip._internal.utils.logging import indent_log
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:53:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:88:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:98:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:218:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:302:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:402:            logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:430:            logger.debug("Using cached wheel link: %s", cache_entry.link)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:483:                logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:534:        with indent_log():
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:548:                    logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py:556:                    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:29:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:261:            logger.debug("Using cached wheel link: %s", cache_entry.link)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:343:        # This is just logging some messages, so we can do it eagerly.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py:513:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:80:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:215:                    logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:236:                    logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:475:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:686:            logger.critical(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:691:            logger.critical(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:696:        logger.critical(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:703:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:780:        logger.critical(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py:806:        logger.info(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:2:from logging import getLogger
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:43:        logger.info("INFO: %s", message.format(package_name=candidate.name))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:55:        logger.debug(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:62:        logger.info("Reporter.starting()")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:65:        logger.info("Reporter.starting_round(%r)", index)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:68:        logger.info("Reporter.ending_round(%r, state)", index)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:71:        logger.info("Reporter.ending(%r)", state)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:74:        logger.info("Reporter.adding_requirement(%r, %r)", requirement, parent)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:77:        logger.info("Reporter.rejecting_candidate(%r, %r)", criterion, candidate)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py:80:        logger.info("Reporter.pinning(%r)", candidate)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:35:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:147:                    logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py:174:                logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\compat.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\compat.py:11:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:23:# Warnings <-> Logging Integration
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:38:        logger = logging.getLogger("pip._internal.deprecations")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py:39:        logger.warning(message)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:4:import logging.handlers
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:10:from logging import Filter
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:22:from pip._vendor.rich.logging import RichHandler
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:35:class BrokenStdoutLoggingError(Exception):
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:37:    Raised if BrokenPipeError occurs for the stdout stream while logging.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:55:def indent_log(num: int = 2) -> Generator[None, None, None]:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:73:class IndentingFormatter(logging.Formatter):
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:83:        A logging.Formatter that obeys the indent_log() context manager.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:96:        if levelno < logging.WARNING:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:102:        if levelno < logging.ERROR:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:107:    def format(self, record: logging.LogRecord) -> str:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:153:    def emit(self, record: logging.LogRecord) -> None:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:171:                if record.levelno >= logging.ERROR:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:173:                elif record.levelno >= logging.WARNING:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:181:    def handleError(self, record: logging.LogRecord) -> None:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:182:        """Called when logging is unable to log some output."""
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:186:        # stdout stream in logging's Handler.emit(), then raise our special
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:187:        # exception so we can handle it in main() instead of logging the
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:195:            raise BrokenStdoutLoggingError()
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:200:class BetterRotatingFileHandler(logging.handlers.RotatingFileHandler):
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:210:    def filter(self, record: logging.LogRecord) -> bool:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:217:    A logging Filter that excludes records from a logger (or its children).
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:220:    def filter(self, record: logging.LogRecord) -> bool:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:226:def setup_logging(verbosity: int, no_color: bool, user_log_file: Optional[str]) -> int:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:227:    """Configures and sets up all of the logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:229:    Returns the requested logging level, as its integer value.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:232:    # Determine the level to be logging at.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:234:        level_number = logging.DEBUG
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:238:        level_number = logging.WARNING
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:240:        level_number = logging.ERROR
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:242:        level_number = logging.CRITICAL
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:244:        level_number = logging.INFO
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:246:    level = logging.getLevelName(level_number)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:258:    # Disable any logging besides WARNING unless we have DEBUG level logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:268:        "stream": "pip._internal.utils.logging.RichPipStreamHandler",
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:269:        "file": "pip._internal.utils.logging.BetterRotatingFileHandler",
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:275:    logging.config.dictConfig(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:281:                    "()": "pip._internal.utils.logging.MaxLevelFilter",
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:282:                    "level": logging.WARNING,
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:285:                    "()": "logging.Filter",
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:286:                    "name": subprocess_logger.name,
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:289:                    "()": "pip._internal.utils.logging.ExcludeLoggerFilter",
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:290:                    "name": subprocess_logger.name,
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:321:                # A handler responsible for logging to the console messages
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\logging.py:322:                # from the "subprocessor" logger.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\misc.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\misc.py:66:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\misc.py:383:    logger.info(msg, *args)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\packaging.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\packaging.py:11:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:20:from pip._internal.utils.logging import VERBOSE, subprocess_logger
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:95:        logging of both stdout and stderr occurs when the subprocess has
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:96:        terminated, else logging occurs as subprocess output is produced.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:107:    # - If DEBUG logging isn't enabled (e.g. if --verbose logging wasn't
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:112:    #   (e.g. if --verbose logging wasn't enabled).  This way we don't log
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:119:        log_subprocess: Callable[..., None] = subprocess_logger.info
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:120:        used_level = logging.INFO
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:124:        log_subprocess = subprocess_logger.verbose
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:128:    showing_subprocess = subprocess_logger.getEffectiveLevel() <= used_level
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:153:            subprocess_logger.critical(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:212:                subprocess_logger.error("%s", error, extra={"rich": True})
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:213:                subprocess_logger.verbose(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:218:                subprocess_logger.verbose(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py:226:            subprocess_logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:22:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:178:        logger.debug("Created temporary directory: %s", path)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:200:                logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:206:                logger.debug("%s failed with %s.", func.__qualname__, formatted_exc)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:217:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py:295:        logger.debug("Created temporary directory: %s", path)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:22:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:32:    logger.debug("bz2 module is not available")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:40:    logger.debug("lzma module is not available")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:168:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:195:                    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:208:                    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py:250:        logger.critical(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:8:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py:66:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\wheel.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\wheel.py:17:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\wheel.py:131:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\_log.py:1:"""Customize logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\_log.py:3:Defines custom logger class for the `logger.verbose(...)` method.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\_log.py:5:init_logging() must be called before any other modules that call logging.getLogger.
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\_log.py:8:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\_log.py:16:class VerboseLogger(logging.Logger):
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\_log.py:23:        return self.log(VERBOSE, msg, *args, **kwargs)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\_log.py:27:    """logging.getLogger, but ensures our VerboseLogger class is returned"""
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\_log.py:28:    return cast(VerboseLogger, logging.getLogger(name))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\_log.py:31:def init_logging() -> None:
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\_log.py:37:    logging.setLoggerClass(VerboseLogger)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\utils\_log.py:38:    logging.addLevelName(VERBOSE, "VERBOSE")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:15:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py:40:        logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\git.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\git.py:26:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\git.py:102:            logger.warning("Can't parse git version: %s", version)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\git.py:227:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\git.py:265:        logger.info("Cloning %s%s to %s", url, rev_display, display_path(dest))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\git.py:292:            logger.debug("Rev options %s, branch_name %s", rev_options, branch_name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\git.py:319:        logger.info("Resolved %s to commit %s", url, rev_options.rev)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\git.py:510:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:17:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:40:        logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:69:            logger.warning("Could not switch Mercurial repository to %s: %s", url, exc)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py:152:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:22:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:119:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py:284:        logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:52:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:101:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:221:            logger.warning("Cannot register VCS %s", cls.__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:225:            logger.debug("Registered VCS backend: %s", cls.name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:241:            logger.debug("Determine that %s uses VCS: %s", location, vcs_backend.name)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:528:                logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:535:                    logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:543:                    logger.info("Skipping because already up-to-date.")
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:546:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:555:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:564:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:575:            logger.warning("Deleting %s", display_path(dest))
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:582:            logger.warning("Backing up %s to %s", display_path(dest), dest_dir)
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:589:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py:688:        logger.debug("Checking in %s for %s (%s)...", path, cls.dirname, cls.name)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\typing_extensions.py:1656:           def add_logging(f: Callable[P, T]) -> Callable[P, T]:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\typing_extensions.py:1657:               '''A type-safe decorator to add logging to a function.'''
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\typing_extensions.py:1659:                   logging.info(f'{f.__name__} was called')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\typing_extensions.py:1663:           @add_logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\__init__.py:111:    vendored("rich.logging")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:11:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:30:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:118:                logger.debug("Ignoring unknown cache-control directive: %s", directive)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:128:                        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:133:                    logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:149:            logger.debug("No cache entry available")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:159:            logger.warning("Cache entry deserialization failed, entry ignored")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:169:        logger.debug('Looking up "%s" in the cache', cache_url)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:174:            logger.debug('Request header has "no-cache", cache bypassed')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:178:            logger.debug('Request header has "max_age" as 0, cache bypassed')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:200:            logger.debug(msg)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:208:                logger.debug("Purging cached response: no date or etag")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:210:            logger.debug("Ignoring cached response: no date")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:218:        logger.debug("Current age based on date: %i", current_age)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:233:            logger.debug("Freshness lifetime from max-age: %i", freshness_lifetime)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:241:                logger.debug("Freshness lifetime from expires: %i", freshness_lifetime)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:248:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:256:            logger.debug("Adjusted current age from min-fresh: %i", current_age)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:260:            logger.debug('The response is "fresh", returning cached response')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:261:            logger.debug("%i > %i", freshness_lifetime, current_age)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:266:            logger.debug('The cached response is "stale" with no etag, purging')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:333:            logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:366:        logger.debug('Updating cache with response from "%s"', cache_url)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:372:            logger.debug('Response header has "no-store"')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:375:            logger.debug('Request header has "no-store"')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:377:            logger.debug('Purging existing cache entry to honor "no-store"')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:388:            logger.debug('Response header has "Vary: *"')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:401:            logger.debug(f"etag object cached for {expires_time} seconds")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:402:            logger.debug("Caching due to etag")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:408:            logger.debug("Caching permanent redirect")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:421:                logger.debug("Caching b/c date exists and max-age > 0")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py:441:                    logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\filewrapper.py:67:        # TODO: Add some logging here...
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:22:def setup_logging() -> None:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:23:    logger.setLevel(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:24:    handler = logging.StreamHandler()
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:25:    logger.addHandler(handler)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:53:    # Turn on logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:54:    setup_logging()
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\__init__.py:26:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\cachecontrol\__init__.py:28:logging.getLogger(__name__).addHandler(logging.NullHandler())
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\charsetgroupprober.py:95:                self.logger.debug("%s not active", prober.charset_name)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\charsetgroupprober.py:98:            self.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\charsetprober.py:29:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\charsetprober.py:48:        self.logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\codingstatemachine.py:28:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\codingstatemachine.py:63:        self.logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\eucjpprober.py:66:                self.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\mbcharsetprober.py:64:                self.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\sbcharsetprober.py:129:                    self.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\sbcharsetprober.py:134:                    self.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\sjisprober.py:65:                self.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:40:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:118:        self.logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:299:            self.logger.debug("no data received!")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:341:        if self.logger.getEffectiveLevel() <= logging.DEBUG:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:343:                self.logger.debug("no probers hit minimum threshold")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:349:                            self.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py:356:                        self.logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\compat.py:912:    from logging.config import BaseConfigurator, valid_ident
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:14:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:33:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:153:                        logger.debug('Found %s', r.path)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:160:                        logger.debug('Found %s', r.path)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:165:                    logger.warning(msg, r.path, e)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:284:                logger.debug('No "provides": %s', dist)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:393:        logger.debug('%s: got requirements %r from metadata: %r', self.name,
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:433:            logger.warning('could not read version %r - using name only', req)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:694:        logger.info('creating %s', record_path)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:790:        logger.info('creating %s', shared_path)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:914:                    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:919:                    logger.warning('Not recognised as a requirement: %r', line)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:922:                    logger.warning('extra requirements in requires.txt are '
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:1047:                        logger.warning('Non-existent file: %s', p)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:1151:        logger.debug('%s missing %r', distribution, requirement)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:1228:            logger.debug('Moving to result: %s',
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:1259:            logger.debug('Add to provided: %s, %s, %s', name, version, dist)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\database.py:1271:                logger.warning('could not read version %r - using name only',
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:8:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:23:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:132:        :param name: The logical name of the stream (used for logging only).
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:143:            logger.debug('%s: %s' % (name, s))
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:171:        logger.debug('invoking: %s', ' '.join(cmd))
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:263:                logger.warning('no signing program available - not signed')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:338:        logger.debug('invoking: %s', ' '.join(cmd))
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:389:            logger.debug('No digest specified')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:396:            logger.debug('Digest specified: %s' % digest)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\index.py:440:            logger.debug('Digest verified: %s', digest)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:11:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:34:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:223:                logger.debug('Not replacing %r with %r', url1, url2)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:225:                logger.debug('Replacing %r with %r', url1, url2)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:248:            logger.debug('%s: version hint in fragment: %r',
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:262:                    logger.debug('Wheel not compatible: %s', path)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:279:                logger.warning('invalid path for wheel: %s', path)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:281:            logger.debug('Not downloadable: %s', path)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:289:                        logger.debug('No match for project/version: %s', path)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:372:        logger.debug('matcher: %s (%s)', matcher, type(matcher).__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:383:                        pass  # logger.debug('%s did not match %r', matcher, k)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:388:                    logger.warning('error matching %s with %r', matcher, k)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:393:                logger.debug('sorted list: %s', slist)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:524:            logger.exception('JSON fetch failed: %s', e)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:663:                logger.debug('Queueing %s', url)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:694:        logger.debug('process_download: %s -> %s', url, info)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:725:        logger.debug('should_queue: %s (%s) from %s -> %s', link, rel,
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:749:                                    logger.debug('Queueing %s from %s', link, url)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:759:                # logger.debug('Sentinel seen, quitting.')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:777:            logger.debug('Returning %s from cache: %s', url, result)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:782:                logger.debug('Skipping %s due to bad host %s', url, host)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:786:                    logger.debug('Fetching %s', url)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:788:                    logger.debug('Fetched %s', url)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:810:                        logger.exception('Fetch failed: %s: %s', url, e)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:812:                    logger.exception('Fetch failed: %s: %s', url, e)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:816:                    logger.exception('Fetch failed: %s: %s', url, e)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1088:        logger.debug('adding distribution %s', dist)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1094:            logger.debug('Add to provided: %s, %s, %s', name, version, dist)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1103:        logger.debug('removing distribution %s', dist)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1109:            logger.debug('Remove from provided: %s, %s, %s', name, version, dist)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1234:            logger.debug('passed %s as requirement', odist)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1240:            logger.debug('located %s', odist)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1268:                    logger.debug('No providers found for %r', r)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1275:                        logger.debug('Cannot satisfy %r', r)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1284:                            logger.debug('Adding %s to install_dists',
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1300:                logger.debug('%s is a build-time dependency only.',
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\locators.py:1302:        logger.debug('find done for %s', odist)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:12:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:24:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:112:            logger.debug('add_dir added %s', d)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:155:                    logger.warning('no files found matching %r', pattern)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:164:                    logger.warning('no files found matching %r '
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:174:                    logger.warning('no files found matching %r '
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:183:                logger.warning('no directories found matching %r',
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\manifest.py:188:                logger.warning('no previously-included directories found '
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:15:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:25:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:148:            logger.debug('Removed 1.0 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:151:            logger.debug('Removed 1.1 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:154:            logger.debug('Removed 1.2 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:157:            logger.debug('Removed 1.3 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:161:                logger.debug('Removed 2.1 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:164:            logger.debug('Removed 2.2 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:167:            # logger.debug('Removed 2.0 due to %s', key)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:173:        logger.debug('Out of options - unknown metadata set: %s', fields)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:372:        # logger.debug('Attempting to set metadata for %s', self)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:453:        if logger.isEnabledFor(logging.WARNING):
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:461:                        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:467:                    logger.warning("'%s': '%s' is not a valid version (field '%s')",
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:471:                    logger.warning("'%s': '%s' is not a valid version (field '%s')",
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\metadata.py:917:                logger.warning('Metadata: missing: %s, warnings: %s',
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:11:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:21:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:239:            logger.debug('_find failed: %r %r', path, self.loader.prefix)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py:241:            logger.debug('_find worked: %r %r', path, self.loader.prefix)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:8:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:21:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:121:                logger.warning('Failed to open %s', executable)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:286:                    logger.warning('Failed to write executable - trying to '
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:293:                    logger.debug('Able to replace executable using '
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:304:                    logger.warning('Skipping existing file %s', outname)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:346:            logger.debug('not copying %s (up-to-date)', script)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:361:                logger.warning('%s is an empty file (skipping)', script)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py:377:            logger.info('copying and adjusting %s -> %s', script,
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:12:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:40:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:538:        logger.info('Copying %s to %s', infile, outfile)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:554:        logger.info('Copying stream %s to %s', instream, outfile)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:584:                    logger.info("changing mode of %s", f)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:587:                    logger.info("changing mode of %s to %o", f, mode)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:598:            logger.info('Creating %s' % path)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:611:        logger.info('Byte-compiling %s to %s', path, dpath)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:632:                logger.debug('Removing directory tree at %s', path)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:643:                logger.debug('Removing %s %s', s, path)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:799:            logger.warning('Directory exists but is not writable: %s', result)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:805:            logger.warning('Unable to create %s', result, exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:809:        logger.warning('Default location unusable, using %s', result)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:933:                logger.warning('undeclared extra: %s' % unwanted)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:938:                logger.warning('undeclared extra: %s' % r)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:958:            logger.debug('Unexpected response for JSON request: %s', ct)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:965:        logger.exception('Failed to get external data for %s: %s', url, e)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1003:            logger.warning('Directory \'%s\' is not private', base)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1092:                logger.exception('Exception during event publication')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1095:        logger.debug('publish %s: args = %s, kwargs = %s, result = %s', event,
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\util.py:1512:                    logger.debug('Host verified: %s', self.host)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\version.py:11:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\version.py:22:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\version.py:642:            logger.warning('Cannot compute compatible match for version %s '
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:15:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:33:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:369:                logger.debug('Wrote %s to %s in wheel', p, ap)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:603:                        logger.debug('lib_only: skipping %s', u_arcname)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:646:                                logger.warning('Byte-compilation failed',
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:661:                    logger.debug('lib_only: returning None')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:688:                            logger.warning('Unable to read legacy script '
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:699:                            logger.warning('Unable to read JSON metadata, so '
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:739:                logger.exception('installation failed.')
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:810:            logger.debug('%s already in path', pathname)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:825:            logger.debug('%s not in path', pathname)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:930:                logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\wheel.py:938:                logger.debug('Version updated from %r to %r', version, updated)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:7:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:17:    from logging import NullHandler
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:20:    class NullHandler(logging.Handler):
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:32:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py:33:logger.addHandler(NullHandler())
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:33:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1359:    logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1360:    logger.setLevel(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1361:    logger.addHandler(logging.StreamHandler(sys.stdout))
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1389:        logger.info(json.dumps(dist.info(), indent=4, sort_keys=True))
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1391:        logger.info("Name: %s", dist.name(pretty=True))
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1393:        logger.info("Version: %s", distribution_version)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\distro\distro.py:1395:        logger.info("Codename: %s", distribution_codename)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\idna\intranges.py:5:in the original list?" in time O(log(# runs)).
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\packaging\tags.py:115:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:145:# Set default logging handler to avoid "No handler found" warnings.
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:146:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:147:from logging import NullHandler
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py:179:logging.getLogger(__name__).addHandler(NullHandler())
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\console.py:618:        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\console.py:619:        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\console.py:1089:        """A context manager to *capture* the result of print() or log() in a string,
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\console.py:1907:    def log(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\console.py:1932:            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\console.py:2583:    console.log(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\console.py:2598:    console.log("Hello, World!", "{'a': 1}", repr(console))
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:53:    "logging.keyword": Style(bold=True, color="yellow"),
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:54:    "logging.level.notset": Style(dim=True),
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:55:    "logging.level.debug": Style(color="green"),
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:56:    "logging.level.info": Style(color="blue"),
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:57:    "logging.level.warning": Style(color="red"),
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:58:    "logging.level.error": Style(color="red", bold=True),
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py:59:    "logging.level.critical": Style(color="red", bold=True, reverse=True),
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\diagnose.py:28:        "VSCODE_VERBOSE_LOGGING",
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\live.py:353:                    console.log(next(examples))
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:3:from logging import Handler, LogRecord
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:19:    """A logging handler that renders output with Rich. The time / level / message and file are displayed in columns.
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:23:        Be careful when enabling console markup in log messages if you have configured logging for libraries not
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:27:        level (Union[int, str], optional): Log level. Defaults to logging.NOTSET.
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:65:        level: Union[int, str] = logging.NOTSET,
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:122:            level_name.ljust(8), f"logging.level.{level_name.lower()}"
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:127:        """Invoked by logging."""
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:178:            record (LogRecord): logging Record.
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:195:            message_text.highlight_words(self.keywords, "logging.keyword")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:209:            record (LogRecord): logging Record.
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:239:    logging.basicConfig(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\logging.py:245:    log = logging.getLogger("rich")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\progress.py:1702:                progress.log(next(examples))
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\segment.py:4:from logging import getLogger
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\status.py:118:        console.log("Importing advanced AI")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\status.py:120:        console.log("Advanced Covid AI Ready")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\status.py:124:        console.log("Found 10,000,000,000 copies of Covid32.exe")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\_log_render.py:94:    c.log("[on blue]hello", justify="right")
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\rich\__main__.py:204:        """Progress bars, columns, styled logging handler, tracebacks, etc...""",
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\tenacity\after.py:22:    import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\tenacity\after.py:31:def after_log(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\tenacity\after.py:32:    logger: "logging.Logger",
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\tenacity\after.py:44:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\tenacity\before.py:22:    import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\tenacity\before.py:31:def before_log(logger: "logging.Logger", log_level: int) -> typing.Callable[["RetryCallState"], None]:
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\tenacity\before.py:40:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\tenacity\before_sleep.py:22:    import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\tenacity\before_sleep.py:31:def before_sleep_log(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\tenacity\before_sleep.py:32:    logger: "logging.Logger",
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\tenacity\before_sleep.py:65:        logger.log(
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\connection.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\connection.py:65:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\connectionpool.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\connectionpool.py:62:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\poolmanager.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\poolmanager.py:26:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\response.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\response.py:32:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:6:# Set default logging handler to avoid "No handler found" warnings.
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:7:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:9:from logging import NullHandler
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:60:logging.getLogger(__name__).addHandler(NullHandler())
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:63:def add_stderr_logger(level=logging.DEBUG):
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:65:    Helper for quickly adding a StreamHandler to the logger. Useful for
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:72:    logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:73:    handler = logging.StreamHandler()
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:74:    handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(message)s"))
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:75:    logger.addHandler(handler)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:76:    logger.setLevel(level)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py:77:    logger.debug("Added a stderr logging handler to logger: %s", __name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\appengine.py:44:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\appengine.py:68:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\ntlmpool.py:9:from logging import getLogger
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\pyopenssl.py:73:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\pyopenssl.py:127:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\util\retry.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\util\retry.py:22:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pip\_vendor\urllib3\util\ssl_.py:345:    # Enable logging of TLS session keys via defacto standard environment variable
tradingbot-backend\.venv\Lib\site-packages\pre_commit\clientlib.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\clientlib.py:20:logger = logging.getLogger('pre_commit')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\clientlib.py:165:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\clientlib.py:181:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\clientlib.py:188:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\clientlib.py:200:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\clientlib.py:206:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\clientlib.py:226:    logger.warning(f'Unexpected key(s) present at root: {", ".join(extra)}')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\clientlib.py:234:    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\git.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\git.py:13:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pre_commit\git.py:115:    logger.info('Checking merge-conflict files only.')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\git.py:222:            logger.warn(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\hook.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\hook.py:10:logger = logging.getLogger('pre_commit')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\hook.py:53:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\logging_handler.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\logging_handler.py:10:logger = logging.getLogger('pre_commit')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\logging_handler.py:20:class LoggingHandler(logging.Handler):
tradingbot-backend\.venv\Lib\site-packages\pre_commit\logging_handler.py:25:    def emit(self, record: logging.LogRecord) -> None:
tradingbot-backend\.venv\Lib\site-packages\pre_commit\logging_handler.py:35:def logging_handler(use_color: bool) -> Generator[None, None, None]:
tradingbot-backend\.venv\Lib\site-packages\pre_commit\logging_handler.py:36:    handler = LoggingHandler(use_color)
tradingbot-backend\.venv\Lib\site-packages\pre_commit\logging_handler.py:37:    logger.addHandler(handler)
tradingbot-backend\.venv\Lib\site-packages\pre_commit\logging_handler.py:38:    logger.setLevel(logging.INFO)
tradingbot-backend\.venv\Lib\site-packages\pre_commit\logging_handler.py:42:        logger.removeHandler(handler)
tradingbot-backend\.venv\Lib\site-packages\pre_commit\main.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\main.py:28:from pre_commit.logging_handler import logging_handler
tradingbot-backend\.venv\Lib\site-packages\pre_commit\main.py:32:logger = logging.getLogger('pre_commit')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\main.py:367:    with error_handler(), logging_handler(args.color):
tradingbot-backend\.venv\Lib\site-packages\pre_commit\repository.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\repository.py:23:logger = logging.getLogger('pre_commit')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\repository.py:67:    logger.info(f'Installing environment for {hook.src}.')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\repository.py:68:    logger.info('Once installed this environment will be reused.')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\repository.py:69:    logger.info('This may take a few minutes...')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\repository.py:72:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\repository.py:137:            logger.error(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\repository.py:145:            logger.error(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\repository.py:191:            logger.error(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\staged_files_only.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\staged_files_only.py:17:logger = logging.getLogger('pre_commit')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\staged_files_only.py:39:        logger.warning('Unstaged intent-to-add files detected.')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\staged_files_only.py:70:        logger.warning('Unstaged files detected.')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\staged_files_only.py:71:        logger.info(f'Stashing unstaged files to {patch_filename}.')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\staged_files_only.py:88:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\staged_files_only.py:98:            logger.info(f'Restored changes from {patch_filename}.')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\store.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\store.py:22:logger = logging.getLogger('pre_commit')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\store.py:106:            logger.info('Locking pre-commit directory')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\store.py:159:            logger.info(f'Initializing environment for {repo}.')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\init_templatedir.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\init_templatedir.py:11:logger = logging.getLogger('pre_commit')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\init_templatedir.py:37:        logger.warning('`init.templateDir` not set to the target directory')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\init_templatedir.py:38:        logger.warning(f'maybe `git config --global init.templateDir {dest}`?')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\install_uninstall.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\install_uninstall.py:20:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\install_uninstall.py:124:        logger.error(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\run.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\run.py:33:logger = logging.getLogger('pre_commit')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\run.py:347:        logger.error('Unmerged files.  Resolve before committing.')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\run.py:350:        logger.error('Specify both --from-ref and --to-ref.')
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\run.py:353:        logger.error(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\run.py:362:        logger.error(
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\try_repo.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\try_repo.py:18:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\pre_commit\commands\try_repo.py:29:        logger.warning('Creating temporary repo with uncommitted changes...')
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\apdlexer.py:397:               "LOG()", "LOG10()", "SQRT()", "NINT()", "MOD()",
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\business.py:190:             r'LENGTH|LOCALE-(?:DATE|TIME(?:-FROM-SECONDS)?)|LOG(?:10)?|'
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\haskell.py:206:                  'default', 'logging', 'dynamic', 'name', 'error_handlers', 'language')
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\igor.py:408:        'zeromq_server_send', 'zeromq_set', 'zeromq_set_logging_template', 'zeromq_stop',
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\installers.py:79:             r'LoadLanguageFile|LockWindow|Log(?:Set|Text)|MessageBox|'
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\scripting.py:651:    lsl_functions_builtin = r'\b(?:ll(?:ReturnObjectsBy(?:ID|Owner)|Json(?:2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(?:Mag|Norm|Dist)|Rot(?:Between|2(?:Euler|Fwd|Left|Up))|(?:Euler|Axes)2Rot|Whisper|(?:Region|Owner)?Say|Shout|Listen(?:Control|Remove)?|Sensor(?:Repeat|Remove)?|Detected(?:Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|(?:[GS]et)(?:An
imationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(?:Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(?:Scale|Offset|Rotate)Texture|(?:Rot)?Target(?:Remove)?|(?:Stop)?MoveToTarget|Apply(?:Rotational)?Impulse|Set(?:KeyframedMotion|ContentType|RegionPos|(?:Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(?:Queueing|Radius)|Vehicle(?:Type|(?:Float|Vector|Rotation)Param)|(?:To
uch|Sit)?Text|Camera(?:Eye|At)Offset|PrimitiveParams|ClickAction|Link(?:Alpha|Color|PrimitiveParams(?:Fast)?|Texture(?:Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get(?:(?:Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(?:PrimitiveParams|Number(?:OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(?:Details|PermMask|PrimCount)|Parcel(?:MaxPrims|Details|Prim(?:Count|Owners))|Attached|(?:SPMax|Free|Used)Memory|Region(?:Name|TimeDila
tion|FPS|Corner|AgentCount)|Root(?:Position|Rotation)|UnixTime|(?:Parcel|Region)Flags|(?:Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(?:Prims|NotecardLines|Sides)|Animation(?:List)?|(?:Camera|Local)(?:Pos|Rot)|Vel|Accel|Omega|Time(?:stamp|OfDay)|(?:Object|CenterOf)?Mass|MassMKS|Energy|Owner|(?:Owner)?Key|SunDirection|Texture(?:Offset|Scale|Rot)|Inventory(?:Number|Name|Key|Type|Creator|PermMask)|Permissions(?:Key)?|StartParameter|List(?:Length|EntryType)|Date|Agen
t(?:Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(?:Name|State))|(?:Get|Reset|GetAndReset)Time|PlaySound(?:Slave)?|LoopSound(?:Master|Slave)?|(?:Trigger|Stop|Preload)Sound|(?:(?:Get|Delete)Sub|Insert)String|To(?:Upper|Lower)|Give(?:InventoryList|Money)|RezObject|(?:Stop)?LookAt|Sleep|CollisionFilter|(?:Take|Release)Controls|DetachFromAvatar|AttachToAvatar(?:Temp)?|InstantMessage|(?:GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(?:Length|Trim)|(?:Start|Stop)Animation|TargetOme
ga|RequestPermissions|(?:Create|Break)Link|BreakAllLinks|(?:Give|Remove)Inventory|Water|PassTouches|Request(?:Agent|Inventory)Data|TeleportAgent(?:Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(?:Axis|Angle)|A(?:cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(?:CSV|Integer|Json|Float|String|Key|Vector|Rot|List(?:Strided)?)|DeleteSubList|List(?:Statistics|Sort|Randomize|(?:Insert|Find|Replace)List)|EdgeOfWorld|Adj
ustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(?:CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(?:Slope|Normal|Contour)|GroundRepel|(?:Set|Remove)VehicleFlags|(?:AvatarOn)?(?:Link)?SitTarget|Script(?:Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(?:Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(?:Integer|String)ToBase64|XorBase64|Log(?:10)?|Base64To(?:String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|
(?:Load|Release|(?:E|Une)scape)URL|ParcelMedia(?:CommandList|Query)|ModPow|MapDestination|(?:RemoveFrom|AddTo|Reset)Land(?:Pass|Ban)List|(?:Set|Clear)CameraParams|HTTP(?:Request|Response)|TextBox|DetectedTouch(?:UV|Face|Pos|(?:N|Bin)ormal|ST)|(?:MD5|SHA1|DumpList2)String|Request(?:Secure)?URL|Clear(?:Prim|Link)Media|(?:Link)?ParticleSystem|(?:Get|Request)(?:Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(?:Create|Delete)Character|ExecCharacterCmd|E
vade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\b'
tradingbot-backend\.venv\Lib\site-packages\pygments\lexers\sql.py:150:            # TODO: better logging
tradingbot-backend\.venv\Lib\site-packages\pytest\__init__.py:29:from _pytest.logging import LogCaptureFixture
tradingbot-backend\.venv\Lib\site-packages\pytest_asyncio\plugin.py:529:            # exceptions to prevent asyncio's warning from logging.
tradingbot-backend\.venv\Lib\site-packages\realtime\connection.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\realtime\connection.py:15:# logging.basicConfig(
tradingbot-backend\.venv\Lib\site-packages\realtime\connection.py:16:#     format="%(asctime)s:%(levelname)s - %(message)s", level=logging.INFO
tradingbot-backend\.venv\Lib\site-packages\realtime\connection.py:87:                    logging.info(
tradingbot-backend\.venv\Lib\site-packages\realtime\connection.py:95:                    logging.exception("Connection with the server closed.")
tradingbot-backend\.venv\Lib\site-packages\realtime\connection.py:110:            logging.info("Connection was successful")
tradingbot-backend\.venv\Lib\site-packages\realtime\connection.py:145:                    logging.info(
tradingbot-backend\.venv\Lib\site-packages\realtime\connection.py:150:                    logging.exception("Connection with the server closed.")
tradingbot-backend\.venv\Lib\site-packages\requests\__init__.py:147:# Set default logging handler to avoid "No handler found" warnings.
tradingbot-backend\.venv\Lib\site-packages\requests\__init__.py:148:import logging
tradingbot-backend\.venv\Lib\site-packages\requests\__init__.py:149:from logging import NullHandler
tradingbot-backend\.venv\Lib\site-packages\requests\__init__.py:181:logging.getLogger(__name__).addHandler(NullHandler())
tradingbot-backend\.venv\Lib\site-packages\rich\console.py:612:        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.
tradingbot-backend\.venv\Lib\site-packages\rich\console.py:613:        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.
tradingbot-backend\.venv\Lib\site-packages\rich\console.py:1103:        """A context manager to *capture* the result of print() or log() in a string,
tradingbot-backend\.venv\Lib\site-packages\rich\console.py:1932:    def log(
tradingbot-backend\.venv\Lib\site-packages\rich\console.py:1956:            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``
tradingbot-backend\.venv\Lib\site-packages\rich\console.py:2630:    console.log(
tradingbot-backend\.venv\Lib\site-packages\rich\console.py:2645:    console.log("Hello, World!", "{'a': 1}", repr(console))
tradingbot-backend\.venv\Lib\site-packages\rich\default_styles.py:53:    "logging.keyword": Style(bold=True, color="yellow"),
tradingbot-backend\.venv\Lib\site-packages\rich\default_styles.py:54:    "logging.level.notset": Style(dim=True),
tradingbot-backend\.venv\Lib\site-packages\rich\default_styles.py:55:    "logging.level.debug": Style(color="green"),
tradingbot-backend\.venv\Lib\site-packages\rich\default_styles.py:56:    "logging.level.info": Style(color="blue"),
tradingbot-backend\.venv\Lib\site-packages\rich\default_styles.py:57:    "logging.level.warning": Style(color="yellow"),
tradingbot-backend\.venv\Lib\site-packages\rich\default_styles.py:58:    "logging.level.error": Style(color="red", bold=True),
tradingbot-backend\.venv\Lib\site-packages\rich\default_styles.py:59:    "logging.level.critical": Style(color="red", bold=True, reverse=True),
tradingbot-backend\.venv\Lib\site-packages\rich\diagnose.py:30:        "VSCODE_VERBOSE_LOGGING",
tradingbot-backend\.venv\Lib\site-packages\rich\live.py:378:                    console.log(next(examples))
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:3:from logging import Handler, LogRecord
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:19:    """A logging handler that renders output with Rich. The time / level / message and file are displayed in columns.
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:23:        Be careful when enabling console markup in log messages if you have configured logging for libraries not
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:27:        level (Union[int, str], optional): Log level. Defaults to logging.NOTSET.
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:67:        level: Union[int, str] = logging.NOTSET,
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:128:            level_name.ljust(8), f"logging.level.{level_name.lower()}"
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:133:        """Invoked by logging."""
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:186:            record (LogRecord): logging Record.
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:203:            message_text.highlight_words(self.keywords, "logging.keyword")
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:217:            record (LogRecord): logging Record.
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:247:    logging.basicConfig(
tradingbot-backend\.venv\Lib\site-packages\rich\logging.py:253:    log = logging.getLogger("rich")
tradingbot-backend\.venv\Lib\site-packages\rich\progress.py:1715:                progress.log(next(examples))
tradingbot-backend\.venv\Lib\site-packages\rich\segment.py:4:from logging import getLogger
tradingbot-backend\.venv\Lib\site-packages\rich\status.py:117:        console.log("Importing advanced AI")
tradingbot-backend\.venv\Lib\site-packages\rich\status.py:119:        console.log("Advanced Covid AI Ready")
tradingbot-backend\.venv\Lib\site-packages\rich\status.py:123:        console.log("Found 10,000,000,000 copies of Covid32.exe")
tradingbot-backend\.venv\Lib\site-packages\rich\_log_render.py:94:    c.log("[on blue]hello", justify="right")
tradingbot-backend\.venv\Lib\site-packages\rich\__main__.py:204:        """Progress bars, columns, styled logging handler, tracebacks, etc...""",
tradingbot-backend\.venv\Lib\site-packages\setuptools\logging.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\logging.py:11:    return record.levelno < logging.WARNING
tradingbot-backend\.venv\Lib\site-packages\setuptools\logging.py:16:    Configure logging to emit warning and above to stderr
tradingbot-backend\.venv\Lib\site-packages\setuptools\logging.py:21:    err_handler = logging.StreamHandler()
tradingbot-backend\.venv\Lib\site-packages\setuptools\logging.py:22:    err_handler.setLevel(logging.WARNING)
tradingbot-backend\.venv\Lib\site-packages\setuptools\logging.py:23:    out_handler = logging.StreamHandler(sys.stdout)
tradingbot-backend\.venv\Lib\site-packages\setuptools\logging.py:26:    logging.basicConfig(
tradingbot-backend\.venv\Lib\site-packages\setuptools\logging.py:27:        format="{message}", style='{', handlers=handlers, level=logging.DEBUG
tradingbot-backend\.venv\Lib\site-packages\setuptools\logging.py:39:    logging.root.setLevel(level * 10)
tradingbot-backend\.venv\Lib\site-packages\setuptools\__init__.py:23:from . import logging, monkey
tradingbot-backend\.venv\Lib\site-packages\setuptools\__init__.py:112:    logging.configure()
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:16:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:49:_logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:360:            _logger.info(f"Installing {category} as non editable")
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:419:        _logger.warning(msg + _LENIENT_WARNING)
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:488:        _logger.warning(msg + _STRICT_WARNING)
tradingbot-backend\.venv\Lib\site-packages\setuptools\command\editable_wheel.py:554:        _logger.warning(msg + _LENIENT_WARNING)
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:14:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:33:_logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:57:            _logger.debug(summary)
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:58:            _logger.debug(ex.details)
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py:410:        _logger.debug(f"ignored error: {ex.__class__.__name__} - {ex}")
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:13:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:43:_logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:320:                _logger.warning(f"Command option {cmd}.{key} is not defined")
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py:352:        _logger.warning(f"{msg}: {ex}")
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:21:_logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:66:    Depending on the level of the verbosity of the ``logging`` configuration
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:68:    ``summary`` and ``details`` (when the logging level is set to :obj:`logging.DEBUG`).
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py:105:        if _logger.getEffectiveLevel() <= logging.DEBUG and self.details:
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:11:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:21:_logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:101:    _logger.warning(
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:192:            _logger.debug(msg)
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:200:            _logger.debug(msg)
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:205:                _logger.debug("Problem with download, skipping validation")
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:251:            _logger.warning(
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:332:        _logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:352:        _logger.warning(f"`{value}` - using extras for entry points is not recommended")
tradingbot-backend\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py:395:    _logger.warning(
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_build_ext.py:200:        Later versions adopted the logging framework. Grab
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:15:    name="test_logging",
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:30:    logger = logging.Logger(__name__)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:31:    monkeypatch.setattr(logging, "root", logger)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:32:    unset_log_level = logger.getEffectiveLevel()
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:33:    assert logging.getLevelName(unset_log_level) == "NOTSET"
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:40:    log_level = logger.getEffectiveLevel()
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:41:    log_level_name = logging.getLevelName(log_level)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:65:    import setuptools.logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:69:    setuptools.logging.configure()
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:72:        # Modern logging infra, no problematic patching.
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_logging.py:74:        assert isinstance(dist.log, logging.Logger)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_manifest.py:8:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_manifest.py:345:        def _log(_logger, level, msg, args):
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_manifest.py:347:            rec = logging.LogRecord("distutils", level, "", 0, msg, args, exc)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_manifest.py:489:        caplog.set_level(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_manifest.py:506:        caplog.set_level(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_manifest.py:523:        caplog.set_level(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_manifest.py:540:        caplog.set_level(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_manifest.py:557:        caplog.set_level(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_manifest.py:574:        caplog.set_level(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_manifest.py:591:        caplog.set_level(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_manifest.py:608:        caplog.set_level(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_sdist.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_sdist.py:300:        with quiet(), caplog.at_level(logging.INFO):
tradingbot-backend\.venv\Lib\site-packages\setuptools\tests\test_sdist.py:312:                and level == logging.INFO  #
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:9:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:187:        self.announce(indent + header, level=logging.INFO)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:194:            self.announce(indent + f"{option} = {value}", level=logging.INFO)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:211:    def announce(self, msg: object, level: int = logging.DEBUG) -> None:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\cmd.py:212:        log.log(level, msg)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dist.py:10:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dist.py:496:        logging.getLogger().setLevel(logging.WARN - 10 * self.verbose)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dist.py:993:    def announce(self, msg, level: int = logging.INFO) -> None:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\dist.py:994:        log.log(level, msg)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:7:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:12:DEBUG = logging.DEBUG
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:13:INFO = logging.INFO
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:14:WARN = logging.WARN
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:15:ERROR = logging.ERROR
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:16:FATAL = logging.FATAL
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:34:        set_threshold(logging.WARN)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:36:        set_threshold(logging.INFO)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:38:        set_threshold(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:41:class Log(logging.Logger):
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:42:    """distutils.log.Log is deprecated, please use an alternative from `logging`."""
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\log.py:56:    warn = logging.Logger.warning
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\_log.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\_log.py:3:log = logging.getLogger()
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:252:        self.changelog = self._format_changelog(self.changelog)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py:580:    def _format_changelog(self, changelog):
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_config_cmd.py:15:def info_log(request, monkeypatch):
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_filelist.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_filelist.py:38:        warnings = [rec for rec in caplog.records if rec.levelno == logging.WARNING]
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_filelist.py:43:        warnings = [rec for rec in caplog.records if rec.levelno == logging.WARNING]
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_install.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_install.py:243:        caplog.set_level(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_install.py:245:        assert any(rec for rec in caplog.records if rec.levelno == logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_log.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_distutils\tests\test_log.py:9:        caplog.set_level(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1679:           def add_logging(f: Callable[P, T]) -> Callable[P, T]:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1680:               '''A type-safe decorator to add logging to a function.'''
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1682:                   logging.info(f'{f.__name__} was called')
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py:1686:           @add_logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:1246:    `side_effect` can be used for logging, updating progress bars, or anything
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3540:    # "Reservoir-Sampling Algorithms of Time Complexity O(n(1+log(N/n)))".
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3547:    W = exp(log(random()) / k)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3551:    next_index = k + floor(log(random()) / log(1 - W))
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3557:            W *= exp(log(random()) / k)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3558:            next_index += floor(log(random()) / log(1 - W)) + 1
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3568:    weight_keys = (log(random()) / weight for weight in weights)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3578:    weights_to_skip = log(random()) / smallest_weight_key
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3587:            weight_key = log(r_2) / weight
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py:3590:            weights_to_skip = log(random()) / smallest_weight_key
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:7:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:25:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py:115:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\util.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\util.py:6:log = logging.getLogger("wheel")
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_bdist_wheel.py:37:# ensure Python logging is configured
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_bdist_wheel.py:39:    __import__("setuptools.logging")
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_bdist_wheel.py:42:    from . import _setuptools_logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_bdist_wheel.py:44:    _setuptools_logging.configure()
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_setuptools_logging.py:1:# copied from setuptools.logging, omitting monkeypatching
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_setuptools_logging.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_setuptools_logging.py:8:def _not_warning(record: logging.LogRecord) -> bool:
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_setuptools_logging.py:9:    return record.levelno < logging.WARNING
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_setuptools_logging.py:14:    Configure logging to emit warning and above to stderr
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_setuptools_logging.py:19:    err_handler = logging.StreamHandler()
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_setuptools_logging.py:20:    err_handler.setLevel(logging.WARNING)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_setuptools_logging.py:21:    out_handler = logging.StreamHandler(sys.stdout)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_setuptools_logging.py:24:    logging.basicConfig(
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\_setuptools_logging.py:25:        format="{message}", style="{", handlers=handlers, level=logging.DEBUG
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\vendored\packaging\tags.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\vendored\packaging\tags.py:28:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\setuptools\_vendor\wheel\vendored\packaging\tags.py:118:        logger.debug(
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:11:default_logger = logging.getLogger('socketio.client')
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:35:    :param logger: To enable logging set to ``True`` or pass a logger object to
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:36:                   use. To disable logging set to ``False``. The default is
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:61:    :param engineio_logger: To enable Engine.IO logging set to ``True`` or pass
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:62:                            a logger object to use. To disable logging set to
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:215:        self.logger.info('Emitting event "%s" [%s]', event, namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:362:            self.logger.info('Namespace {} is connected'.format(namespace))
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:380:        self.logger.info('Received event "%s" [%s]', data[0], namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:396:        self.logger.info('Received ack [%s]', namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:402:            self.logger.warning('Unknown callback received, ignoring.')
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:413:        self.logger.info('Connection to namespace {} was rejected'.format(
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:466:            self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:471:                self.logger.info('Reconnect task aborted')
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:486:                self.logger.info('Reconnection successful')
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:491:                self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:498:        self.logger.info('Engine.IO connection established')
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_client.py:535:        self.logger.info('Engine.IO connection dropped')
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_pubsub_manager.py:188:                            self.server.logger.exception(
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_server.py:22:    :param logger: To enable logging set to ``True`` or pass a logger object to
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_server.py:23:                   use. To disable logging set to ``False``. Note that fatal
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_server.py:98:    :param engineio_logger: To enable Engine.IO logging set to ``True`` or pass
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_server.py:99:                            a logger object to use. To disable logging set to
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_server.py:166:        self.logger.info('emitting event "%s" to %s [%s]', event,
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_server.py:290:        self.logger.info('room %s is closing [%s]', room, namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_server.py:382:            self.logger.info('Disconnecting %s [%s]', sid, namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_server.py:509:        self.logger.info('received event "%s" from %s [%s]', data[0], sid,
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_server.py:512:            self.logger.warning('%s is not connected to namespace %s',
tradingbot-backend\.venv\Lib\site-packages\socketio\asyncio_server.py:541:        self.logger.info('received ack from %s [%s]', sid, namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\base_manager.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\socketio\base_manager.py:6:default_logger = logging.getLogger('socketio')
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:13:default_logger = logging.getLogger('socketio.client')
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:56:    :param logger: To enable logging set to ``True`` or pass a logger object to
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:57:                   use. To disable logging set to ``False``. The default is
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:89:    :param engineio_logger: To enable Engine.IO logging set to ``True`` or pass
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:90:                            a logger object to use. To disable logging set to
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:138:            if self.logger.level == logging.NOTSET:
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:140:                    self.logger.setLevel(logging.INFO)
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:142:                    self.logger.setLevel(logging.ERROR)
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:143:                self.logger.addHandler(logging.StreamHandler())
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:395:        self.logger.info('Emitting event "%s" [%s]', event, namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:562:            self.logger.info('Namespace {} is connected'.format(namespace))
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:580:        self.logger.info('Received event "%s" [%s]', data[0], namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:596:        self.logger.info('Received ack [%s]', namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:602:            self.logger.warning('Unknown callback received, ignoring.')
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:610:        self.logger.info('Connection to namespace {} was rejected'.format(
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:652:            self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:656:                self.logger.info('Reconnect task aborted')
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:669:                self.logger.info('Reconnection successful')
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:674:                self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:681:        self.logger.info('Engine.IO connection established')
tradingbot-backend\.venv\Lib\site-packages\socketio\client.py:718:        self.logger.info('Engine.IO connection dropped')
tradingbot-backend\.venv\Lib\site-packages\socketio\kafka_manager.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\socketio\kafka_manager.py:11:logger = logging.getLogger('socketio')
tradingbot-backend\.venv\Lib\site-packages\socketio\pubsub_manager.py:180:                    self.server.logger.exception(
tradingbot-backend\.venv\Lib\site-packages\socketio\redis_manager.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\socketio\redis_manager.py:12:logger = logging.getLogger('socketio')
tradingbot-backend\.venv\Lib\site-packages\socketio\redis_manager.py:84:                    logger.error('Cannot publish to redis... retrying')
tradingbot-backend\.venv\Lib\site-packages\socketio\redis_manager.py:87:                    logger.error('Cannot publish to redis... giving up')
tradingbot-backend\.venv\Lib\site-packages\socketio\redis_manager.py:102:                logger.error('Cannot receive from redis... '
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:10:default_logger = logging.getLogger('socketio.server')
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:23:    :param logger: To enable logging set to ``True`` or pass a logger object to
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:24:                   use. To disable logging set to ``False``. The default is
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:108:    :param engineio_logger: To enable Engine.IO logging set to ``True`` or pass
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:109:                            a logger object to use. To disable logging set to
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:150:            if self.logger.level == logging.NOTSET:
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:152:                    self.logger.setLevel(logging.INFO)
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:154:                    self.logger.setLevel(logging.ERROR)
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:155:                self.logger.addHandler(logging.StreamHandler())
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:317:        self.logger.info('emitting event "%s" to %s [%s]', event,
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:437:        self.logger.info('%s is entering room %s [%s]', sid, room, namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:451:        self.logger.info('%s is leaving room %s [%s]', sid, room, namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:464:        self.logger.info('room %s is closing [%s]', room, namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:565:            self.logger.info('Disconnecting %s [%s]', sid, namespace)
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:718:        self.logger.info('received event "%s" from %s [%s]', data[0], sid,
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:721:            self.logger.warning('%s is not connected to namespace %s',
tradingbot-backend\.venv\Lib\site-packages\socketio\server.py:750:        self.logger.info('received ack from %s [%s]', sid, namespace)
tradingbot-backend\.venv\Lib\site-packages\stevedore\dispatch.py:13:import logging
tradingbot-backend\.venv\Lib\site-packages\stevedore\dispatch.py:18:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\stevedore\enabled.py:13:import logging
tradingbot-backend\.venv\Lib\site-packages\stevedore\enabled.py:18:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\stevedore\extension.py:16:import logging
tradingbot-backend\.venv\Lib\site-packages\stevedore\extension.py:22:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\stevedore\extension.py:224:                    # enough to debug that.  If debug logging is
tradingbot-backend\.venv\Lib\site-packages\stevedore\extension.py:228:                              exc_info=LOG.isEnabledFor(logging.DEBUG))
tradingbot-backend\.venv\Lib\site-packages\stevedore\named.py:13:import logging
tradingbot-backend\.venv\Lib\site-packages\stevedore\named.py:17:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\stevedore\sphinxext.py:19:from sphinx.util import logging
tradingbot-backend\.venv\Lib\site-packages\stevedore\sphinxext.py:24:LOG = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\stevedore\_cache.py:21:import logging
tradingbot-backend\.venv\Lib\site-packages\stevedore\_cache.py:28:log = logging.getLogger('stevedore._cache')
tradingbot-backend\.venv\Lib\site-packages\stevedore\__init__.py:17:import logging
tradingbot-backend\.venv\Lib\site-packages\stevedore\__init__.py:20:# the app we're used from does not set up logging.
tradingbot-backend\.venv\Lib\site-packages\stevedore\__init__.py:21:LOG = logging.getLogger('stevedore')
tradingbot-backend\.venv\Lib\site-packages\stevedore\__init__.py:23:LOG.addHandler(logging.NullHandler())
tradingbot-backend\.venv\Lib\site-packages\urllib3\connection.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\urllib3\connection.py:71:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\urllib3\connection.py:1089:    """Returns the URL from a given connection. This is mainly used for testing and logging."""
tradingbot-backend\.venv\Lib\site-packages\urllib3\connectionpool.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\urllib3\connectionpool.py:61:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\urllib3\connectionpool.py:1166:    """Returns the URL from a given connection pool. This is mainly used for testing and logging."""
tradingbot-backend\.venv\Lib\site-packages\urllib3\poolmanager.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\urllib3\poolmanager.py:35:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\urllib3\response.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\urllib3\response.py:51:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:7:# Set default logging handler to avoid "No handler found" warnings.
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:8:import logging
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:12:from logging import NullHandler
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:71:logging.getLogger(__name__).addHandler(NullHandler())
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:75:    level: int = logging.DEBUG,
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:76:) -> logging.StreamHandler[typing.TextIO]:
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:78:    Helper for quickly adding a StreamHandler to the logger. Useful for
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:85:    logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:86:    handler = logging.StreamHandler()
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:87:    handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(message)s"))
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:88:    logger.addHandler(handler)
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:89:    logger.setLevel(level)
tradingbot-backend\.venv\Lib\site-packages\urllib3\__init__.py:90:    logger.debug("Added a stderr logging handler to logger: %s", __name__)
tradingbot-backend\.venv\Lib\site-packages\urllib3\contrib\pyopenssl.py:54:import logging
tradingbot-backend\.venv\Lib\site-packages\urllib3\contrib\pyopenssl.py:136:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\urllib3\contrib\emscripten\response.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\urllib3\contrib\emscripten\response.py:19:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\urllib3\http2\connection.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\urllib3\http2\connection.py:23:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\urllib3\util\retry.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\urllib3\util\retry.py:29:log = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:5:import logging.config
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:24:from uvicorn.logging import TRACE_LOG_LEVEL
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:49:    "critical": logging.CRITICAL,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:50:    "error": logging.ERROR,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:51:    "warning": logging.WARNING,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:52:    "info": logging.INFO,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:53:    "debug": logging.DEBUG,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:82:LOGGING_CONFIG: Dict[str, Any] = {
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:87:            "()": "uvicorn.logging.DefaultFormatter",
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:92:            "()": "uvicorn.logging.AccessFormatter",
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:99:            "class": "logging.StreamHandler",
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:104:            "class": "logging.StreamHandler",
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:115:logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:212:        log_config: Optional[Union[Dict[str, Any], str]] = LOGGING_CONFIG,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:289:        self.configure_logging()
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:299:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:336:                    logger.warning(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:343:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:351:            logger.info("Loading environment from '%s'", env_file)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:366:            logger.warning('"workers" flag is ignored when reloading is enabled.')
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:385:    def configure_logging(self) -> None:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:386:        logging.addLevelName(TRACE_LOG_LEVEL, "TRACE")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:397:                logging.config.dictConfig(self.log_config)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:401:                    logging.config.dictConfig(loaded_config)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:409:                    logging.config.dictConfig(loaded_config)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:412:                # https://docs.python.org/3/library/logging.config.html#configuration-file-format
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:413:                logging.config.fileConfig(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:422:            logging.getLogger("uvicorn.error").setLevel(log_level)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:423:            logging.getLogger("uvicorn.access").setLevel(log_level)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:424:            logging.getLogger("uvicorn.asgi").setLevel(log_level)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:426:            logging.getLogger("uvicorn.access").handlers = []
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:427:            logging.getLogger("uvicorn.access").propagate = False
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:473:            logger.error("Error loading ASGI app. %s" % exc)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:480:                logger.error("Error loading ASGI app factory: %s", exc)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:484:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:505:        if logger.level <= TRACE_LOG_LEVEL:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:529:                logger.error(exc)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:564:                logger.error(exc)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\config.py:575:        logger.info(message, *logger_args, extra={"color_message": color_message})
tradingbot-backend\.venv\Lib\site-packages\uvicorn\logging.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\logging.py:17:class ColourizedFormatter(logging.Formatter):
tradingbot-backend\.venv\Lib\site-packages\uvicorn\logging.py:28:        logging.DEBUG: lambda level_name: click.style(str(level_name), fg="cyan"),
tradingbot-backend\.venv\Lib\site-packages\uvicorn\logging.py:29:        logging.INFO: lambda level_name: click.style(str(level_name), fg="green"),
tradingbot-backend\.venv\Lib\site-packages\uvicorn\logging.py:30:        logging.WARNING: lambda level_name: click.style(str(level_name), fg="yellow"),
tradingbot-backend\.venv\Lib\site-packages\uvicorn\logging.py:31:        logging.ERROR: lambda level_name: click.style(str(level_name), fg="red"),
tradingbot-backend\.venv\Lib\site-packages\uvicorn\logging.py:32:        logging.CRITICAL: lambda level_name: click.style(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\logging.py:60:    def formatMessage(self, record: logging.LogRecord) -> str:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\logging.py:102:    def formatMessage(self, record: logging.LogRecord) -> str:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\main.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\main.py:17:    LOGGING_CONFIG,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\main.py:43:logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\main.py:196:    help="Logging configuration file. Supported formats: .ini, .json, .yaml.",
tradingbot-backend\.venv\Lib\site-packages\uvicorn\main.py:216:    help="Enable/Disable colorized logging.",
tradingbot-backend\.venv\Lib\site-packages\uvicorn\main.py:418:        log_config=LOGGING_CONFIG if log_config is None else log_config,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\main.py:477:    ] = LOGGING_CONFIG,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\main.py:554:        logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\main.py:555:        logger.warning(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\server.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\server.py:32:logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\server.py:74:        logger.info(message, process_id, extra={"color_message": color_message})
tradingbot-backend\.venv\Lib\site-packages\uvicorn\server.py:84:        logger.info(message, process_id, extra={"color_message": color_message})
tradingbot-backend\.venv\Lib\site-packages\uvicorn\server.py:167:                logger.error(exc)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\server.py:189:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\server.py:195:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\server.py:217:            logger.info(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\server.py:263:        logger.info("Shutting down")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\server.py:281:            logger.info(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\server.py:288:            logger.info(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\workers.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\workers.py:25:        logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\workers.py:26:        logger.handlers = self.log.error_log.handlers
tradingbot-backend\.venv\Lib\site-packages\uvicorn\workers.py:27:        logger.setLevel(self.log.error_log.level)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\workers.py:28:        logger.propagate = False
tradingbot-backend\.venv\Lib\site-packages\uvicorn\workers.py:30:        logger = logging.getLogger("uvicorn.access")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\workers.py:31:        logger.handlers = self.log.access_log.handlers
tradingbot-backend\.venv\Lib\site-packages\uvicorn\workers.py:32:        logger.setLevel(self.log.access_log.level)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\workers.py:33:        logger.propagate = False
tradingbot-backend\.venv\Lib\site-packages\uvicorn\_subprocess.py:72:    # Logging needs to be setup again for each child.
tradingbot-backend\.venv\Lib\site-packages\uvicorn\_subprocess.py:73:    config.configure_logging()
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:37:        self.logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:48:        self.logger.info("Waiting for application startup.")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:59:            self.logger.error("Application startup failed. Exiting.")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:62:            self.logger.info("Application startup complete.")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:67:        self.logger.info("Waiting for application shutdown.")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:75:            self.logger.error("Application shutdown failed. Exiting.")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:78:            self.logger.info("Application shutdown complete.")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:96:                self.logger.info(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:99:                self.logger.error(msg, exc_info=exc)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:123:                self.logger.error(message["message"])
tradingbot-backend\.venv\Lib\site-packages\uvicorn\lifespan\on.py:136:                self.logger.error(message["message"])
tradingbot-backend\.venv\Lib\site-packages\uvicorn\loops\asyncio.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\loops\asyncio.py:5:logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:14:from uvicorn.logging import TRACE_LOG_LEVEL
tradingbot-backend\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:42:        self.logger = logging.getLogger("uvicorn.asgi")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:45:            self.logger.log(TRACE_LOG_LEVEL, message, *args, **kwargs)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:47:        self.logger.trace = trace  # type: ignore
tradingbot-backend\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:65:            self.logger.trace(  # type: ignore
tradingbot-backend\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:73:            self.logger.trace(  # type: ignore
tradingbot-backend\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:80:        self.logger.trace(log_text, prefix, task_counter, logged_scope)  # type: ignore
tradingbot-backend\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:85:            self.logger.trace(log_text, prefix, task_counter)  # type: ignore
tradingbot-backend\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py:89:            self.logger.trace(log_text, prefix, task_counter)  # type: ignore
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:22:from uvicorn.logging import TRACE_LOG_LEVEL
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:92:        self.logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:93:        self.access_logger = logging.getLogger("uvicorn.access")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:94:        self.access_log = self.access_logger.hasHandlers()
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:139:        if self.logger.level <= TRACE_LOG_LEVEL:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:141:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection made", prefix)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:146:        if self.logger.level <= TRACE_LOG_LEVEL:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:148:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection lost", prefix)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:192:                self.logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:194:                self.logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:210:                self.logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:260:                    self.logger.warning(message)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:297:        if self.logger.level <= TRACE_LOG_LEVEL:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:299:            self.logger.log(TRACE_LOG_LEVEL, "%sUpgrading to WebSocket", prefix)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:395:        logger: logging.Logger,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:396:        access_logger: logging.Logger,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:434:            self.logger.error(msg, exc_info=exc)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:442:                self.logger.error(msg, result)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:446:                self.logger.error(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:450:                self.logger.error(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:499:                self.access_logger.info(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:25:from uvicorn.logging import TRACE_LOG_LEVEL
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:90:        self.logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:91:        self.access_logger = logging.getLogger("uvicorn.access")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:92:        self.access_log = self.access_logger.hasHandlers()
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:134:        if self.logger.level <= TRACE_LOG_LEVEL:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:136:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection made", prefix)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:141:        if self.logger.level <= TRACE_LOG_LEVEL:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:143:            self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection lost", prefix)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:182:            self.logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:184:            self.logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:198:            self.logger.warning(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:207:        if self.logger.level <= TRACE_LOG_LEVEL:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:209:            self.logger.log(TRACE_LOG_LEVEL, "%sUpgrading to WebSocket", prefix)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:293:            self.logger.warning(message)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:399:        logger: logging.Logger,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:400:        access_logger: logging.Logger,
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:441:            self.logger.error(msg, exc_info=exc)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:449:                self.logger.error(msg, result)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:453:                self.logger.error(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:457:                self.logger.error(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:506:                self.access_logger.info(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:27:from uvicorn.logging import TRACE_LOG_LEVEL
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:119:            logger=logging.getLogger("uvicorn.error"),
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:136:        if self.logger.isEnabledFor(TRACE_LOG_LEVEL):
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:138:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection made", prefix)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:145:        if self.logger.isEnabledFor(TRACE_LOG_LEVEL):
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:147:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection lost", prefix)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:258:            self.logger.error(msg, exc_info=exc)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:268:                self.logger.error(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:273:                self.logger.error(msg, result)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:283:                self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:303:                self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:2:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:14:from uvicorn.logging import TRACE_LOG_LEVEL
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:61:        self.logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:102:        if self.logger.level <= TRACE_LOG_LEVEL:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:104:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection made", prefix)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:111:        if self.logger.level <= TRACE_LOG_LEVEL:
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:113:            self.logger.log(TRACE_LOG_LEVEL, "%sWebSocket connection lost", prefix)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:251:            self.logger.exception("Exception in ASGI application\n")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:258:                self.logger.error(msg)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:263:                self.logger.error(msg, result)
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:274:                self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:297:                self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:20:logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:47:                logger.warning(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:72:        logger.info(message, extra={"color_message": color_message})
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\basereload.py:103:        logger.info(message, extra={"color_message": color_message})
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:20:logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:53:        logger.info(message, extra={"color_message": color_message})
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:74:        logger.info(message, extra={"color_message": color_message})
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\statreload.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\statreload.py:9:logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\statreload.py:24:            logger.warning(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\watchgodreload.py:1:import logging
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\watchgodreload.py:17:logger = logging.getLogger("uvicorn.error")
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\watchgodreload.py:91:                    logger.debug(
tradingbot-backend\.venv\Lib\site-packages\uvicorn\supervisors\watchgodreload.py:112:                logger.info(
tradingbot-backend\.venv\Lib\site-packages\virtualenv\info.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\info.py:18:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\info.py:27:            LOGGER.debug("filesystem is %scase-sensitive", "" if _FS_CASE_SENSITIVE else "not ")
tradingbot-backend\.venv\Lib\site-packages\virtualenv\info.py:50:            LOGGER.debug("symlink on filesystem does%s work", "" if can else " not")
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:7:    0: logging.CRITICAL,
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:8:    1: logging.ERROR,
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:9:    2: logging.WARNING,
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:10:    3: logging.INFO,
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:11:    4: logging.DEBUG,
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:12:    5: logging.NOTSET,
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:16:LOGGER = logging.getLogger()
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:24:    if level <= logging.DEBUG:
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:29:    formatter = logging.Formatter(msg_format)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:30:    stream_handler = logging.StreamHandler(stream=sys.stdout)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:32:    LOGGER.setLevel(logging.NOTSET)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:34:    LOGGER.addHandler(stream_handler)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:35:    level_name = logging.getLevelName(level)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:36:    LOGGER.debug("setup logging to %s", level_name)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\report.py:37:    logging.getLogger("distlib").setLevel(logging.ERROR)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\__main__.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\__main__.py:9:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\__main__.py:22:        LOGGER.warning(LogSession(session, start))
tradingbot-backend\.venv\Lib\site-packages\virtualenv\__main__.py:74:                LOGGER.error("%s: %s", type(exception).__name__, exception)  # noqa: TRY400
tradingbot-backend\.venv\Lib\site-packages\virtualenv\__main__.py:78:            for handler in LOGGER.handlers:  # force flush of log messages before the trace is printed
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\base.py:35:    def embed_update_log(self, distribution, for_py_version):
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\na.py:28:    def embed_update_log(self, distribution, for_py_version):  # noqa: ARG002
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\read_only.py:30:    def embed_update_log(self, distribution, for_py_version):
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:28:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:40:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:59:        LOGGER.debug("reset app data folder %s", self.lock.path)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:97:    def embed_update_log(self, distribution, for_py_version):
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:132:            LOGGER.debug("got %s %s from %s", *self.msg_args)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:141:        LOGGER.debug("removed %s %s at %s", *self.msg_args)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py:152:        LOGGER.debug("wrote %s %s at %s", *self.msg_args)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_tempdir.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_tempdir.py:10:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_tempdir.py:19:        LOGGER.debug("created temporary app data folder %s", self.lock.path)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_tempdir.py:25:        LOGGER.debug("remove temporary app data folder %s", self.lock.path)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\via_tempdir.py:28:    def embed_update_log(self, distribution, for_py_version):
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\__init__.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\__init__.py:15:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\__init__.py:42:            LOGGER.debug("created app data folder %s", folder)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\__init__.py:44:            LOGGER.info("could not create app data folder %s due to %r", folder, exception)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\app_data\__init__.py:48:    LOGGER.debug("app data folder %s has no write access", folder)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\config\convert.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\config\convert.py:7:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\config\convert.py:86:        LOGGER.warning("%s failed to convert %r as %r because %r", source, value, as_type, exception)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\config\ini.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\config\ini.py:13:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\config\ini.py:49:            LOGGER.error("failed to read config file %s because %r", config_file, exception)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\config\ini.py:73:    def epilog(self):
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\creator.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\creator.py:23:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\creator.py:158:            LOGGER.debug("delete %s", self.dest)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\creator.py:215:        LOGGER.debug("debug via %r", LogCmd(cmd))
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\pyenv_cfg.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\pyenv_cfg.py:7:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\pyenv_cfg.py:35:        LOGGER.debug("write %s", self.path)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\pyenv_cfg.py:40:            LOGGER.debug("\t%s", line)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\api.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\api.py:11:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\api.py:98:            LOGGER.debug("create virtualenv import hook file %s", pth)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\api.py:101:            LOGGER.debug("create %s", dest_path)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\venv.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\venv.py:16:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\venv.py:75:        LOGGER.info("using host built-in venv to create via %s", " ".join(cmd))
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\mac_os.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\mac_os.py:23:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\mac_os.py:120:        LOGGER.debug("change Mach-O for %s from %s to %s", exe, current, new)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\mac_os.py:123:        LOGGER.warning("Could not call _builtin_change_mac_o: %s. Trying to call install_name_tool instead.", e)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\mac_os.py:128:            logging.fatal("Could not call install_name_tool -- you must have Apple's development tools installed")
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\builtin.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\builtin.py:22:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\builtin.py:77:    LOGGER.info("find interpreter for spec %r", spec)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\builtin.py:84:        LOGGER.info("proposed %s", interpreter)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\builtin.py:86:            LOGGER.debug("accepted %s", interpreter)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\builtin.py:167:        LOGGER.debug(LazyPathDump(pos, path, env))
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\cached_py_info.py:12:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\cached_py_info.py:33:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\cached_py_info.py:55:        LOGGER.info("%s", result)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\cached_py_info.py:145:        LOGGER.debug("get interpreter info via cmd: %s", LogCmd(cmd))
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\info.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\info.py:9:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\info.py:20:            LOGGER.debug("filesystem is %scase-sensitive", "" if _FS_CASE_SENSITIVE else "not ")
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\py_info.py:10:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\py_info.py:22:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\py_info.py:498:                LOGGER.info("ignore %s due cannot resolve system due to %r", proposed.original_executable, exception)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\py_info.py:524:                    LOGGER.info("%r links back to itself via prefixes", target)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\py_info.py:528:                    LOGGER.error("%d: prefix=%s, info=%r", at, p, t)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\py_info.py:529:                LOGGER.error("%d: prefix=%s, info=%r", len(prefixes) + 1, prefix, target)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\py_info.py:544:            LOGGER.debug("discover exe from cache %s - exact %s: %r", prefix, exact, self._cache_exe_discovery[key])
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\py_info.py:546:        LOGGER.debug("discover exe for %s in %s", self, prefix)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\py_info.py:562:            LOGGER.debug("no exact match found, chosen most similar of %s within base folders %s", info, folders)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\py_info.py:588:                LOGGER.debug("refused interpreter %s because %s differs %s != %s", executable, item, found, searched)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\windows\pep514.py:8:from logging import basicConfig, getLogger
tradingbot-backend\.venv\Lib\site-packages\virtualenv\discovery\windows\pep514.py:155:    LOGGER.warning("PEP-514 violation in Windows Registry at %s error: %s", path, what)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\session.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\session.py:6:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\session.py:52:        LOGGER.info("create virtual environment via %s", self.creator)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\session.py:54:        LOGGER.debug(_DEBUG_MARKER)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\session.py:55:        LOGGER.debug("%s", _Debug(self.creator))
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\session.py:59:            LOGGER.info("add seed packages via %s", self.seeder)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\session.py:65:            LOGGER.info("add activators for %s", active)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:20:def cli_run(args, options=None, setup_logging=True, env=None):  # noqa: FBT002
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:26:    :param setup_logging: ``True`` if setup logging handlers, ``False`` to use handlers already registered
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:31:    of_session = session_via_cli(args, options, setup_logging, env)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:37:def session_via_cli(args, options=None, setup_logging=True, env=None):  # noqa: FBT002
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:44:    :param setup_logging: ``True`` if setup logging handlers, ``False`` to use handlers already registered
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:49:    parser, elements = build_parser(args, options, setup_logging, env)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:63:def build_parser(args=None, options=None, setup_logging=True, env=None):  # noqa: FBT002
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:73:    _do_report_setup(parser, args, setup_logging)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:147:def _do_report_setup(parser, args, setup_logging):
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:148:    level_map = ", ".join(f"{logging.getLevelName(line)}={c}" for c, line in sorted(LEVELS.items()))
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:152:        description=msg.format(logging.getLevelName(LEVELS[3]), level_map),
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:157:    # do not configure logging if only help is requested, as no logging is required for this
tradingbot-backend\.venv\Lib\site-packages\virtualenv\run\__init__.py:161:    if setup_logging:
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\base_embed.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\base_embed.py:11:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\base_embed.py:38:                LOGGER.warning(
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\pip_invoke.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\pip_invoke.py:11:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\pip_invoke.py:28:        LOGGER.debug("pip seed by running: %s", LogCmd(cmd, env))
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\via_app_data.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\via_app_data.py:20:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\via_app_data.py:51:                    LOGGER.debug("install %s from wheel %s via %s", name, wheel, installer_class.__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\via_app_data.py:99:                    LOGGER.exception("fail")
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\via_app_data.py:113:                LOGGER.error(msg)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\base.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\base.py:17:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\base.py:45:        LOGGER.debug("generated console scripts %s", " ".join(i.name for i in consoles))
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\base.py:49:        LOGGER.debug("build install image for %s to %s", self._wheel.name, self._image_dir)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\base.py:156:        LOGGER.debug("uninstall existing distribution %s from %s", dist.stem, dist_base)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\acquire.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\acquire.py:15:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\acquire.py:48:            add_wheel_to_update_log(wheel, for_py_version, app_data)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\acquire.py:55:    LOGGER.debug("download wheel %s %s to %s", to_download, for_py_version, to_folder)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\acquire.py:80:    LOGGER.debug("downloaded wheel %s", result.name)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:25:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:49:        LOGGER.debug("using %supdated wheel %s", "periodically " if updated_wheel else "", updated_wheel)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:72:    embed_update_log = app_data.embed_update_log(distribution, for_py_version)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:81:def add_wheel_to_update_log(wheel, for_py_version, app_data):
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:82:    embed_update_log = app_data.embed_update_log(wheel.distribution, for_py_version)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:83:    LOGGER.debug("adding %s information to %s", wheel.name, embed_update_log.file)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:86:        LOGGER.warning("%s already present in %s", wheel.name, embed_update_log.file)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:178:        raw_json = app_data.embed_update_log(distribution, for_py_version).read()
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:224:    LOGGER.info(
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:243:        LOGGER.debug("done %s %s with %s", distribution, for_py_version, versions)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:262:    embed_update_log = app_data.embed_update_log(distribution, for_py_version)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:301:        LOGGER.info("detected %s in %s", last, datetime.now(tz=timezone.utc) - download_time)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:329:            LOGGER.error("could not load release date %s because %r", content, exception)  # noqa: TRY400
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:357:                LOGGER.error("failed to access %s because %r", url, exception)  # noqa: TRY400
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:359:        LOGGER.error("failed to access %s because %r", url, exception)  # noqa: TRY400
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:390:    LOGGER.warning(
tradingbot-backend\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py:414:    LOGGER.warning(msg, *args)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\lock.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\lock.py:14:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\lock.py:127:            LOGGER.debug("lock file %s present, will block until released", lock.lock_file)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\zipapp.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\zipapp.py:9:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\zipapp.py:19:    LOGGER.debug("extract %s to %s", full_path, dest)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\path\_sync.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\path\_sync.py:9:LOGGER = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\path\_sync.py:14:        LOGGER.debug("create folder %s", str(path))
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\path\_sync.py:25:        LOGGER.debug("remove directory %s", dest)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\path\_sync.py:28:        LOGGER.debug("remove file %s", dest)
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\path\_sync.py:34:    LOGGER.debug("symlink %s", _Debug(src, dest))
tradingbot-backend\.venv\Lib\site-packages\virtualenv\util\path\_sync.py:42:    LOGGER.debug("copy %s", _Debug(src, dest))
tradingbot-backend\.venv\Lib\site-packages\websockets\client.py:65:            defaults to ``logging.getLogger("websockets.client")``;
tradingbot-backend\.venv\Lib\site-packages\websockets\client.py:66:            see the :doc:`logging guide <../../topics/logging>` for details.
tradingbot-backend\.venv\Lib\site-packages\websockets\client.py:307:            self.logger.debug("> GET %s HTTP/1.1", request.path)
tradingbot-backend\.venv\Lib\site-packages\websockets\client.py:309:                self.logger.debug("> %s: %s", key, value)
tradingbot-backend\.venv\Lib\site-packages\websockets\client.py:329:                self.logger.debug("< HTTP/1.1 %d %s", code, phrase)
tradingbot-backend\.venv\Lib\site-packages\websockets\client.py:331:                    self.logger.debug("< %s: %s", key, value)
tradingbot-backend\.venv\Lib\site-packages\websockets\client.py:333:                    self.logger.debug("< [body] (%d bytes)", len(response.body))
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:80:            defaults to ``logging.getLogger("websockets.client")``
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:81:            or ``logging.getLogger("websockets.server")``;
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:82:            see the :doc:`logging guide <../../topics/logging>` for details.
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:100:            logger = logging.getLogger(f"websockets.{side.name.lower()}")
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:104:        # Track if DEBUG is enabled. Shortcut logging calls if it isn't.
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:105:        self.debug = logger.isEnabledFor(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:167:            self.logger.debug("= connection is %s", state.name)
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:522:                        self.logger.debug("< EOF")
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:547:                    self.logger.debug("< %s", frame)
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:568:            self.logger.error("parser failed", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:596:            self.logger.debug("< EOF")
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:697:            self.logger.debug("> %s", frame)
tradingbot-backend\.venv\Lib\site-packages\websockets\protocol.py:706:            self.logger.debug("> EOF")
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:69:            defaults to ``logging.getLogger("websockets.client")``;
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:70:            see the :doc:`logging guide <../../topics/logging>` for details.
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:136:                self.logger.debug("! invalid origin", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:145:                self.logger.debug("! invalid upgrade", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:161:                self.logger.debug("! invalid handshake", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:171:            self.logger.error("opening handshake failed", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:194:        self.logger.info("connection open")
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:517:        self.logger.info("connection failed (%d %s)", status.value, status.phrase)
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:530:            self.logger.debug("> HTTP/1.1 %d %s", code, phrase)
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:532:                self.logger.debug("> %s: %s", key, value)
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:534:                self.logger.debug("> [body] (%d bytes)", len(response.body))
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:560:                self.logger.debug("< GET %s HTTP/1.1", request.path)
tradingbot-backend\.venv\Lib\site-packages\websockets\server.py:562:                    self.logger.debug("< %s: %s", key, value)
tradingbot-backend\.venv\Lib\site-packages\websockets\typing.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\websockets\typing.py:29:LoggerLike = Union[logging.Logger, logging.LoggerAdapter]
tradingbot-backend\.venv\Lib\site-packages\websockets\typing.py:30:"""Types accepted where a :class:`~logging.Logger` is expected."""
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\client.py:5:import logging
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\client.py:98:            logger = logging.getLogger("websockets.client")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\client.py:115:            self.logger.debug("> GET %s HTTP/1.1", path)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\client.py:117:                self.logger.debug("> %s: %s", key, value)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\client.py:148:            self.logger.debug("< HTTP/1.1 %d %s", status_code, reason)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\client.py:150:                self.logger.debug("< %s: %s", key, value)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\client.py:384:            It defaults to ``logging.getLogger("websockets.client")``.
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\client.py:385:            See the :doc:`logging guide <../../topics/logging>` for details.
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\client.py:546:            logger = logging.getLogger("websockets.client")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\client.py:613:                    self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\client.py:620:                    self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:6:import logging
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:149:            It defaults to ``logging.getLogger("websockets.protocol")``.
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:150:            See the :doc:`logging guide <../../topics/logging>` for details.
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:223:            logger = logging.getLogger("websockets.protocol")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:224:        self.logger: LoggerLike = logging.LoggerAdapter(logger, {"websocket": self})
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:227:        # Track if DEBUG is enabled. Shortcut logging calls if it isn't.
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:228:        self.debug = logger.isEnabledFor(logging.DEBUG)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:255:            self.logger.debug("= connection is CONNECTING")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:356:            self.logger.debug("= connection is OPEN")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:984:            # If fail_connection() cancels this task, avoid logging the error
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1015:            self.logger.error("data transfer failed", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1168:            self.logger.debug("< %s", frame)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1174:            self.logger.debug("> %s", frame)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1223:                self.logger.debug("= connection is CLOSING")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1261:                self.logger.debug("% sending keepalive ping")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1268:                        self.logger.debug("% received keepalive pong")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1271:                            self.logger.debug("! timed out waiting for keepalive pong")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1284:            self.logger.error("keepalive ping failed", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1315:                    self.logger.debug("! timed out waiting for TCP close")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1320:                    self.logger.debug("x half-closing TCP connection")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1333:                    self.logger.debug("! timed out waiting for TCP close")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1353:            self.logger.debug("x closing TCP connection")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1359:            self.logger.debug("! timed out waiting for TCP close")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1363:            self.logger.debug("x aborting TCP connection")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1409:            self.logger.debug("! failing connection with code %d", code)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1433:                self.logger.debug("= connection is CLOSING")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1462:            # nothing, but it prevents logging the exception.
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1494:        self.logger.debug("= connection is CLOSED")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1624:                websocket.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\protocol.py:1636:                websocket.logger.warning(
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:8:import logging
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:122:            logger = logging.getLogger("websockets.server")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:186:                        self.logger.debug("! invalid origin", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:194:                        self.logger.debug("! invalid upgrade", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:207:                        self.logger.debug("! invalid handshake", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:214:                    self.logger.error("opening handshake failed", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:233:                self.logger.info(
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:242:                self.logger.error("connection handler failed", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:252:                self.logger.error("closing handshake failed", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:268:            self.logger.info("connection closed")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:290:            self.logger.debug("< GET %s HTTP/1.1", path)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:292:                self.logger.debug("< %s: %s", key, value)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:311:            self.logger.debug("> HTTP/1.1 %d %s", status.value, status.phrase)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:313:                self.logger.debug("> %s: %s", key, value)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:315:                self.logger.debug("> [body] (%d bytes)", len(body))
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:646:        self.logger.info("connection open")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:666:            It defaults to ``logging.getLogger("websockets.server")``.
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:667:            See the :doc:`logging guide <../../topics/logging>` for details.
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:673:            logger = logging.getLogger("websockets.server")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:711:            self.logger.info("server listening on %s", name)
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:763:        self.logger.info("server closing")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:804:        self.logger.info("server closed")
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:936:            It defaults to ``logging.getLogger("websockets.server")``.
tradingbot-backend\.venv\Lib\site-packages\websockets\legacy\server.py:937:            See the :doc:`logging guide <../../topics/logging>` for details.
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\client.py:147:    # Logging
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\client.py:193:            It defaults to ``logging.getLogger("websockets.client")``.
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\client.py:194:            See the :doc:`logging guide <../../topics/logging>` for details.
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\connection.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\connection.py:24:logger = logging.getLogger(__name__)
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\connection.py:53:        # Inject reference to this instance in the protocol's logger.
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\connection.py:54:        self.protocol.logger = logging.LoggerAdapter(
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\connection.py:531:                        self.logger.debug("error while receiving data", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\connection.py:556:                            self.logger.debug("error while sending data", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\connection.py:596:            self.logger.error("unexpected internal error", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\connection.py:645:                    self.logger.error("unexpected internal error", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\connection.py:669:                            self.logger.debug("error while sending data", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\server.py:4:import logging
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\server.py:107:                    self.logger.error("opening handshake failed", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\server.py:127:                    self.logger.error("opening handshake failed", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\server.py:201:            logger = logging.getLogger("websockets.server")
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\server.py:299:    # Logging
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\server.py:374:            It defaults to ``logging.getLogger("websockets.server")``. See the
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\server.py:375:            :doc:`logging guide <../../topics/logging>` for details.
tradingbot-backend\.venv\Lib\site-packages\websockets\sync\server.py:496:            protocol.logger.error("connection handler failed", exc_info=True)
tradingbot-backend\.venv\Lib\site-packages\_pytest\compat.py:84:    importing asyncio directly, which in turns also initializes the "logging"
tradingbot-backend\.venv\Lib\site-packages\_pytest\hookspec.py:303:# logging hooks for collection
tradingbot-backend\.venv\Lib\site-packages\_pytest\junitxml.py:169:        if self.xml.logging == "no":
tradingbot-backend\.venv\Lib\site-packages\_pytest\junitxml.py:172:        if self.xml.logging in ["log", "all"]:
tradingbot-backend\.venv\Lib\site-packages\_pytest\junitxml.py:174:        if self.xml.logging in ["system-out", "out-err", "all"]:
tradingbot-backend\.venv\Lib\site-packages\_pytest\junitxml.py:178:        if self.xml.logging in ["system-err", "out-err", "all"]:
tradingbot-backend\.venv\Lib\site-packages\_pytest\junitxml.py:406:        "junit_logging",
tradingbot-backend\.venv\Lib\site-packages\_pytest\junitxml.py:438:            config.getini("junit_logging"),
tradingbot-backend\.venv\Lib\site-packages\_pytest\junitxml.py:470:        logging: str = "no",
tradingbot-backend\.venv\Lib\site-packages\_pytest\junitxml.py:479:        self.logging = logging
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:3:import logging
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:39:    logging_StreamHandler = logging.StreamHandler[StringIO]
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:43:    logging_StreamHandler = logging.StreamHandler
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:49:caplog_records_key = StashKey[Dict[str, List[logging.LogRecord]]]()
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:56:class ColoredLevelFormatter(logging.Formatter):
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:57:    """A logging formatter which colorizes the %(levelname)..s part of the
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:61:        logging.CRITICAL: {"red"},
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:62:        logging.ERROR: {"red", "bold"},
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:63:        logging.WARNING: {"yellow"},
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:64:        logging.WARN: {"yellow"},
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:65:        logging.INFO: {"green"},
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:66:        logging.DEBUG: {"purple"},
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:67:        logging.NOTSET: set(),
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:84:            Log level to apply a style to, e.g. ``logging.INFO``.
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:100:        formatted_levelname = levelname_fmt % {"levelname": logging.getLevelName(level)}
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:111:    def format(self, record: logging.LogRecord) -> str:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:117:class PercentStyleMultiline(logging.PercentStyle):
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:118:    """A logging style with special support for multiline messages.
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:133:        extra={"auto_indent": [value]} to the call to logging.log() or
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:183:    def format(self, record: logging.LogRecord) -> str:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:186:                # Passed in from the "extra={}" kwarg on the call to logging.log().
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:200:                    # Optimizes logging by allowing a fixed indentation.
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:218:    group = parser.getgroup("logging")
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:241:        help="Log format used by the logging module",
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:247:        help="Log date format used by the logging module",
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:253:        help='Enable log display during test run (also known as "live logging")',
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:256:        "--log-cli-level", dest="log_cli_level", default=None, help="CLI logging level"
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:262:        help="Log format used by the logging module",
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:268:        help="Log date format used by the logging module",
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:274:        help="Path to a file when logging will be written to",
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:280:        help="Log file logging level",
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:286:        help="Log format used by the logging module",
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:292:        help="Log date format used by the logging module",
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:298:        help="Auto-indent multiline messages passed to the logging module. Accepts true|on, false|off or an integer.",
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:309:_HandlerType = TypeVar("_HandlerType", bound=logging.Handler)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:314:    """Context manager that prepares the whole logging machinery properly."""
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:323:        root_logger = logging.getLogger()
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:326:        root_logger.addHandler(self.handler)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:328:            self.orig_level = root_logger.level
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:329:            root_logger.setLevel(min(self.orig_level, self.level))
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:333:        root_logger = logging.getLogger()
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:335:            root_logger.setLevel(self.orig_level)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:336:        root_logger.removeHandler(self.handler)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:339:class LogCaptureHandler(logging_StreamHandler):
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:340:    """A logging handler that stores log records and the log text."""
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:345:        self.records: List[logging.LogRecord] = []
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:347:    def emit(self, record: logging.LogRecord) -> None:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:360:    def handleError(self, record: logging.LogRecord) -> None:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:361:        if logging.raiseExceptions:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:363:            # The default behavior of logging is to print "Logging error"
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:389:            logger = logging.getLogger(logger_name)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:390:            logger.setLevel(level)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:394:        """Get the logging handler used by the fixture."""
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:399:    ) -> List[logging.LogRecord]:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:400:        """Get the logging records for one of the possible test phases.
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:418:    def records(self) -> List[logging.LogRecord]:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:444:        Note that traceback or stack info (from :func:`logging.exception` or
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:445:        the `exc_info` or `stack_info` arguments to the logging functions) is
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:464:        :param logger: The logger to update. If not given, the root logger.
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:466:        logger_obj = logging.getLogger(logger)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:483:        :param logger: The logger to update. If not given, the root logger.
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:485:        logger_obj = logging.getLogger(logger)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:498:def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:505:    * caplog.records         -> list of logging.LogRecord instances
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:527:        return int(getattr(logging, log_level, log_level))
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:529:        # Python logging does not recognise this as a logging level
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:531:            "'{}' is not recognized as a logging level name for "
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:533:            "logging level num instead.".format(log_level, setting_name)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:540:    config.pluginmanager.register(LoggingPlugin(config), "logging-plugin")
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:543:class LoggingPlugin:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:544:    """Attaches to the logging module and captures log messages for each test."""
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:554:        # Report logging.
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:566:        # File logging.
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:580:        log_file_formatter = logging.Formatter(
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:585:        # CLI/live logging.
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:592:            # if capturemanager plugin is disabled, live logging still works.
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:594:                _LiveLoggingStreamHandler, _LiveLoggingNullHandler
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:595:            ] = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:597:            self.log_cli_handler = _LiveLoggingNullHandler()
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:611:            logger = logging.getLogger(name)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:612:            logger.disabled = True
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:620:            formatter: logging.Formatter = ColoredLevelFormatter(
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:624:            formatter = logging.Formatter(log_format, log_date_format)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:633:        """Set the filename parameter for Logging.FileHandler().
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:655:        """Return whether live logging is enabled."""
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:731:        empty: Dict[str, List[logging.LogRecord]] = {}
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:764:        # (logging.shutdown might have lost the weakref?!)
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:768:class _FileHandler(logging.FileHandler):
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:769:    """A logging FileHandler with pytest tweaks."""
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:771:    def handleError(self, record: logging.LogRecord) -> None:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:776:class _LiveLoggingStreamHandler(logging_StreamHandler):
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:777:    """A logging StreamHandler used by the live logging feature: it will
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:780:    During live logging we must also explicitly disable stdout/stderr
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:811:    def emit(self, record: logging.LogRecord) -> None:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:830:    def handleError(self, record: logging.LogRecord) -> None:
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:835:class _LiveLoggingNullHandler(logging.NullHandler):
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:836:    """A logging handler used when live logging is disabled."""
tradingbot-backend\.venv\Lib\site-packages\_pytest\logging.py:844:    def handleError(self, record: logging.LogRecord) -> None:
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1611:                    self._log("matched: ", repr(line))
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1615:                self._log(msg)
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1628:    def _log(self, *args) -> None:
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1707:                    self._log("exact match:", repr(line))
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1711:                    self._log("%s:" % match_nickname, repr(line))
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1712:                    self._log(
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1720:                        self._log(msg)
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1721:                        self._log(
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1726:                        self._log(
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1730:                    self._log("{:>{width}}".format("and:", width=wnick), repr(nextline))
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1734:                self._log(msg)
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1769:                self._log(msg)
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1770:                self._log("{:>{width}}".format("with:", width=wnick), repr(line))
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1774:                    self._log("{:>{width}}".format("nomatch:", width=wnick), repr(pat))
tradingbot-backend\.venv\Lib\site-packages\_pytest\pytester.py:1776:                self._log("{:>{width}}".format("and:", width=wnick), repr(line))
tradingbot-backend\.venv\Lib\site-packages\_pytest\reports.py:117:    def caplog(self) -> str:
tradingbot-backend\.venv\Lib\site-packages\_pytest\reports.py:299:        #: from ``stdout``, ``stderr``, and intercepted logging events. May
tradingbot-backend\.venv\Lib\site-packages\_pytest\reports.py:415:        #: from ``stdout``, ``stderr``, and intercepted logging events. May
tradingbot-backend\.venv\Lib\site-packages\_pytest\config\__init__.py:257:    "logging",
tradingbot-backend\archived\scraper\api_extractor.py:2:import logging
tradingbot-backend\archived\scraper\api_extractor.py:9:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\api_extractor.py:10:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\api_extractor.py:165:                        logger.error(f"Fel vid extrahering av parameter: {str(e)}")
tradingbot-backend\archived\scraper\api_extractor.py:260:                        logger.error(f"Fel vid extrahering av exempel: {str(e)}")
tradingbot-backend\archived\scraper\api_extractor.py:326:        logger.info(f"Sparade {category}/{subcategory}/{filename}")
tradingbot-backend\archived\scraper\api_extractor.py:343:        logger.info("Skapade index.json")
tradingbot-backend\archived\scraper\api_extractor.py:374:                    logger.error(f"Fel vid indexering av {file}: {str(e)}")
tradingbot-backend\archived\scraper\api_extractor.py:389:            logger.info(f"Bearbetar {file_path}")
tradingbot-backend\archived\scraper\api_extractor.py:399:                logger.warning(f"Inga endpoints hittades i {file_path}")
tradingbot-backend\archived\scraper\api_extractor.py:411:            logger.error(f"Fel vid bearbetning av {file_path}: {str(e)}")
tradingbot-backend\archived\scraper\api_extractor.py:432:            logger.info("API-extrahering slutförd!")
tradingbot-backend\archived\scraper\api_extractor.py:435:            logger.error(f"Fel vid bearbetning av filer: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:9:import logging
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:21:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:22:logger = logging.getLogger("bitfinex_account_scraper")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:87:                        logger.info(f"Använder cachad data för {section}_account")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:90:                    logger.warning(f"Fel vid läsning av cache: {e}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:93:        logger.info(f"Hämtar {section}_account från {url}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:114:            logger.error(f"Fel vid hämtning av {url}: {e}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:120:                        logger.warning(f"Använder gammal cache för {section}_account på grund av nätverksfel")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:512:        logger.error(f"Fel vid hämtning av plånböcker: {e}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:559:        logger.error(f"Fel vid hämtning av positioner: {e}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:604:        logger.error(f"Fel vid hämtning av margin-information: {e}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:616:    logger.info("Hämtar Bitfinex konto-relaterad API-dokumentation...")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:620:    logger.info(f"Wallet endpoint: {account_info['wallet']['endpoint']}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:621:    logger.info(f"Beskrivning: {account_info['wallet']['description']}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:622:    logger.info(f"Svarsfält: {len(account_info['wallet']['response_fields'])} fält")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:625:    logger.info(f"Positions endpoint: {account_info['positions']['endpoint']}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:626:    logger.info(f"Beskrivning: {account_info['positions']['description']}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:627:    logger.info(f"Svarsfält: {len(account_info['positions']['response_fields'])} fält")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:630:    logger.info(f"Margin endpoint: {account_info['margin']['endpoint']}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:631:    logger.info(f"Beskrivning: {account_info['margin']['description']}")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:632:    logger.info(f"Svarsfält: {len(account_info['margin']['response_fields'])} fält")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:636:    logger.info("Genererade kodexempel för wallet, positions och margin endpoints")
tradingbot-backend\archived\scraper\bitfinex_account_docs.py:638:    logger.info("Skrapning av konto-relaterad dokumentation slutförd.")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:3:import logging
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:12:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:13:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:116:                logger.debug(f"Kunde inte parsa data-initial-props: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:128:                    logger.debug(f"Kunde inte parsa script JSON: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:171:                logger.error(f"Fel vid extrahering av endpoint: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:199:                logger.error(f"Fel vid extrahering av parameter: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:276:        logger.info(f"Sparade {category}/{subcategory}/{filename}")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:321:        logger.info("Skapade api/index.json")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:331:            logger.info(f"Bearbetar {file_path}")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:343:                logger.warning(f"Ingen API-data hittades i {file_path}")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:363:            logger.error(f"Fel vid bearbetning av {file_path}: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:393:            logger.info("API-extrahering slutförd!")
tradingbot-backend\archived\scraper\bitfinex_api_extractor.py:396:            logger.error(f"Fel vid bearbetning av filer: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:10:import logging
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:22:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:23:logger = logging.getLogger("bitfinex_auth_scraper")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:80:                        logger.info(f"Använder cachad data för {section}_auth")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:83:                    logger.warning(f"Fel vid läsning av cache: {e}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:86:        logger.info(f"Hämtar {section}_auth från {url}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:102:            logger.error(f"Fel vid hämtning av {url}: {e}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:108:                        logger.warning(f"Använder gammal cache för {section}_auth på grund av nätverksfel")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:698:    logger.info("Hämtar Bitfinex API autentiseringsdokumentation...")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:704:    logger.info(f"REST autentiseringsrekommendationer: {json.dumps(recommendations['rest'], indent=2)}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:705:    logger.info(f"WebSocket autentiseringsrekommendationer: {json.dumps(recommendations['websocket'], indent=2)}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:709:    logger.info(f"REST autentiseringskodexempel:\n{examples['rest']['python']['build_auth_headers']}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:710:    logger.info(f"WebSocket autentiseringskodexempel:\n{examples['websocket']['python']['build_ws_auth_payload']}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:714:        logger.info("\n=== Tillgängliga REST API Endpoints ===")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:716:            logger.info(f"\n## {section['category']}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:718:                logger.info(f"- {endpoint['name']}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:722:        logger.info("\n=== Tillgängliga WebSocket Events ===")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:724:            logger.info(f"\n## {section['category']}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:726:                logger.info(f"- {event['name']}")
tradingbot-backend\archived\scraper\bitfinex_auth_docs.py:728:    logger.info("\nSkrapning av autentiseringsdokumentation slutförd.")
tradingbot-backend\archived\scraper\bitfinex_docs.py:10:import logging
tradingbot-backend\archived\scraper\bitfinex_docs.py:21:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\bitfinex_docs.py:22:logger = logging.getLogger("bitfinex_docs_scraper")
tradingbot-backend\archived\scraper\bitfinex_docs.py:81:                        logger.info(f"Använder cachad data för {section}")
tradingbot-backend\archived\scraper\bitfinex_docs.py:84:                    logger.warning(f"Fel vid läsning av cache: {e}")
tradingbot-backend\archived\scraper\bitfinex_docs.py:87:        logger.info(f"Hämtar {section} från {url}")
tradingbot-backend\archived\scraper\bitfinex_docs.py:115:            logger.error(f"Fel vid hämtning av {url}: {e}")
tradingbot-backend\archived\scraper\bitfinex_docs.py:121:                        logger.warning(f"Använder gammal cache för {section} på grund av nätverksfel")
tradingbot-backend\archived\scraper\bitfinex_docs.py:182:                logger.error(f"Fel vid parsing av endpoint: {e}")
tradingbot-backend\archived\scraper\bitfinex_docs.py:382:    logger.info("Hämtar Bitfinex API-dokumentation...")
tradingbot-backend\archived\scraper\bitfinex_docs.py:390:    logger.info(f"Dokumentationssammanfattning: {json.dumps(summary, indent=2)}")
tradingbot-backend\archived\scraper\bitfinex_docs.py:393:    logger.info("Exempel på ordertyper:")
tradingbot-backend\archived\scraper\bitfinex_docs.py:395:        logger.info(f"  {order_type}: {info['description']}")
tradingbot-backend\archived\scraper\bitfinex_docs.py:396:        logger.info(f"    Krävda parametrar: {', '.join(info['required_params'])}")
tradingbot-backend\archived\scraper\bitfinex_docs.py:398:    logger.info("Exempel på paper trading symboler:")
tradingbot-backend\archived\scraper\bitfinex_docs.py:400:        logger.info(f"  {symbol['symbol']}")
tradingbot-backend\archived\scraper\bitfinex_docs.py:402:    logger.info("Skrapning av dokumentation slutförd.")
tradingbot-backend\archived\scraper\bitfinex_docs_parser.py:2:import logging
tradingbot-backend\archived\scraper\bitfinex_docs_parser.py:8:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\bitfinex_docs_parser.py:9:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\bitfinex_docs_parser.py:205:        logger.info(f"Sparade {category}/{name}.json")
tradingbot-backend\archived\scraper\bitfinex_docs_parser.py:237:                    logger.error(f"Fel vid indexering av {file}: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_docs_parser.py:249:        logger.info("Skapade docs/index.json")
tradingbot-backend\archived\scraper\bitfinex_docs_parser.py:259:            logger.info(f"Bearbetar {file_path}")
tradingbot-backend\archived\scraper\bitfinex_docs_parser.py:271:                logger.warning(f"Inga JSON-objekt hittades i {file_path}")
tradingbot-backend\archived\scraper\bitfinex_docs_parser.py:295:            logger.error(f"Fel vid bearbetning av {file_path}: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_docs_parser.py:312:            logger.info("Dokumentationsextrahering slutförd!")
tradingbot-backend\archived\scraper\bitfinex_docs_parser.py:315:            logger.error(f"Fel vid bearbetning av filer: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:2:import logging
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:11:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:12:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:114:            logger.error(f"Fel vid parsning av sektion: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:167:                logger.error(f"Fel vid extrahering av endpoint: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:228:                logger.error(f"Fel vid extrahering av parameter: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:273:            logger.error(f"Fel vid extrahering av svar: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:303:                        logger.error(f"Fel vid extrahering av kod: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:310:                logger.error(f"Fel vid extrahering av exempel: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:323:            logger.info(f"Bearbetar {file_path}")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:342:            logger.info(f"Sparade parsad information till {output_path}")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:345:            logger.error(f"Fel vid bearbetning av {file_path}: {str(e)}")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:360:            logger.info("HTML-parsning slutförd!")
tradingbot-backend\archived\scraper\bitfinex_html_parser.py:363:            logger.error(f"Fel vid bearbetning av filer: {str(e)}")
tradingbot-backend\archived\scraper\comment_api_extractor.py:2:import logging
tradingbot-backend\archived\scraper\comment_api_extractor.py:11:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\comment_api_extractor.py:12:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\comment_api_extractor.py:214:        logger.info(f"Sparade {category}/{subcategory}/{filename}")
tradingbot-backend\archived\scraper\comment_api_extractor.py:231:        logger.info("Skapade index.json")
tradingbot-backend\archived\scraper\comment_api_extractor.py:262:                    logger.error(f"Fel vid indexering av {file}: {str(e)}")
tradingbot-backend\archived\scraper\comment_api_extractor.py:277:            logger.info(f"Bearbetar {file_path}")
tradingbot-backend\archived\scraper\comment_api_extractor.py:292:                logger.warning(f"Inga endpoints hittades i {file_path}")
tradingbot-backend\archived\scraper\comment_api_extractor.py:304:            logger.error(f"Fel vid bearbetning av {file_path}: {str(e)}")
tradingbot-backend\archived\scraper\comment_api_extractor.py:325:            logger.info("API-extrahering slutförd!")
tradingbot-backend\archived\scraper\comment_api_extractor.py:328:            logger.error(f"Fel vid bearbetning av filer: {str(e)}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:2:import logging
tradingbot-backend\archived\scraper\doc_api_extractor.py:11:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\doc_api_extractor.py:12:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\doc_api_extractor.py:124:            logger.error(f"Fel vid extrahering av endpoint från kod: {str(e)}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:161:            logger.error(f"Fel vid extrahering av endpoint från text: {str(e)}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:218:            logger.error(f"Fel vid extrahering av parametrar från kod: {str(e)}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:246:            logger.error(f"Fel vid extrahering av parametrar från text: {str(e)}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:271:            logger.error(f"Fel vid extrahering av svar från kod: {str(e)}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:297:            logger.error(f"Fel vid extrahering av svar från text: {str(e)}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:313:            logger.error(f"Fel vid extrahering av svarsexempel: {str(e)}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:377:        logger.info(f"Sparade {category}/{subcategory}/{filename}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:394:        logger.info("Skapade index.json")
tradingbot-backend\archived\scraper\doc_api_extractor.py:426:                    logger.error(f"Fel vid indexering av {file}: {str(e)}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:441:            logger.info(f"Bearbetar {file_path}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:456:                logger.warning(f"Inga endpoints hittades i {file_path}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:468:            logger.error(f"Fel vid bearbetning av {file_path}: {str(e)}")
tradingbot-backend\archived\scraper\doc_api_extractor.py:489:            logger.info("API-extrahering slutförd!")
tradingbot-backend\archived\scraper\doc_api_extractor.py:492:            logger.error(f"Fel vid bearbetning av filer: {str(e)}")
tradingbot-backend\archived\scraper\enhanced_json_extractor.py:3:import logging
tradingbot-backend\archived\scraper\enhanced_json_extractor.py:12:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\enhanced_json_extractor.py:13:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\enhanced_json_extractor.py:280:        logger.info(f"Sparade {category}/{filename}")
tradingbot-backend\archived\scraper\enhanced_json_extractor.py:305:                    logger.error(f"Fel vid indexering av {file_path}: {e}")
tradingbot-backend\archived\scraper\enhanced_json_extractor.py:312:        logger.info("Skapade index.json")
tradingbot-backend\archived\scraper\enhanced_json_extractor.py:322:            logger.info(f"Bearbetar {file_path}")
tradingbot-backend\archived\scraper\enhanced_json_extractor.py:331:                logger.warning(f"Inga JSON-objekt hittades i {file_path}")
tradingbot-backend\archived\scraper\enhanced_json_extractor.py:353:            logger.error(f"Fel vid bearbetning av {file_path}: {e}")
tradingbot-backend\archived\scraper\enhanced_json_extractor.py:372:            logger.info("Bearbetning slutförd!")
tradingbot-backend\archived\scraper\enhanced_json_extractor.py:375:            logger.error(f"Fel vid bearbetning av filer: {e}")
tradingbot-backend\archived\scraper\html_api_extractor.py:2:import logging
tradingbot-backend\archived\scraper\html_api_extractor.py:11:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\html_api_extractor.py:12:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\html_api_extractor.py:124:            logger.error(f"Fel vid extrahering av endpoint: {str(e)}")
tradingbot-backend\archived\scraper\html_api_extractor.py:171:            logger.error(f"Fel vid extrahering av endpoint från text: {str(e)}")
tradingbot-backend\archived\scraper\html_api_extractor.py:260:                logger.error(f"Fel vid extrahering av parameter: {str(e)}")
tradingbot-backend\archived\scraper\html_api_extractor.py:305:            logger.error(f"Fel vid extrahering av svar: {str(e)}")
tradingbot-backend\archived\scraper\html_api_extractor.py:351:                logger.error(f"Fel vid extrahering av exempel: {str(e)}")
tradingbot-backend\archived\scraper\html_api_extractor.py:417:        logger.info(f"Sparade {category}/{subcategory}/{filename}")
tradingbot-backend\archived\scraper\html_api_extractor.py:434:        logger.info("Skapade index.json")
tradingbot-backend\archived\scraper\html_api_extractor.py:465:                    logger.error(f"Fel vid indexering av {file}: {str(e)}")
tradingbot-backend\archived\scraper\html_api_extractor.py:480:            logger.info(f"Bearbetar {file_path}")
tradingbot-backend\archived\scraper\html_api_extractor.py:495:                logger.warning(f"Inga endpoints hittades i {file_path}")
tradingbot-backend\archived\scraper\html_api_extractor.py:507:            logger.error(f"Fel vid bearbetning av {file_path}: {str(e)}")
tradingbot-backend\archived\scraper\html_api_extractor.py:528:            logger.info("API-extrahering slutförd!")
tradingbot-backend\archived\scraper\html_api_extractor.py:531:            logger.error(f"Fel vid bearbetning av filer: {str(e)}")
tradingbot-backend\archived\scraper\html_structure_analyzer.py:2:import logging
tradingbot-backend\archived\scraper\html_structure_analyzer.py:10:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\html_structure_analyzer.py:11:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\html_structure_analyzer.py:282:            logger.info(f"Bearbetar {file_path}")
tradingbot-backend\archived\scraper\html_structure_analyzer.py:298:                logger.info(f"Sparade analys till {output_path}")
tradingbot-backend\archived\scraper\html_structure_analyzer.py:300:                logger.warning(f"Ingen HTML hittades i {file_path}")
tradingbot-backend\archived\scraper\html_structure_analyzer.py:303:            logger.error(f"Fel vid bearbetning av {file_path}: {str(e)}")
tradingbot-backend\archived\scraper\html_structure_analyzer.py:319:            logger.info("HTML-analys slutförd!")
tradingbot-backend\archived\scraper\html_structure_analyzer.py:322:            logger.error(f"Fel vid bearbetning av filer: {str(e)}")
tradingbot-backend\archived\scraper\json_extractor.py:3:import logging
tradingbot-backend\archived\scraper\json_extractor.py:11:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\json_extractor.py:12:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\json_extractor.py:142:                    logger.debug(f"Skipping non-meaningful JSON: {json_str[:100]}...")
tradingbot-backend\archived\scraper\json_extractor.py:145:                logger.debug(f"Failed to parse JSON: {str(e)}")
tradingbot-backend\archived\scraper\json_extractor.py:193:        logger.info(f"Saved JSON to {output_path}")
tradingbot-backend\archived\scraper\json_extractor.py:207:            logger.info(f"Processing file: {file_path}")
tradingbot-backend\archived\scraper\json_extractor.py:217:                        logger.info(f"Found valid JSON in {filename}")
tradingbot-backend\archived\scraper\json_extractor.py:222:                        logger.info(f"Skipping non-meaningful JSON in {filename}")
tradingbot-backend\archived\scraper\json_extractor.py:225:                    logger.warning(f"Failed to parse JSON file {filename}: {str(e)}")
tradingbot-backend\archived\scraper\json_extractor.py:227:                    logger.info("Trying to extract JSON from file content...")
tradingbot-backend\archived\scraper\json_extractor.py:233:                logger.info(f"Found {len(json_objects)} JSON objects/arrays in {filename}")
tradingbot-backend\archived\scraper\json_extractor.py:246:            logger.error(f"Error processing {filename}: {str(e)}")
tradingbot-backend\archived\scraper\json_extractor.py:272:            logger.info(f"Cleaned up {self.output_dir}")
tradingbot-backend\archived\scraper\json_finder.py:3:import logging
tradingbot-backend\archived\scraper\json_finder.py:11:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\json_finder.py:12:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\json_finder.py:206:            logger.info(f"Bearbetar {file_path}")
tradingbot-backend\archived\scraper\json_finder.py:239:                logger.info(f"Sparade {category}/{filename}")
tradingbot-backend\archived\scraper\json_finder.py:242:            logger.error(f"Fel vid bearbetning av {file_path}: {str(e)}")
tradingbot-backend\archived\scraper\json_finder.py:274:                    logger.error(f"Fel vid indexering av {file}: {str(e)}")
tradingbot-backend\archived\scraper\json_finder.py:286:        logger.info("Skapade index.json")
tradingbot-backend\archived\scraper\json_finder.py:304:            logger.info("JSON-extrahering slutförd!")
tradingbot-backend\archived\scraper\json_finder.py:307:            logger.error(f"Fel vid bearbetning av filer: {str(e)}")
tradingbot-backend\archived\scraper\organize_docs.py:2:import logging
tradingbot-backend\archived\scraper\organize_docs.py:11:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\organize_docs.py:12:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\organize_docs.py:49:                logger.error(f"Fel vid läsning av {file}: {str(e)}")
tradingbot-backend\archived\scraper\organize_docs.py:119:            logger.info(f"Sparade {len(symbols)} symboler i {filename}")
tradingbot-backend\archived\scraper\organize_docs.py:226:            logger.error(f"Fel vid extrahering av endpoint: {str(e)}")
tradingbot-backend\archived\scraper\organize_docs.py:277:                logger.error(f"Fel vid extrahering av parameter: {str(e)}")
tradingbot-backend\archived\scraper\organize_docs.py:322:            logger.error(f"Fel vid extrahering av svar: {str(e)}")
tradingbot-backend\archived\scraper\organize_docs.py:334:            logger.info(f"Bearbetar {file_path}")
tradingbot-backend\archived\scraper\organize_docs.py:349:                logger.warning(f"Inga endpoints hittades i {file_path}")
tradingbot-backend\archived\scraper\organize_docs.py:357:            logger.error(f"Fel vid bearbetning av {file_path}: {str(e)}")
tradingbot-backend\archived\scraper\organize_docs.py:395:        logger.info(f"Sparade endpoint från {source} till {filepath}")
tradingbot-backend\archived\scraper\organize_docs.py:414:        logger.info("Skapade index.json")
tradingbot-backend\archived\scraper\organize_docs.py:445:                    logger.error(f"Fel vid indexering av {file}: {str(e)}")
tradingbot-backend\archived\scraper\organize_docs.py:468:                logger.error(f"Fel vid indexering av {file}: {str(e)}")
tradingbot-backend\archived\scraper\organize_docs.py:487:                logger.error(f"Fel vid indexering av {file}: {str(e)}")
tradingbot-backend\archived\scraper\organize_docs.py:526:            logger.info("Dokumentationsorganisering slutförd!")
tradingbot-backend\archived\scraper\organize_docs.py:529:            logger.error(f"Fel vid organisering av dokumentation: {str(e)}")
tradingbot-backend\archived\scraper\symbol_organizer.py:2:import logging
tradingbot-backend\archived\scraper\symbol_organizer.py:7:logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
tradingbot-backend\archived\scraper\symbol_organizer.py:8:logger = logging.getLogger(__name__)
tradingbot-backend\archived\scraper\symbol_organizer.py:149:            logger.info(f"Sparade {len(symbols)} symboler i {filename}")
tradingbot-backend\archived\scraper\symbol_organizer.py:193:        logger.info("Skapade symbols/overview.json")
tradingbot-backend\config\settings.py:220:    # Probability feature logging (för insyn/debugg)
tradingbot-backend\indicators\atr.py:29:        logger.warning(
tradingbot-backend\indicators\atr.py:49:    logger.debug(f"ATR beräknad: {atr_value:.4f} (period: {period})")
tradingbot-backend\indicators\ema.py:28:        logger.warning(f"Otillräcklig data för EMA-beräkning. Kräver {period}, fick {len(prices)}")
tradingbot-backend\indicators\ema.py:34:    logger.debug(f"EMA beräknad: {ema_value:.4f} (period: {period})")
tradingbot-backend\indicators\ema.py:78:    logger.debug(f"EMA Z-score beräknad för {len(close)} datapunkter")
tradingbot-backend\indicators\rsi.py:28:        logger.debug(
tradingbot-backend\indicators\rsi.py:49:    logger.debug(f"RSI beräknad: {rsi_value:.2f} (period: {period})")
tradingbot-backend\rest\active_orders.py:38:                logger.info("BITFINEX_API_KEY/SECRET saknas – returnerar tom lista för aktiva ordrar")
tradingbot-backend\rest\active_orders.py:46:                logger.info(f"🌐 REST API: Hämtar aktiva ordrar från {self.base_url}/{endpoint}")
tradingbot-backend\rest\active_orders.py:56:                    logger.warning(f"Bitfinex svarade {status} vid hämtning av aktiva ordrar – returnerar tom lista")
tradingbot-backend\rest\active_orders.py:60:                logger.info(f"✅ REST API: Hämtade {len(orders_data)} aktiva ordrar")
tradingbot-backend\rest\active_orders.py:67:            logger.error(f"Fel vid hämtning av aktiva ordrar: {e}")
tradingbot-backend\rest\active_orders.py:184:                logger.info(f"🌐 REST API: Uppdaterar order {order_id}")
tradingbot-backend\rest\active_orders.py:189:                logger.info(f"✅ REST API: Order {order_id} uppdaterad framgångsrikt")
tradingbot-backend\rest\active_orders.py:198:            logger.error(f"Fel vid uppdatering av order: {e}")
tradingbot-backend\rest\active_orders.py:213:                logger.info("🌐 REST API: Avbryter alla ordrar")
tradingbot-backend\rest\active_orders.py:218:                    logger.info("✅ REST API: Alla ordrar avbrutna framgångsrikt")
tradingbot-backend\rest\active_orders.py:226:                        logger.warning(
tradingbot-backend\rest\active_orders.py:242:                        logger.info(f"🌐 REST API: Fallback – avbryter order {order.id}")
tradingbot-backend\rest\active_orders.py:251:                        logger.error(f"Fel vid avbrytning av order {order.id}: {ex}")
tradingbot-backend\rest\active_orders.py:262:            logger.error(f"Fel vid avbrytning av alla ordrar: {e}")
tradingbot-backend\rest\active_orders.py:295:                        logger.info(f"🌐 REST API: Avbryter order {order.id} för {symbol}")
tradingbot-backend\rest\active_orders.py:300:                        logger.info(f"✅ REST API: Order {order.id} avbruten framgångsrikt")
tradingbot-backend\rest\active_orders.py:304:                    logger.error(f"Fel vid avbrytning av order {order.id}: {e}")
tradingbot-backend\rest\active_orders.py:314:            logger.error(f"Fel vid avbrytning av ordrar för {symbol}: {e}")
tradingbot-backend\rest\auth.py:25:logger.info(
tradingbot-backend\rest\auth.py:29:logger.info(
tradingbot-backend\rest\auth.py:85:            logger.error(error_msg)
tradingbot-backend\rest\auth.py:135:        logger.info(f"🌐 REST API: Lägger order på {url}")
tradingbot-backend\rest\auth.py:136:        logger.info(f"📋 Order data: {bitfinex_order}")
tradingbot-backend\rest\auth.py:145:        logger.debug("🔍 DEBUG: API Key is %s", "set" if settings.BITFINEX_API_KEY else "not set")
tradingbot-backend\rest\auth.py:146:        logger.debug(
tradingbot-backend\rest\auth.py:151:        logger.debug("🔍 DEBUG: Headers present: %d", len(headers or {}))
tradingbot-backend\rest\auth.py:152:        logger.debug("🔍 DEBUG: Payload: %s", bitfinex_order)
tradingbot-backend\rest\auth.py:190:                            logger.warning(
tradingbot-backend\rest\auth.py:210:            logger.debug("🔍 DEBUG: Response Status: %s", response.status_code)
tradingbot-backend\rest\auth.py:211:            logger.debug("🔍 DEBUG: Response Headers: %s", response.headers)
tradingbot-backend\rest\auth.py:212:            logger.debug("🔍 DEBUG: Response Text: %s", response.text)
tradingbot-backend\rest\auth.py:216:                logger.error("Bitfinex API Error: %s", response.status_code)
tradingbot-backend\rest\auth.py:218:                logger.debug("Response Headers: %s", response.headers)
tradingbot-backend\rest\auth.py:219:                logger.debug("Response Text: %s", response.text)
tradingbot-backend\rest\auth.py:225:            logger.info(f"✅ REST API: Order lagd framgångsrikt: {result}")
tradingbot-backend\rest\auth.py:238:        logger.error(error_msg)
tradingbot-backend\rest\auth.py:257:            logger.error(error_msg)
tradingbot-backend\rest\auth.py:267:        logger.info(f"🌐 REST API: Stänger order på {url}")
tradingbot-backend\rest\auth.py:268:        logger.info(f"📋 Cancel data: {bitfinex_cancel}")
tradingbot-backend\rest\auth.py:302:            logger.info(f"🔍 DEBUG: Response Status: {response.status_code}")
tradingbot-backend\rest\auth.py:303:            logger.info(f"🔍 DEBUG: Response Text: {response.text}")
tradingbot-backend\rest\auth.py:306:                logger.error(f"Bitfinex API Error: {response.status_code}")
tradingbot-backend\rest\auth.py:307:                logger.error(f"Response Text: {response.text}")
tradingbot-backend\rest\auth.py:313:            logger.info(f"✅ REST API: Order stängd framgångsrikt: {result}")
tradingbot-backend\rest\auth.py:318:        logger.error(error_msg)
tradingbot-backend\rest\debug_routes.py:61:        logger.error(f"Fel vid task dump: {e}")
tradingbot-backend\rest\debug_routes.py:93:        logger.error(f"Fel vid thread dump: {e}")
tradingbot-backend\rest\debug_routes.py:121:        logger.error(f"Fel vid rate limiter dump: {e}")
tradingbot-backend\rest\debug_routes.py:140:        logger.error(f"Fel vid market data dump: {e}")
tradingbot-backend\rest\debug_routes.py:153:        logger.error(f"Fel vid risk guards dump: {e}")
tradingbot-backend\rest\debug_routes.py:172:        logger.error(f"Fel vid WebSocket dump: {e}")
tradingbot-backend\rest\funding.py:55:                logger.info(
tradingbot-backend\rest\funding.py:66:            logger.error("Transfer error: %s", e)
tradingbot-backend\rest\funding.py:102:                logger.info("🌐 REST API: Movements fetch (%s)", currency or "all")
tradingbot-backend\rest\funding.py:108:            logger.error("Movements error: %s", e)
tradingbot-backend\rest\margin.py:123:            logger.error(f"Fel vid konvertering av v1 margin data: {e}")
tradingbot-backend\rest\margin.py:144:                    logger.info(f"🌐 REST API: Försöker hämta margin-info från {self.base_url}/{endpoint}")
tradingbot-backend\rest\margin.py:158:            logger.info("✅ REST API: Hämtade margin-information (base) från v2 API")
tradingbot-backend\rest\margin.py:168:                logger.warning(
tradingbot-backend\rest\margin.py:186:                        logger.info("✅ REST API: Hämtade margin-information från v1 API")
tradingbot-backend\rest\margin.py:193:                    logger.error(f"❌ v1 margin API misslyckades: {e1}")
tradingbot-backend\rest\margin.py:204:                logger.error(f"❌ v2 margin API fel: {e}")
tradingbot-backend\rest\margin.py:234:            logger.error(f"Fel vid hämtning av margin-begränsningar: {e}")
tradingbot-backend\rest\margin.py:266:                logger.info(f"🌐 REST API: Hämta margin-info (symbol) från {self.base_url}/{endpoint}")
tradingbot-backend\rest\margin.py:291:            logger.debug("Margin sym v2 misslyckades: %s", e)
tradingbot-backend\rest\margin.py:399:            logger.error(f"Fel vid symbol margin status: {e}")
tradingbot-backend\rest\margin.py:435:                    logger.debug(f"📋 Använder cached margin-status för {eff}")
tradingbot-backend\rest\margin.py:472:                logger.warning(f"⚠️ WS batch margin-status misslyckades: {e}")
tradingbot-backend\rest\margin.py:477:                logger.info(f"🔄 Batch-hämtar margin-status för {len(rest_symbols)} symboler via REST")
tradingbot-backend\rest\margin.py:513:                    logger.warning(f"⚠️ REST batch margin-status misslyckades: {e}")
tradingbot-backend\rest\margin.py:531:            logger.info(f"✅ Batch margin-status klar: {len(results)}/{len(symbols)} symboler")
tradingbot-backend\rest\margin.py:535:            logger.error(f"❌ Batch margin-status fel: {e}")
tradingbot-backend\rest\order_history.py:281:                    logger.warning(f"CB: {endpoint} stängd i {wait:.1f}s")
tradingbot-backend\rest\order_history.py:320:                                logger.error(f"🚨 Nonce-fel detekterat: {error_data}")
tradingbot-backend\rest\order_history.py:335:                                logger.warning(f"CB öppnad för {endpoint} i {cooldown:.1f}s")
tradingbot-backend\rest\order_history.py:388:                logger.error(
tradingbot-backend\rest\order_history.py:429:            logger.info(f"🌐 REST API: Hämtar orderhistorik från {self.base_url}/{endpoint}")
tradingbot-backend\rest\order_history.py:432:            logger.info(f"✅ REST API: Hämtade {len(orders_data)} historiska ordrar")
tradingbot-backend\rest\order_history.py:438:            logger.error(f"Fel vid hämtning av orderhistorik: {e}")
tradingbot-backend\rest\order_history.py:453:            logger.info(f"🌐 REST API: Hämtar trades för order {order_id}")
tradingbot-backend\rest\order_history.py:456:            logger.info(f"✅ REST API: Hämtade {len(trades_data)} trades för order {order_id}")
tradingbot-backend\rest\order_history.py:462:            logger.error(f"Fel vid hämtning av trades för order {order_id}: {e}")
tradingbot-backend\rest\order_history.py:482:            logger.info(f"🌐 REST API: Hämtar handelshistorik från {self.base_url}/{endpoint}")
tradingbot-backend\rest\order_history.py:485:            logger.info(f"✅ REST API: Hämtade {len(trades_data)} historiska trades")
tradingbot-backend\rest\order_history.py:491:            logger.error(f"Fel vid hämtning av handelshistorik: {e}")
tradingbot-backend\rest\order_history.py:511:            logger.info(f"🌐 REST API: Hämtar ledger från {self.base_url}/{endpoint}")
tradingbot-backend\rest\order_history.py:514:            logger.info(f"✅ REST API: Hämtade {len(ledgers_data)} ledger-poster")
tradingbot-backend\rest\order_history.py:520:            logger.error(f"Fel vid hämtning av ledger: {e}")
tradingbot-backend\rest\order_validator.py:38:            logger.info("OrderValidator: scraper inaktiv – använder fallback-data")
tradingbot-backend\rest\order_validator.py:44:            logger.info(f"Laddade {len(self.order_types)} ordertyper")
tradingbot-backend\rest\order_validator.py:49:            logger.info(f"Laddade {len(self.symbols)} symboler")
tradingbot-backend\rest\order_validator.py:54:            logger.info(f"Laddade {len(self.paper_symbols)} paper trading symboler")
tradingbot-backend\rest\order_validator.py:57:            logger.warning(f"OrderValidator: kunde inte ladda scraper-data, fallback används: {e}")
tradingbot-backend\rest\order_validator.py:64:        logger.info("Använder fallback-data för ordervalidering")
tradingbot-backend\rest\order_validator.py:191:            logger.warning(f"Symbol {symbol} börjar med 'tTEST' men är inte registrerad som paper trading symbol")
tradingbot-backend\rest\positions.py:91:                logger.info("BITFINEX_API_KEY/SECRET saknas – returnerar tom positionslista")
tradingbot-backend\rest\positions.py:99:                    logger.warning(f"CB: {endpoint} stängd i {wait:.1f}s")
tradingbot-backend\rest\positions.py:108:            logger.info(f"🌐 REST API: Hämtar positioner från {self.base_url}/{endpoint}")
tradingbot-backend\rest\positions.py:130:                        logger.warning(
tradingbot-backend\rest\positions.py:152:                            logger.warning(f"CB öppnad för {endpoint} i {cooldown:.1f}s")
tradingbot-backend\rest\positions.py:166:                    logger.warning(f"Bitfinex server busy för positions (status {response.status_code})")
tradingbot-backend\rest\positions.py:190:                    logger.error(f"Serverfel vid positionshämtning ({e.response.status_code}), returnerar tom lista")
tradingbot-backend\rest\positions.py:194:            logger.info(f"✅ REST API: Hämtade {len(positions_data)} positioner")
tradingbot-backend\rest\positions.py:199:            logger.error(f"Fel vid hämtning av positioner: {e}")
tradingbot-backend\rest\positions.py:273:                        logger.info(
tradingbot-backend\rest\positions.py:297:                logger.info(f"✅ REST API: Reduce-only order skickad för {symbol}")
tradingbot-backend\rest\positions.py:305:            logger.error(f"Fel vid stängning av position (HTTP): {e}")
tradingbot-backend\rest\positions.py:308:            logger.error(f"Fel vid stängning av position: {e}")
tradingbot-backend\rest\positions_history.py:116:                logger.info(f"🌐 REST API: Hämtar positionshistorik från {self.base_url}/{endpoint}")
tradingbot-backend\rest\positions_history.py:121:                logger.info(f"✅ REST API: Hämtade {len(positions_data)} historiska positioner")
tradingbot-backend\rest\positions_history.py:127:            logger.error(f"Fel vid hämtning av positionshistorik: {e}")
tradingbot-backend\rest\positions_history.py:142:                logger.info(f"🌐 REST API: Hämtar positionsögonblicksbild från {self.base_url}/{endpoint}")
tradingbot-backend\rest\positions_history.py:147:                logger.info(f"✅ REST API: Hämtade {len(positions_data)} positioner i ögonblicksbilden")
tradingbot-backend\rest\positions_history.py:153:            logger.error(f"Fel vid hämtning av positionsögonblicksbild: {e}")
tradingbot-backend\rest\positions_history.py:190:                logger.info(f"🌐 REST API: Hämtar positionsrevision för {symbol} från {self.base_url}/{endpoint}")
tradingbot-backend\rest\positions_history.py:195:                logger.info(f"✅ REST API: Hämtade {len(positions_data)} positionsrevisioner")
tradingbot-backend\rest\positions_history.py:201:            logger.error(f"Fel vid hämtning av positionsrevision: {e}")
tradingbot-backend\rest\positions_history.py:220:                logger.info(f"🌐 REST API: Gör anspråk på position {position_id}")
tradingbot-backend\rest\positions_history.py:225:                logger.info(f"✅ REST API: Anspråk på position {position_id} framgångsrikt")
tradingbot-backend\rest\positions_history.py:230:            logger.error(f"Fel vid anspråk på position: {e}")
tradingbot-backend\rest\positions_history.py:250:                logger.info(f"🌐 REST API: Uppdaterar finansieringstyp för position {symbol} till {funding_type}")
tradingbot-backend\rest\positions_history.py:255:                logger.info(f"✅ REST API: Finansieringstyp för position {symbol} uppdaterad framgångsrikt")
tradingbot-backend\rest\positions_history.py:260:            logger.error(f"Fel vid uppdatering av finansieringstyp: {e}")
tradingbot-backend\rest\routes.py:256:        logger.exception(f"prob/preview error: {e}")
tradingbot-backend\rest\routes.py:477:        logger.exception(f"prob/trade error: {e}")
tradingbot-backend\rest\routes.py:515:            logger.debug(
tradingbot-backend\rest\routes.py:525:            logger.debug("Mottog orderförfrågan (kunde inte serialisera)")
tradingbot-backend\rest\routes.py:570:                logger.warning(f"Order blockeras av riskkontroll: {decision.reason}")
tradingbot-backend\rest\routes.py:613:            logger.error(f"Fel vid orderläggning (REST): {result['error']}")
tradingbot-backend\rest\routes.py:709:                logger.warning(f"WS fallback misslyckades: {_wse}")
tradingbot-backend\rest\routes.py:739:        logger.info(f"Order framgångsrikt lagd: {result}")
tradingbot-backend\rest\routes.py:755:        logger.exception(f"Oväntat fel vid orderläggning: {e}")
tradingbot-backend\rest\routes.py:765:        logger.info(f"Mottog avbrottsförfrågan för order: {cancel_request.order_id}")
tradingbot-backend\rest\routes.py:783:            logger.error(f"Fel vid avbrytning av order: {result['error']}")
tradingbot-backend\rest\routes.py:795:        logger.info(f"Order framgångsrikt avbruten: {result}")
tradingbot-backend\rest\routes.py:804:        logger.exception(f"Oväntat fel vid avbrytning av order: {e}")
tradingbot-backend\rest\routes.py:814:        logger.info(f"Mottog uppdateringsförfrågan för order: {update_request.order_id}")
tradingbot-backend\rest\routes.py:824:            logger.info(f"Order framgångsrikt uppdaterad: {result}")
tradingbot-backend\rest\routes.py:832:            logger.warning(f"REST update misslyckades, försöker WS fallback: {rest_err}")
tradingbot-backend\rest\routes.py:851:                logger.exception(f"WS fallback update fel: {_wse}")
tradingbot-backend\rest\routes.py:855:        logger.exception(f"Oväntat fel vid uppdatering av order: {e}")
tradingbot-backend\rest\routes.py:875:        logger.exception(f"WS order update fel: {e}")
tradingbot-backend\rest\routes.py:889:        logger.exception(f"WS cancel-multi fel: {e}")
tradingbot-backend\rest\routes.py:903:        logger.exception(f"WS ops fel: {e}")
tradingbot-backend\rest\routes.py:913:        logger.info("Mottog förfrågan om att avbryta alla ordrar")
tradingbot-backend\rest\routes.py:936:        logger.info("Alla ordrar framgångsrikt avbrutna")
tradingbot-backend\rest\routes.py:941:        logger.exception(f"Oväntat fel vid avbrytning av alla ordrar: {e}")
tradingbot-backend\rest\routes.py:951:        logger.info(f"Mottog förfrågan om att avbryta alla ordrar för symbol: {symbol}")
tradingbot-backend\rest\routes.py:959:        logger.info(f"Ordrar för {symbol} framgångsrikt avbrutna")
tradingbot-backend\rest\routes.py:964:        logger.exception(f"Oväntat fel vid avbrytning av ordrar för {symbol}: {e}")
tradingbot-backend\rest\routes.py:999:        logger.exception(f"Fel vid hämtning av aktiva ordrar för {symbol}: {e}")
tradingbot-backend\rest\routes.py:1023:        logger.exception(f"Fel vid hämtning av order {order_id}: {e}")
tradingbot-backend\rest\routes.py:1041:        logger.exception(f"Fel vid hämtning av plånböcker: {e}")
tradingbot-backend\rest\routes.py:1068:        logger.exception(f"Fel vid transfer: {e}")
tradingbot-backend\rest\routes.py:1092:        logger.exception(f"Fel vid movements: {e}")
tradingbot-backend\rest\routes.py:1133:        logger.exception(f"Fel vid wallets/balance: {e}")
tradingbot-backend\rest\routes.py:1148:        logger.exception(f"Fel vid hämtning av exchange-plånböcker: {e}")
tradingbot-backend\rest\routes.py:1163:        logger.exception(f"Fel vid hämtning av margin-plånböcker: {e}")
tradingbot-backend\rest\routes.py:1178:        logger.exception(f"Fel vid hämtning av funding-plånböcker: {e}")
tradingbot-backend\rest\routes.py:1196:        logger.exception(f"Fel vid hämtning av positioner: {e}")
tradingbot-backend\rest\routes.py:1211:        logger.exception(f"Fel vid hämtning av long-positioner: {e}")
tradingbot-backend\rest\routes.py:1226:        logger.exception(f"Fel vid hämtning av short-positioner: {e}")
tradingbot-backend\rest\routes.py:1241:        logger.exception(f"Fel vid stängning av position: {e}")
tradingbot-backend\rest\routes.py:1259:        logger.exception(f"Fel vid hämtning av margin-information: {e}")
tradingbot-backend\rest\routes.py:1274:        logger.exception(f"Fel vid hämtning av margin-status: {e}")
tradingbot-backend\rest\routes.py:1302:        logger.exception(f"Fel vid hämtning av margin-status (symbol): {e}")
tradingbot-backend\rest\routes.py:1317:        logger.exception(f"Fel vid hämtning av hävstång: {e}")
tradingbot-backend\rest\routes.py:1340:        logger.exception(f"Fel vid hämtning av orderhistorik: {e}")
tradingbot-backend\rest\routes.py:1355:        logger.exception(f"Fel vid hämtning av trades för order {order_id}: {e}")
tradingbot-backend\rest\routes.py:1370:        logger.warning(f"Fel vid hämtning av handelshistorik: {e}")
tradingbot-backend\rest\routes.py:1386:        logger.warning(f"Fel vid hämtning av ledger: {e}")
tradingbot-backend\rest\routes.py:1427:        logger.exception(safe_log_data(e, "Fel vid generering av WebSocket-token"))
tradingbot-backend\rest\routes.py:1464:                logger.debug(f"📋 Använder cached weighted strategy för {request.symbol}")
tradingbot-backend\rest\routes.py:1486:        logger.exception(f"Fel vid viktad strategiutvärdering: {e}")
tradingbot-backend\rest\routes.py:1515:                logger.debug(f"📋 Använder cached strategy settings för {symbol}")
tradingbot-backend\rest\routes.py:1531:        logger.exception(f"Fel vid hämtning av strategiinställningar: {e}")
tradingbot-backend\rest\routes.py:1558:            logger.debug(f"🗑️ Invalidated cache för {cache_key}")
tradingbot-backend\rest\routes.py:1583:        logger.exception(f"Fel vid uppdatering av strategiinställningar: {e}")
tradingbot-backend\rest\routes.py:1611:            logger.warning(f"Kunde inte läsa strategy_settings.json: {e}")
tradingbot-backend\rest\routes.py:1618:        logger.exception(f"Fel vid hämtning av strategy auto-flaggor: {e}")
tradingbot-backend\rest\routes.py:1641:            logger.warning(f"Kunde inte läsa strategy_settings.json: {e}")
tradingbot-backend\rest\routes.py:1658:        logger.exception(f"Fel vid uppdatering av strategy auto-flaggor: {e}")
tradingbot-backend\rest\routes.py:1862:        logger.exception(f"Fel vid positionsstorleksberäkning: {e}")
tradingbot-backend\rest\routes.py:1875:        logger.exception(f"Fel vid performance: {e}")
tradingbot-backend\rest\routes.py:1900:        logger.exception(f"Fel vid ticker: {e}")
tradingbot-backend\rest\routes.py:1927:        logger.exception(f"Fel vid tickers (batch): {e}")
tradingbot-backend\rest\routes.py:1943:        logger.exception(f"Fel vid platform status: {e}")
tradingbot-backend\rest\routes.py:1959:        logger.exception(f"Fel vid configs symbols: {e}")
tradingbot-backend\rest\routes.py:2025:        logger.exception(f"Fel vid candles: {e}")
tradingbot-backend\rest\routes.py:2040:        logger.exception(f"Fel vid resync: {e}")
tradingbot-backend\rest\routes.py:2058:        logger.exception(f"Health error: {e}")
tradingbot-backend\rest\routes.py:2069:        logger.exception(f"WS pool status error: {e}")
tradingbot-backend\rest\routes.py:2103:        logger.exception(f"WS subscribe error: {e}")
tradingbot-backend\rest\routes.py:2129:        logger.exception(f"WS unsubscribe error: {e}")
tradingbot-backend\rest\routes.py:2297:        logger.exception(f"prob/predict error: {e}")
tradingbot-backend\rest\routes.py:2320:        logger.exception(f"prob/status error: {e}")
tradingbot-backend\rest\routes.py:2374:        logger.exception(f"prob/validate error: {e}")
tradingbot-backend\rest\routes.py:2430:        logger.exception(f"prob/validate/run error: {e}")
tradingbot-backend\rest\routes.py:2546:            # For logging, reconstruct the actual path
tradingbot-backend\rest\routes.py:2560:        logger.exception(f"prob/retrain/run error: {e}")
tradingbot-backend\rest\routes.py:2622:        logger.exception(f"prob/config get error: {e}")
tradingbot-backend\rest\routes.py:2684:        logger.exception(f"prob/config update error: {e}")
tradingbot-backend\rest\routes.py:2689:async def prob_feature_log(q: ProbFeatureLogQuery, _: bool = Depends(require_auth)):
tradingbot-backend\rest\routes.py:2707:        logger.exception(f"prob/featlog error: {e}")
tradingbot-backend\rest\routes.py:2734:        logger.exception(f"Fel vid symbols: {e}")
tradingbot-backend\rest\routes.py:2745:        logger.exception("Fel vid watchlist")
tradingbot-backend\rest\routes.py:2765:        logger.exception("Backtest fel")
tradingbot-backend\rest\routes.py:2781:        logger.exception(f"Fel vid auto/start: {e}")
tradingbot-backend\rest\routes.py:2792:        logger.exception(f"Fel vid auto/stop: {e}")
tradingbot-backend\rest\routes.py:2805:        logger.exception(f"Fel vid auto/status: {e}")
tradingbot-backend\rest\routes.py:2821:        logger.exception(f"Fel vid auto/stop-all: {e}")
tradingbot-backend\rest\routes.py:2837:                logger.warning(f"Kunde inte starta {s}: {ie}")
tradingbot-backend\rest\routes.py:2842:        logger.exception(f"Fel vid auto/start-batch: {e}")
tradingbot-backend\rest\routes.py:2850:        logger.info(f"Mottog bracket-order: {req.dict()}")
tradingbot-backend\rest\routes.py:2995:        logger.exception(f"Fel vid bracket-order: {e}")
tradingbot-backend\rest\routes.py:3012:        logger.exception(f"Fel vid hämtning av trading windows: {e}")
tradingbot-backend\rest\routes.py:3024:        logger.exception(f"Fel vid paus: {e}")
tradingbot-backend\rest\routes.py:3036:        logger.exception(f"Fel vid resume: {e}")
tradingbot-backend\rest\routes.py:3137:        logger.exception(f"Fel vid performance/detail: {e}")
tradingbot-backend\rest\routes.py:3188:        logger.exception(f"Fel vid runtime config get: {e}")
tradingbot-backend\rest\routes.py:3203:        logger.exception(f"Fel vid runtime config set: {e}")
tradingbot-backend\rest\routes.py:3220:        logger.exception(f"Fel vid uppdatering av max trades: {e}")
tradingbot-backend\rest\routes.py:3237:        logger.exception(f"Fel vid uppdatering av max trades per symbol: {e}")
tradingbot-backend\rest\routes.py:3247:        logger.exception(f"Fel vid hämtning av trade counter: {e}")
tradingbot-backend\rest\routes.py:3265:        logger.exception(f"Fel vid circuit status: {e}")
tradingbot-backend\rest\routes.py:3275:        logger.exception(f"Fel vid circuit reset: {e}")
tradingbot-backend\rest\routes.py:3290:        logger.exception(f"Fel vid circuit config: {e}")
tradingbot-backend\rest\routes.py:3308:        logger.exception(f"Fel vid hämtning av risk guards status: {e}")
tradingbot-backend\rest\routes.py:3327:        logger.exception(f"Fel vid återställning av riskvakt: {e}")
tradingbot-backend\rest\routes.py:3354:        logger.exception(f"Fel vid uppdatering av riskvakt konfiguration: {e}")
tradingbot-backend\rest\routes.py:3427:        logger.exception(f"Fel vid cost-aware backtest: {e}")
tradingbot-backend\rest\routes.py:3450:        logger.exception(f"Fel vid hämtning av default costs: {e}")
tradingbot-backend\rest\routes.py:3469:        logger.exception(f"Fel vid hämtning av regime status: {e}")
tradingbot-backend\rest\routes.py:3488:        logger.exception(f"Fel vid uppdatering av regime konfiguration: {e}")
tradingbot-backend\rest\routes.py:3510:        logger.exception(f"Fel vid uppdatering av regime performance: {e}")
tradingbot-backend\rest\routes.py:3527:        logger.exception(f"Fel vid ablation test: {e}")
tradingbot-backend\rest\routes.py:3541:        logger.exception(f"Fel vid hämtning av aktiva regimer: {e}")
tradingbot-backend\rest\routes.py:3555:        logger.exception(f"Fel vid hämtning av overall health: {e}")
tradingbot-backend\rest\routes.py:3568:        logger.exception(f"Fel vid health check {check_name}: {e}")
tradingbot-backend\rest\routes.py:3584:        logger.exception(f"Fel vid körning av alla health checks: {e}")
tradingbot-backend\rest\routes.py:3600:        logger.exception(f"Fel vid start av health watchdog: {e}")
tradingbot-backend\rest\routes.py:3613:        logger.exception(f"Fel vid stopp av health watchdog: {e}")
tradingbot-backend\rest\routes.py:3627:        logger.exception(f"Fel vid hämtning av JSON optimizer stats: {e}")
tradingbot-backend\rest\routes.py:3640:        logger.exception(f"Fel vid rensning av JSON cache: {e}")
tradingbot-backend\rest\routes.py:3658:        logger.exception(f"Fel vid JSON benchmark: {e}")
tradingbot-backend\rest\routes.py:3678:        logger.exception(f"Fel vid bracket reset: {e}")
tradingbot-backend\rest\routes.py:3732:        logger.exception(f"Fel vid metrics: {e}")
tradingbot-backend\rest\routes.py:3744:        logger.exception("Fel vid metrics summary")
tradingbot-backend\rest\routes.py:3778:        logger.exception("Fel vid metrics acceptance")
tradingbot-backend\rest\routes.py:3795:        logger.exception("Fel vid url-check")
tradingbot-backend\rest\routes.py:3812:        logger.exception("Fel vid triage symbols")
tradingbot-backend\rest\routes.py:3918:        logger.exception(f"MCP execute error: {e}")
tradingbot-backend\rest\routes.py:3945:        logger.exception(safe_log_data(e, "MCP get_token error"))
tradingbot-backend\rest\routes.py:3955:        logger.exception(f"MCP market_ticker error: {e}")
tradingbot-backend\rest\routes.py:3993:        logger.exception(f"MCP run_validation error: {e}")
tradingbot-backend\rest\routes.py:4028:        logger.exception(f"UI capabilities error: {e}")
tradingbot-backend\rest\routes.py:4042:        logger.exception(f"MCP set ws_strategy error: {e}")
tradingbot-backend\rest\routes.py:4052:        logger.exception(f"MCP set validation_warmup error: {e}")
tradingbot-backend\rest\routes.py:4062:        logger.exception(f"MCP set ws_connect_on_start error: {e}")
tradingbot-backend\rest\routes.py:4078:        logger.exception(f"Fel vid cache stats: {e}")
tradingbot-backend\rest\routes.py:4105:        logger.exception(f"Fel vid cache clear: {e}")
tradingbot-backend\rest\routes.py:4121:        logger.exception(f"Fel vid cache backfill: {e}")
tradingbot-backend\rest\routes.py:4133:        logger.exception(f"Fel vid equity: {e}")
tradingbot-backend\rest\routes.py:4144:        logger.exception(f"Fel vid equity snapshot: {e}")
tradingbot-backend\rest\routes.py:4155:        logger.exception(f"Fel vid equity history: {e}")
tradingbot-backend\rest\routes.py:4217:        logger.exception(f"Fel vid set ws-strategy: {e}")
tradingbot-backend\rest\routes.py:4232:        logger.exception(f"Fel vid set validation-warmup: {e}")
tradingbot-backend\rest\routes.py:4247:        logger.exception(f"Fel vid set ws-connect-on-start: {e}")
tradingbot-backend\rest\routes.py:4265:        logger.exception("Fel vid get_template")
tradingbot-backend\rest\routes.py:4276:        logger.exception(f"Fel vid save_template: {e}")
tradingbot-backend\rest\routes.py:4290:        logger.exception(f"Fel vid list_templates (alias): {e}")
tradingbot-backend\rest\routes.py:4306:        logger.exception(f"Fel vid import_templates: {e}")
tradingbot-backend\rest\routes.py:4316:        logger.exception(f"Fel vid export_templates: {e}")
tradingbot-backend\rest\routes.py:4331:        logger.exception("Fel vid delete_template")
tradingbot-backend\rest\routes.py:4342:        logger.exception(f"Fel vid save_template (alias): {e}")
tradingbot-backend\rest\routes.py:4375:        logger.exception(f"Fel vid uppdatering av trading windows: {e}")
tradingbot-backend\rest\routes.py:4385:        logger.exception(f"Fel vid get dry-run: {e}")
tradingbot-backend\rest\routes.py:4406:        logger.exception(f"Fel vid set dry-run: {e}")
tradingbot-backend\rest\routes.py:4416:        logger.exception(f"Fel vid get trading-paused: {e}")
tradingbot-backend\rest\routes.py:4437:        logger.exception(f"Fel vid set trading-paused: {e}")
tradingbot-backend\rest\routes.py:4456:        logger.exception(f"Fel vid get prob-model: {e}")
tradingbot-backend\rest\routes.py:4475:        logger.exception(f"Fel vid set prob-model: {e}")
tradingbot-backend\rest\routes.py:4485:        logger.exception(f"Fel vid get autotrade: {e}")
tradingbot-backend\rest\routes.py:4498:        logger.exception(f"Fel vid set autotrade: {e}")
tradingbot-backend\rest\routes.py:4519:        logger.exception(f"Fel vid hämtning av refresh manager status: {e}")
tradingbot-backend\rest\routes.py:4536:        logger.exception(f"Fel vid force refresh: {e}")
tradingbot-backend\rest\routes.py:4549:        logger.exception(f"Fel vid start av refresh manager: {e}")
tradingbot-backend\rest\routes.py:4562:        logger.exception(f"Fel vid stopp av refresh manager: {e}")
tradingbot-backend\rest\routes.py:4577:        logger.exception(f"Fel vid get scheduler: {e}")
tradingbot-backend\rest\routes.py:4597:        logger.exception(f"Fel vid set scheduler: {e}")
tradingbot-backend\rest\routes.py:4607:    logger.info("🎯 /strategy/regime/all endpoint anropad - ENHETLIG SIGNAL SERVICE")
tradingbot-backend\rest\routes.py:4615:        logger.info("📊 Returnerar enhetlig regime sammanfattning")
tradingbot-backend\rest\routes.py:4619:        logger.error(f"❌ Fel vid hämtning av all regimes: {e}")
tradingbot-backend\rest\routes.py:4635:        logger.info(f"📊 Hämtar live regime data för {len(symbols)} symboler")
tradingbot-backend\rest\routes.py:4675:                logger.warning(f"⚠️ Kunde inte hämta regime för {symbol}: {e}")
tradingbot-backend\rest\routes.py:4681:        logger.error(f"❌ Fel vid hämtning av live symboler, använder fallback: {e}")
tradingbot-backend\rest\routes.py:4740:    logger.info("📊 Returnerar enhanced regim-data med confidence scores")
tradingbot-backend\rest\routes.py:4782:                logger.debug(f"📋 Använder cached regime data för {symbol}")
tradingbot-backend\rest\routes.py:4841:        logger.warning(f"Fel vid regim-detektering för {symbol}: {e}")
tradingbot-backend\rest\routes.py:4862:        logger.exception(f"Fel vid uppdatering av settings från regim: {e}")
tradingbot-backend\rest\routes.py:4890:        logger.error(f"❌ Fel vid start av enhanced auto-trading: {e}")
tradingbot-backend\rest\routes.py:4913:        logger.error(f"❌ Fel vid stopp av enhanced auto-trading: {e}")
tradingbot-backend\rest\routes.py:4927:        logger.exception(f"Fel vid hämtning av unified risk status: {e}")
tradingbot-backend\rest\routes.py:4948:        logger.exception(f"Fel vid risk-evaluering: {e}")
tradingbot-backend\rest\routes.py:4968:        logger.exception(f"Fel vid återställning av riskvakt: {e}")
tradingbot-backend\rest\routes.py:4984:        logger.exception(f"Fel vid återställning av circuit breaker: {e}")
tradingbot-backend\rest\routes.py:5005:        logger.exception(f"Fel vid uppdatering av riskvakt: {e}")
tradingbot-backend\rest\routes.py:5019:        logger.exception(f"Fel vid hämtning av feature flags status: {e}")
tradingbot-backend\rest\routes.py:5036:        logger.exception(f"Fel vid hämtning av feature flags för kategori {category}: {e}")
tradingbot-backend\rest\routes.py:5071:        logger.exception(f"Fel vid uppdatering av feature flag {name}: {e}")
tradingbot-backend\rest\routes.py:5094:        logger.exception(f"Fel vid återställning av feature flag: {e}")
tradingbot-backend\rest\routes.py:5107:        logger.exception(f"Fel vid hämtning av UI capabilities: {e}")
tradingbot-backend\rest\routes.py:5121:        logger.exception(f"Fel vid hämtning av comprehensive observability: {e}")
tradingbot-backend\rest\routes.py:5144:        logger.exception(f"Fel vid hämtning av system observability: {e}")
tradingbot-backend\rest\routes.py:5164:        logger.exception(f"Fel vid hämtning av rate limiter observability: {e}")
tradingbot-backend\rest\routes.py:5186:        logger.exception(f"Fel vid hämtning av exchange observability: {e}")
tradingbot-backend\rest\routes.py:5207:        logger.exception(f"Fel vid hämtning av trading observability: {e}")
tradingbot-backend\rest\routes.py:5238:        logger.exception(f"Fel vid hämtning av comprehensive history: {e}")
tradingbot-backend\rest\routes.py:5259:        logger.exception(f"Fel vid hämtning av trade history: {e}")
tradingbot-backend\rest\routes.py:5287:        logger.exception(f"Fel vid hämtning av ledger history: {e}")
tradingbot-backend\rest\routes.py:5305:        logger.exception(f"Fel vid hämtning av equity history: {e}")
tradingbot-backend\rest\routes.py:5336:        logger.exception(f"Fel vid probability validation: {e}")
tradingbot-backend\rest\routes.py:5370:        logger.exception(f"Fel vid strategy validation: {e}")
tradingbot-backend\rest\routes.py:5408:        logger.exception(f"Fel vid backtest: {e}")
tradingbot-backend\rest\routes.py:5438:        logger.exception(f"Fel vid hämtning av validation history: {e}")
tradingbot-backend\rest\routes.py:5452:        logger.exception(f"Fel vid hämtning av circuit breaker status: {e}")
tradingbot-backend\rest\routes.py:5472:        logger.exception(f"Fel vid registrering av circuit breaker success: {e}")
tradingbot-backend\rest\routes.py:5493:        logger.exception(f"Fel vid registrering av circuit breaker failure: {e}")
tradingbot-backend\rest\routes.py:5519:        logger.exception(f"Fel vid återställning av circuit breaker: {e}")
tradingbot-backend\rest\routes.py:5569:        logger.exception(f"Fel vid registrering av circuit breaker: {e}")
tradingbot-backend\rest\routes.py:5587:        logger.error(f"❌ Fel vid hämtning av enhanced auto-status: {e}")
tradingbot-backend\rest\routes.py:5606:        logger.error(f"❌ Fel vid stopp av all enhanced auto-trading: {e}")
tradingbot-backend\rest\routes.py:5629:        logger.error(f"❌ Fel vid hämtning av performance summary: {e}")
tradingbot-backend\rest\routes.py:5647:        logger.error(f"❌ Fel vid hämtning av symbol performance: {e}")
tradingbot-backend\rest\routes.py:5665:        logger.error(f"❌ Fel vid hämtning av recent trades: {e}")
tradingbot-backend\rest\routes.py:5683:        logger.error(f"❌ Fel vid hämtning av daily stats: {e}")
tradingbot-backend\rest\routes.py:5704:        logger.info(f"📊 Returnerar {signals.total_signals} enhetliga live signals")
tradingbot-backend\rest\routes.py:5708:        logger.error(f"❌ Fel vid hämtning av live signals: {e}")
tradingbot-backend\rest\routes.py:5729:        logger.error(f"❌ Fel vid hämtning av signal för {symbol}: {e}")
tradingbot-backend\rest\routes.py:5747:        logger.info(f"🔄 Genererade {signals.total_signals} nya signals")
tradingbot-backend\rest\routes.py:5751:        logger.error(f"❌ Fel vid refresh av signals: {e}")
tradingbot-backend\rest\routes.py:5773:        logger.error(f"❌ Fel vid hämtning av signal-historik: {e}")
tradingbot-backend\rest\routes.py:5790:            logger.info(f"🧹 Rensade cache för {symbol}: {deleted} rader")
tradingbot-backend\rest\routes.py:5795:            logger.info(f"🧹 Rensade all cache: {deleted} rader")
tradingbot-backend\rest\routes.py:5799:        logger.error(f"❌ Fel vid cache rensning: {e}")
tradingbot-backend\rest\routes.py:5816:        logger.error(f"❌ Fel vid hämtning av cache stats: {e}")
tradingbot-backend\rest\routes.py:5887:        logger.error(f"❌ Fel vid hämtning av prestanda-statistik: {e}")
tradingbot-backend\rest\wallet.py:71:                logger.info("BITFINEX_API_KEY/SECRET saknas – returnerar tom wallet-lista")
tradingbot-backend\rest\wallet.py:79:                    logger.warning(f"CB: {endpoint} stängd i {wait:.1f}s")
tradingbot-backend\rest\wallet.py:88:            logger.info(f"🌐 REST API: Hämtar plånböcker från {self.base_url}/{endpoint}")
tradingbot-backend\rest\wallet.py:109:                        logger.warning(
tradingbot-backend\rest\wallet.py:127:                            logger.error(f"🚨 Nonce-fel i wallets: {error_data}")
tradingbot-backend\rest\wallet.py:148:                            logger.warning(f"CB öppnad för {endpoint} i {cooldown:.1f}s")
tradingbot-backend\rest\wallet.py:162:                    logger.warning(f"Bitfinex server busy för wallets (status {response.status_code})")
tradingbot-backend\rest\wallet.py:185:                    logger.warning(f"Bitfinex svarade {status} vid hämtning av wallets – returnerar tom lista")
tradingbot-backend\rest\wallet.py:189:                logger.info(f"✅ REST API: Hämtade {len(wallets_data)} plånböcker")
tradingbot-backend\rest\wallet.py:195:            logger.error(f"Fel vid hämtning av plånböcker: {e}")
tradingbot-backend\scripts\log_hanging_files.py:7:import logging
tradingbot-backend\scripts\log_hanging_files.py:21:# Konfigurera detaljerad logging
tradingbot-backend\scripts\log_hanging_files.py:22:logging.basicConfig(
tradingbot-backend\scripts\log_hanging_files.py:23:    level=logging.DEBUG,
tradingbot-backend\scripts\log_hanging_files.py:25:    handlers=[logging.StreamHandler(), logging.FileHandler('hanging_files_debug.log')],
tradingbot-backend\scripts\log_hanging_files.py:49:    logger.info("🔍 Börjar analys av kritiska filer för hängningsproblem...")
tradingbot-backend\scripts\log_hanging_files.py:55:            logger.warning(f"⚠️ Fil saknas: {file_path}")
tradingbot-backend\scripts\log_hanging_files.py:58:        logger.info(f"📁 Analyserar: {file_path}")
tradingbot-backend\scripts\log_hanging_files.py:144:                logger.warning(f"🚨 {file_path} - Potentiella problem:")
tradingbot-backend\scripts\log_hanging_files.py:146:                    logger.warning(f"   {issue}")
tradingbot-backend\scripts\log_hanging_files.py:148:                logger.info(f"✅ {file_path} - Inga uppenbara problem")
tradingbot-backend\scripts\log_hanging_files.py:151:            logger.error(f"❌ Fel vid analys av {file_path}: {e}")
tradingbot-backend\scripts\log_hanging_files.py:153:    logger.info("🏁 Filanalys slutförd!")
tradingbot-backend\scripts\log_hanging_files.py:159:    logger.info("🧪 Testar kritiska services...")
tradingbot-backend\scripts\log_hanging_files.py:163:        logger.info("🔍 Testar RiskGuardsService...")
tradingbot-backend\scripts\log_hanging_files.py:170:        logger.info(f"✅ RiskGuards equity: ${equity:.2f} ({duration:.1f}ms)")
tradingbot-backend\scripts\log_hanging_files.py:173:            logger.warning(f"⚠️ RiskGuards equity-hämtning tog {duration:.1f}ms (långsam)")
tradingbot-backend\scripts\log_hanging_files.py:176:        logger.error(f"❌ RiskGuards test misslyckades: {e}")
tradingbot-backend\scripts\log_hanging_files.py:180:        logger.info("🔍 Testar MarketDataFacade...")
tradingbot-backend\scripts\log_hanging_files.py:189:        logger.info(f"✅ MarketData ticker: {ticker is not None} ({duration:.1f}ms)")
tradingbot-backend\scripts\log_hanging_files.py:192:            logger.warning(f"⚠️ MarketData ticker-hämtning tog {duration:.1f}ms (långsam)")
tradingbot-backend\scripts\log_hanging_files.py:195:        logger.error(f"❌ MarketData test misslyckades: {e}")
tradingbot-backend\scripts\log_hanging_files.py:199:        logger.info("🔍 Testar AdvancedRateLimiter...")
tradingbot-backend\scripts\log_hanging_files.py:208:        logger.info(f"✅ RateLimiter wait: {duration:.1f}ms")
tradingbot-backend\scripts\log_hanging_files.py:211:            logger.warning(f"⚠️ RateLimiter wait tog {duration:.1f}ms (långsam)")
tradingbot-backend\scripts\log_hanging_files.py:214:        logger.error(f"❌ RateLimiter test misslyckades: {e}")
tradingbot-backend\scripts\log_hanging_files.py:218:        logger.info("🔍 Testar BitfinexWebSocketService...")
tradingbot-backend\scripts\log_hanging_files.py:224:        logger.info("✅ WebSocket service skapad utan problem")
tradingbot-backend\scripts\log_hanging_files.py:227:        logger.error(f"❌ WebSocket service test misslyckades: {e}")
tradingbot-backend\scripts\log_hanging_files.py:233:    logger.info("🚀 Startar hanging files analys...")
tradingbot-backend\scripts\log_hanging_files.py:241:    logger.info("🎯 Analys slutförd! Se hanging_files_debug.log för detaljer.")
tradingbot-backend\scripts\start_debug.py:34:        # Logging
tradingbot-backend\scripts\start_debug.py:58:    print("  - Logging: DEBUG")
tradingbot-backend\scripts\test_hanging_fixes.py:24:    logger.info("🧪 Testar WebSocket race condition fix...")
tradingbot-backend\scripts\test_hanging_fixes.py:44:        logger.info(f"✅ WebSocket race condition test: {race_condition_errors} errors")
tradingbot-backend\scripts\test_hanging_fixes.py:48:        logger.error(f"❌ WebSocket race condition test misslyckades: {e}")
tradingbot-backend\scripts\test_hanging_fixes.py:54:    logger.info("🧪 Testar risk guards equity timeout fix...")
tradingbot-backend\scripts\test_hanging_fixes.py:66:        logger.info(f"✅ Risk guards equity: ${equity:.2f} ({duration:.1f}ms)")
tradingbot-backend\scripts\test_hanging_fixes.py:72:        logger.error(f"❌ Risk guards equity test misslyckades: {e}")
tradingbot-backend\scripts\test_hanging_fixes.py:78:    logger.info("🧪 Testar market data timeout fix...")
tradingbot-backend\scripts\test_hanging_fixes.py:90:        logger.info(f"✅ Market data timeout test: {ticker is not None} ({duration:.1f}ms)")
tradingbot-backend\scripts\test_hanging_fixes.py:96:        logger.error(f"❌ Market data timeout test misslyckades: {e}")
tradingbot-backend\scripts\test_hanging_fixes.py:102:    logger.info("🧪 Testar rate limiter deadlock fix...")
tradingbot-backend\scripts\test_hanging_fixes.py:126:        logger.info(f"✅ Rate limiter deadlock test: {success_count}/5 success ({duration:.1f}ms)")
tradingbot-backend\scripts\test_hanging_fixes.py:132:        logger.error(f"❌ Rate limiter deadlock test misslyckades: {e}")
tradingbot-backend\scripts\test_hanging_fixes.py:138:    logger.info("🚀 Startar hängningsfix-tester...")
tradingbot-backend\scripts\test_hanging_fixes.py:150:        logger.info(f"\n--- {test_name} ---")
tradingbot-backend\scripts\test_hanging_fixes.py:154:            logger.info(f"{'✅' if result else '❌'} {test_name}: {'PASS' if result else 'FAIL'}")
tradingbot-backend\scripts\test_hanging_fixes.py:156:            logger.error(f"❌ {test_name}: ERROR - {e}")
tradingbot-backend\scripts\test_hanging_fixes.py:163:    logger.info("\n" + "=" * 50)
tradingbot-backend\scripts\test_hanging_fixes.py:164:    logger.info("HÄNGNINGSFIX SAMMANFATTNING:")
tradingbot-backend\scripts\test_hanging_fixes.py:170:        logger.info(f"  {test_name}: {status}")
tradingbot-backend\scripts\test_hanging_fixes.py:172:    logger.info(f"\nTotalt: {passed}/{total} fixes fungerar")
tradingbot-backend\scripts\test_hanging_fixes.py:175:        logger.info("🎉 Alla hängningsfix fungerar!")
tradingbot-backend\scripts\test_hanging_fixes.py:177:        logger.warning(f"⚠️ {total - passed} fixes behöver mer arbete")
tradingbot-backend\scripts\test_isolation.py:25:    logger.info("🧪 Testar market data REST-only mode...")
tradingbot-backend\scripts\test_isolation.py:40:        logger.info(f"✅ REST-only ticker: {ticker is not None} ({duration:.1f}ms)")
tradingbot-backend\scripts\test_isolation.py:44:        logger.error(f"❌ REST-only test misslyckades: {e}")
tradingbot-backend\scripts\test_isolation.py:50:    logger.info("🧪 Testar rate limiter status...")
tradingbot-backend\scripts\test_isolation.py:58:        logger.info(f"✅ Rate limiter stats: {len(stats)} buckets")
tradingbot-backend\scripts\test_isolation.py:62:            logger.info(f"   {endpoint_type}: {tokens:.1f}/{capacity} tokens")
tradingbot-backend\scripts\test_isolation.py:67:        logger.error(f"❌ Rate limiter test misslyckades: {e}")
tradingbot-backend\scripts\test_isolation.py:73:    logger.info("🧪 Testar WebSocket status...")
tradingbot-backend\scripts\test_isolation.py:78:        logger.info(f"✅ WebSocket connected: {bitfinex_ws.is_connected}")
tradingbot-backend\scripts\test_isolation.py:79:        logger.info(f"✅ WebSocket authenticated: {getattr(bitfinex_ws, '_authenticated', False)}")
tradingbot-backend\scripts\test_isolation.py:84:        logger.error(f"❌ WebSocket test misslyckades: {e}")
tradingbot-backend\scripts\test_isolation.py:90:    logger.info("🧪 Testar risk guards...")
tradingbot-backend\scripts\test_isolation.py:97:        logger.info(f"✅ Risk guards status: {len(status.get('guards', {}))} guards")
tradingbot-backend\scripts\test_isolation.py:98:        logger.info(f"✅ Current equity: ${status.get('current_equity', 0):.2f}")
tradingbot-backend\scripts\test_isolation.py:103:        logger.error(f"❌ Risk guards test misslyckades: {e}")
tradingbot-backend\scripts\test_isolation.py:109:    logger.info("🧪 Testar debug endpoints...")
tradingbot-backend\scripts\test_isolation.py:121:                logger.info(f"✅ Task dump: {data.get('count', 0)} tasks")
tradingbot-backend\scripts\test_isolation.py:123:                logger.warning(f"⚠️ Task dump failed: {response.status_code}")
tradingbot-backend\scripts\test_isolation.py:129:                logger.info(f"✅ Rate limiter dump: {len(data.get('stats', {}))} buckets")
tradingbot-backend\scripts\test_isolation.py:131:                logger.warning(f"⚠️ Rate limiter dump failed: {response.status_code}")
tradingbot-backend\scripts\test_isolation.py:136:        logger.error(f"❌ Debug endpoints test misslyckades: {e}")
tradingbot-backend\scripts\test_isolation.py:142:    logger.info("🚀 Startar isoleringstester...")
tradingbot-backend\scripts\test_isolation.py:155:        logger.info(f"\n--- {test_name} ---")
tradingbot-backend\scripts\test_isolation.py:159:            logger.info(f"{'✅' if result else '❌'} {test_name}: {'PASS' if result else 'FAIL'}")
tradingbot-backend\scripts\test_isolation.py:161:            logger.error(f"❌ {test_name}: ERROR - {e}")
tradingbot-backend\scripts\test_isolation.py:168:    logger.info("\n" + "=" * 50)
tradingbot-backend\scripts\test_isolation.py:169:    logger.info("SAMMANFATTNING:")
tradingbot-backend\scripts\test_isolation.py:175:        logger.info(f"  {test_name}: {status}")
tradingbot-backend\scripts\test_isolation.py:177:    logger.info(f"\nTotalt: {passed}/{total} tester passerade")
tradingbot-backend\scripts\test_isolation.py:180:        logger.info("🎉 Alla tester passerade!")
tradingbot-backend\scripts\test_isolation.py:182:        logger.warning(f"⚠️ {total - passed} tester misslyckades")
tradingbot-backend\services\bitfinex_data.py:85:                logger.debug(
tradingbot-backend\services\bitfinex_data.py:112:                    logger.info("🌐 REST API: Hämtar candles från %s", url)
tradingbot-backend\services\bitfinex_data.py:138:                            logger.warning(
tradingbot-backend\services\bitfinex_data.py:154:                                logger.warning(f"CB öppnad för candles i {cooldown:.1f}s")
tradingbot-backend\services\bitfinex_data.py:168:                    logger.info(
tradingbot-backend\services\bitfinex_data.py:211:            logger.error("Fel vid hämtning av candles: %s", last_exc)
tradingbot-backend\services\bitfinex_data.py:215:            logger.error("Fel vid hämtning av candles: %s", e)
tradingbot-backend\services\bitfinex_data.py:249:                    logger.info("skip REST ticker: pair_not_listed %s", eff_symbol)
tradingbot-backend\services\bitfinex_data.py:284:                logger.debug(f"🔍 WS-status för {symbol}: connected={ws_connected}, has_attr={ws_has_attr}")
tradingbot-backend\services\bitfinex_data.py:296:                    logger.debug(f"📡 WS-data för {symbol}: age={age_secs:.1f}s, price={last_price}")
tradingbot-backend\services\bitfinex_data.py:298:                    logger.debug(f"❌ Ingen WS-data för {symbol}")
tradingbot-backend\services\bitfinex_data.py:301:                    logger.info(f"✅ Använder färsk WS-data för {symbol}: {last_price}")
tradingbot-backend\services\bitfinex_data.py:333:                    logger.debug(f"🔍 WS-subscription för {symbol}: already_subscribed={already_subscribed}")
tradingbot-backend\services\bitfinex_data.py:336:                        logger.info(f"📡 Auto-subscribing till WS ticker för {eff_symbol}")
tradingbot-backend\services\bitfinex_data.py:343:                        logger.debug(f"⏳ Väntar på WS-data för {symbol} i {ws_warmup_ms}ms")
tradingbot-backend\services\bitfinex_data.py:353:                                logger.info(f"✅ Fick WS-data för {symbol} under warmup: {last_price}")
tradingbot-backend\services\bitfinex_data.py:376:                        logger.debug(f"⏰ WS warmup timeout för {symbol}, fallback till REST")
tradingbot-backend\services\bitfinex_data.py:378:                    logger.warning(f"⚠️ WS auto-subscribe misslyckades för {symbol}: {e}")
tradingbot-backend\services\bitfinex_data.py:380:                logger.warning(f"⚠️ WS-logik misslyckades för {symbol}: {e}")
tradingbot-backend\services\bitfinex_data.py:416:                            logger.info(f"🌐 REST API: Hämtar ticker från {url} (WS-fallback för {symbol})")
tradingbot-backend\services\bitfinex_data.py:441:                                    logger.warning(
tradingbot-backend\services\bitfinex_data.py:458:                                        logger.warning(f"CB öppnad för ticker i {cooldown:.1f}s")
tradingbot-backend\services\bitfinex_data.py:472:                            logger.info(
tradingbot-backend\services\bitfinex_data.py:535:            logger.error("Fel vid hämtning av ticker: %s", last_exc)
tradingbot-backend\services\bitfinex_data.py:539:            logger.error("Fel vid hämtning av ticker: %s", e)
tradingbot-backend\services\bitfinex_data.py:566:                        logger.info("🌐 REST API: Hämtar tickers (batch)")
tradingbot-backend\services\bitfinex_data.py:585:                                    logger.warning(f"CB öppnad för tickers i {cooldown:.1f}s")
tradingbot-backend\services\bitfinex_data.py:642:            logger.warning("tickers batch misslyckades: %s", last_exc)
tradingbot-backend\services\bitfinex_data.py:645:            logger.error("Fel vid hämtning av tickers (batch): %s", e)
tradingbot-backend\services\bitfinex_data.py:661:            logger.warning(f"Fel vid hämtning av platform status: {e}")
tradingbot-backend\services\bitfinex_data.py:689:                logger.info("⚙️ configs symbols fetch (%.0f ms)", (_t1 - _t0) * 1000)
tradingbot-backend\services\bitfinex_data.py:707:            logger.warning("Fel vid hämtning av configs symbols: %s", e)
tradingbot-backend\services\bitfinex_data.py:736:                logger.info("⚙️ currency map fetch (%.0f ms)", (_t1 - _t0) * 1000)
tradingbot-backend\services\bitfinex_data.py:756:            logger.warning("Fel vid hämtning av currency sym‑map: %s", e)
tradingbot-backend\services\bitfinex_data.py:822:                    logger.warning("Backfill misslyckades: %s", last_exc)
tradingbot-backend\services\bitfinex_data.py:845:            logger.warning("Backfill fel: %s", e)
tradingbot-backend\services\bitfinex_data.py:862:            logger.debug(
tradingbot-backend\services\bitfinex_websocket.py:152:            logger.info("🧩 Öppnade ny public WS socket (%.0f ms)", (_t1 - _t0) * 1000)
tradingbot-backend\services\bitfinex_websocket.py:155:            logger.warning("Kunde inte öppna public socket: %s", e)
tradingbot-backend\services\bitfinex_websocket.py:231:                    logger.debug("Pool socket parse fel: %s", e)
tradingbot-backend\services\bitfinex_websocket.py:238:            logger.warning("Pool socket stängd: %s", e)
tradingbot-backend\services\bitfinex_websocket.py:372:                            logger.info("🔁 WS symbol fallback: %s → %s", s, eff)
tradingbot-backend\services\bitfinex_websocket.py:384:                logger.warning("WS send ignorerad: ingen anslutning")
tradingbot-backend\services\bitfinex_websocket.py:393:            logger.error(f"❌ WS send misslyckades: {e}")
tradingbot-backend\services\bitfinex_websocket.py:398:            logger.info("🔌 Ansluter till Bitfinex WebSocket...")
tradingbot-backend\services\bitfinex_websocket.py:401:            logger.info("✅ Ansluten till Bitfinex WebSocket")
tradingbot-backend\services\bitfinex_websocket.py:426:            logger.error(f"❌ WebSocket-anslutning misslyckades: {e}")
tradingbot-backend\services\bitfinex_websocket.py:435:                logger.warning("WS auth: ingen anslutning")
tradingbot-backend\services\bitfinex_websocket.py:438:            logger.info("🔐 WS auth skickad, inväntar bekräftelse...")
tradingbot-backend\services\bitfinex_websocket.py:442:                logger.warning("⚠️ Ingen auth-bekräftelse inom timeout. Fortsätter utan auth.")
tradingbot-backend\services\bitfinex_websocket.py:444:            logger.warning(f"⚠️ Kunde inte skicka WS auth: {e}")
tradingbot-backend\services\bitfinex_websocket.py:451:                logger.warning("WS conf: ingen anslutning")
tradingbot-backend\services\bitfinex_websocket.py:454:            logger.info(f"⚙️ WS conf skickad med flags={flags}")
tradingbot-backend\services\bitfinex_websocket.py:456:            logger.warning(f"⚠️ Kunde inte skicka conf: {e}")
tradingbot-backend\services\bitfinex_websocket.py:490:            logger.info(f"📝 WS ou skickad: id=%s price=%s amount=%s", order_id, price, amount)
tradingbot-backend\services\bitfinex_websocket.py:493:            logger.error(f"❌ WS ou fel: {e}")
tradingbot-backend\services\bitfinex_websocket.py:528:            logger.info("🧹 WS oc_multi skickad: ids=%s cids=%s", ids or [], cids or [])
tradingbot-backend\services\bitfinex_websocket.py:531:            logger.error(f"❌ WS oc_multi fel: {e}")
tradingbot-backend\services\bitfinex_websocket.py:583:            logger.info("📦 WS ops skickad: %s operationer", len(normalized))
tradingbot-backend\services\bitfinex_websocket.py:586:            logger.error(f"❌ WS ops fel: {e}")
tradingbot-backend\services\bitfinex_websocket.py:594:                logger.warning("WS DMS: ingen anslutning")
tradingbot-backend\services\bitfinex_websocket.py:597:            logger.info(f"🛡️ WS DMS aktiverad med timeout={timeout_ms} ms")
tradingbot-backend\services\bitfinex_websocket.py:599:            logger.warning(f"⚠️ Kunde inte aktivera DMS: {e}")
tradingbot-backend\services\bitfinex_websocket.py:607:        logger.info("🔄 Startar WebSocket disconnect...")
tradingbot-backend\services\bitfinex_websocket.py:613:                logger.info("✅ Symbol refresh task avbruten")
tradingbot-backend\services\bitfinex_websocket.py:615:            logger.warning(f"⚠️ Fel vid avbrytning av symbol refresh: {e}")
tradingbot-backend\services\bitfinex_websocket.py:623:                logger.info("✅ Huvudsocket stängd")
tradingbot-backend\services\bitfinex_websocket.py:625:            logger.warning(f"⚠️ Fel vid stängning av huvudsocket: {e}")
tradingbot-backend\services\bitfinex_websocket.py:640:                logger.info(f"✅ {closed_count} pool-sockets stängda")
tradingbot-backend\services\bitfinex_websocket.py:642:            logger.warning(f"⚠️ Fel vid stängning av pool-sockets: {e}")
tradingbot-backend\services\bitfinex_websocket.py:657:        logger.info("✅ WebSocket disconnect komplett")
tradingbot-backend\services\bitfinex_websocket.py:699:                        logger.warning("⏱️ WS heartbeat timeout – schemalägger reconnect")
tradingbot-backend\services\bitfinex_websocket.py:778:                    logger.warning("⛔ WS skip subscribe: pair_not_listed %s", eff_symbol)
tradingbot-backend\services\bitfinex_websocket.py:787:                logger.info("ℹ️ Ticker redan aktiv/pending: %s", eff_symbol)
tradingbot-backend\services\bitfinex_websocket.py:805:                    logger.warning("⛔ WS skip subscribe: pair_not_listed %s", eff_symbol)
tradingbot-backend\services\bitfinex_websocket.py:819:                logger.warning("WS subscribe_ticker: ingen anslutning")
tradingbot-backend\services\bitfinex_websocket.py:834:            logger.info("📊 Prenumererar på ticker för %s", eff_symbol)
tradingbot-backend\services\bitfinex_websocket.py:837:            logger.error(f"❌ Ticker-prenumeration misslyckades: {e}")
tradingbot-backend\services\bitfinex_websocket.py:862:            logger.info("🔕 Unsubscribed %s (chanId=%s)", sub_key, chan_id)
tradingbot-backend\services\bitfinex_websocket.py:864:            logger.warning("Unsubscribe fel för %s: %s", sub_key, e)
tradingbot-backend\services\bitfinex_websocket.py:883:                                logger.info("🔄 WS resubscribe: %s (eff=%s)", raw, eff)
tradingbot-backend\services\bitfinex_websocket.py:888:                    logger.warning("Symbol refresh loop fel: %s", ie)
tradingbot-backend\services\bitfinex_websocket.py:912:                    logger.warning("⛔ WS skip trades: pair_not_listed %s", eff_symbol)
tradingbot-backend\services\bitfinex_websocket.py:931:                    logger.warning("⛔ WS skip trades: pair_not_listed %s", eff_symbol)
tradingbot-backend\services\bitfinex_websocket.py:937:                logger.warning("WS subscribe_trades: ingen anslutning")
tradingbot-backend\services\bitfinex_websocket.py:949:            logger.info("💱 Prenumererar på trades för %s", eff_symbol)
tradingbot-backend\services\bitfinex_websocket.py:952:            logger.error(f"❌ Trades-prenumeration misslyckades: {e}")
tradingbot-backend\services\bitfinex_websocket.py:972:            logger.info(f"🎯 Prenumererar på {symbol} med strategiutvärdering")
tradingbot-backend\services\bitfinex_websocket.py:975:            logger.error(f"❌ Strategi-prenumeration misslyckades: {e}")
tradingbot-backend\services\bitfinex_websocket.py:990:                    logger.warning("⛔ WS skip candles: pair_not_listed %s", eff_symbol)
tradingbot-backend\services\bitfinex_websocket.py:1008:                        logger.warning("⛔ WS skip candles: pair_not_listed %s", eff_symbol)
tradingbot-backend\services\bitfinex_websocket.py:1014:                logger.warning("WS subscribe_candles: ingen anslutning")
tradingbot-backend\services\bitfinex_websocket.py:1030:            logger.info("🕯️ Prenumererar på candles %s", ckey)
tradingbot-backend\services\bitfinex_websocket.py:1032:            logger.error(f"❌ Candles-prenumeration misslyckades: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1038:                    logger.warning(
tradingbot-backend\services\bitfinex_websocket.py:1064:                    logger.warning("⛔ WS skip book: pair_not_listed %s", eff_symbol)
tradingbot-backend\services\bitfinex_websocket.py:1078:                logger.warning("WS subscribe_book: ingen anslutning")
tradingbot-backend\services\bitfinex_websocket.py:1088:                    logger.warning("⛔ WS skip book: pair_not_listed %s", eff_symbol)
tradingbot-backend\services\bitfinex_websocket.py:1097:            logger.info(
tradingbot-backend\services\bitfinex_websocket.py:1105:            logger.error(f"❌ Orderbok-prenumeration misslyckades: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1154:                logger.info(f"📡 WS ticker live: {symbol}")
tradingbot-backend\services\bitfinex_websocket.py:1176:            logger.error(f"❌ Fel vid hantering av ticker med strategi: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1227:                logger.info(f"🎯 Strategiutvärdering för {symbol}: {result['signal']} - {result['reason']}")
tradingbot-backend\services\bitfinex_websocket.py:1233:            logger.error(f"❌ Fel vid strategiutvärdering för {symbol}: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1238:            logger.info("👂 Lyssnar på WebSocket-meddelanden...")
tradingbot-backend\services\bitfinex_websocket.py:1259:                    logger.warning("⚠️ Kunde inte parsa WebSocket-meddelande")
tradingbot-backend\services\bitfinex_websocket.py:1261:                    logger.error(f"❌ Fel vid hantering av WebSocket-meddelande: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1269:            logger.warning("⚠️ WebSocket-anslutning stängd")
tradingbot-backend\services\bitfinex_websocket.py:1273:            logger.error(f"❌ WebSocket-lyssnare fel: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1311:                            logger.warning(f"⚠️ Callback error for {event_code}: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1313:                        logger.debug(f"ℹ️ Ohanterad privat händelse: {event_code}")
tradingbot-backend\services\bitfinex_websocket.py:1318:                    logger.debug(f"ℹ️ Oväntat privat meddelande: {data}")
tradingbot-backend\services\bitfinex_websocket.py:1359:                        logger.warning(f"⚠️ Ticker callback error: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1368:                    logger.warning(f"⚠️ Channel callback error: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1393:                            logger.warning(f"⚠️ Fallback ticker callback error: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1397:            logger.error(f"❌ Fel vid hantering av kanal-meddelande: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1416:                logger.info(f"✅ Prenumeration bekräftad: channel={chan} symbol={symbol or key} chanId={chan_id}")
tradingbot-backend\services\bitfinex_websocket.py:1452:                    logger.info("✅ WS auth bekräftad")
tradingbot-backend\services\bitfinex_websocket.py:1456:                    logger.error(f"❌ WS auth misslyckades: {data}")
tradingbot-backend\services\bitfinex_websocket.py:1464:                    logger.info("ℹ️ WS: prenumeration redan aktiv (dup)")
tradingbot-backend\services\bitfinex_websocket.py:1468:                    logger.error("❌ WebSocket-fel: %s (sym=%s)", msg, sym)
tradingbot-backend\services\bitfinex_websocket.py:1470:                logger.info(f"ℹ️ WebSocket-info: {data.get('msg', 'no message')}")
tradingbot-backend\services\bitfinex_websocket.py:1473:            logger.error(f"❌ Fel vid hantering av event-meddelande: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1497:                    logger.info("📡 WS margin live: base")
tradingbot-backend\services\bitfinex_websocket.py:1506:                    logger.info(f"📡 WS margin live: {symbol}")
tradingbot-backend\services\bitfinex_websocket.py:1508:            logger.warning(f"⚠️ Kunde inte hantera miu: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1538:            logger.debug("📊 Position uppdaterad: %s = %s", symbol, self.positions[symbol])
tradingbot-backend\services\bitfinex_websocket.py:1540:            logger.warning(f"⚠️ Kunde inte hantera pu: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1568:            logger.debug("💰 Wallet uppdaterad: %s = %s", wallet_key, self.wallets[wallet_key])
tradingbot-backend\services\bitfinex_websocket.py:1570:            logger.warning(f"⚠️ Kunde inte hantera wu: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1594:                logger.debug("📈 Funding rates uppdaterad: %s = %s", symbol, rates_data)
tradingbot-backend\services\bitfinex_websocket.py:1596:            logger.warning(f"⚠️ Kunde inte hantera fiu: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1622:                    logger.debug(f"📋 Använder cached calc för {eff}")
tradingbot-backend\services\bitfinex_websocket.py:1642:            logger.info("🧮 WS margin calc begärd för %s", eff)
tradingbot-backend\services\bitfinex_websocket.py:1645:            logger.error("WS margin calc fel: %s", e)
tradingbot-backend\services\bitfinex_websocket.py:1718:                logger.info(f"🧮 Batch WS margin calc begärd för {len(symbols_to_calc)} symboler")
tradingbot-backend\services\bitfinex_websocket.py:1721:                logger.error(f"❌ Batch WS margin calc fel: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1728:            logger.error(f"❌ Batch margin calc fel: {e}")
tradingbot-backend\services\bitfinex_websocket.py:1755:                    logger.debug(f"📋 Använder cached position calc för {eff}")
tradingbot-backend\services\bitfinex_websocket.py:1777:            logger.info("📊 WS position calc begärd för %s", eff)
tradingbot-backend\services\bitfinex_websocket.py:1780:            logger.error("WS position calc fel: %s", e)
tradingbot-backend\services\bitfinex_websocket.py:1796:                    logger.debug(f"📋 Använder cached wallet calc för {wallet_type}:{currency}")
tradingbot-backend\services\bitfinex_websocket.py:1812:            logger.info("💰 WS wallet calc begärd för %s:%s", wallet_type, currency)
tradingbot-backend\services\bitfinex_websocket.py:1815:            logger.error("WS wallet calc fel: %s", e)
tradingbot-backend\services\bitfinex_websocket.py:1831:                    logger.debug(f"📋 Använder cached funding calc för {currency}")
tradingbot-backend\services\bitfinex_websocket.py:1847:            logger.info("📈 WS funding calc begärd för %s", currency)
tradingbot-backend\services\bitfinex_websocket.py:1850:            logger.error("WS funding calc fel: %s", e)
tradingbot-backend\services\bitfinex_websocket.py:1861:            logger.info("🚀 WebSocket-lyssnare startad")
tradingbot-backend\services\bitfinex_websocket.py:1863:            logger.info("🚀 WebSocket-lyssnare redan aktiv")
tradingbot-backend\services\bracket_manager.py:44:            logger.warning(f"Kunde inte ladda bracket-state: {e}")
tradingbot-backend\services\bracket_manager.py:57:        logger.info(f"Registered bracket gid={gid} entry={entry_id} sl={sl_id} tp={tp_id}")
tradingbot-backend\services\bracket_manager.py:73:                logger.info(
tradingbot-backend\services\bracket_manager.py:78:                logger.warning(f"Kunde inte cancel syskon-order {sibling_id}: {e}")
tradingbot-backend\services\bracket_manager.py:150:            logger.error(f"Fel i BracketManager.handle_private_event: {e}")
tradingbot-backend\services\bracket_manager.py:185:            logger.warning(f"Partial adjust misslyckades: {e}")
tradingbot-backend\services\bracket_manager.py:216:                logger.warning(f"Sync protectives misslyckades för {oid}: {e}")
tradingbot-backend\services\bracket_manager.py:231:            logger.warning("Ogiltig bracket-state, ignorerar")
tradingbot-backend\services\bracket_manager.py:238:        logger.info(f"Laddade {len(self.groups)} bracket-grupper från state")
tradingbot-backend\services\bracket_manager.py:261:                logger.warning(f"Kunde inte ta bort bracket-state-fil: {e}")
tradingbot-backend\services\bracket_manager.py:337:        logger.warning(f"Kunde inte skriva bracket-state: {e}")
tradingbot-backend\services\data_coordinator.py:65:            logger.debug(f"Rensade {len(expired_keys)} utgångna cache-entries")
tradingbot-backend\services\data_coordinator.py:87:            logger.debug(f"Cache-hit för {cache_key}")
tradingbot-backend\services\data_coordinator.py:97:                logger.debug(f"Cache-hit efter lock för {cache_key}")
tradingbot-backend\services\data_coordinator.py:110:                    logger.debug(f"Cache-miss, sparade data för {cache_key}")
tradingbot-backend\services\data_coordinator.py:115:                logger.error(f"Fel vid hämtning av {data_type} för {symbol}: {e}")
tradingbot-backend\services\data_coordinator.py:199:                    logger.warning(f"Misslyckades att hämta candles för {symbol}: {result}")
tradingbot-backend\services\data_coordinator.py:204:            logger.info(f"Batch-hämtade candles för {len(symbols)} symboler")
tradingbot-backend\services\data_coordinator.py:208:            logger.error(f"Fel vid batch-hämtning av candles: {e}")
tradingbot-backend\services\data_coordinator.py:240:                    logger.warning(f"Misslyckades att hämta ticker för {symbol}: {result}")
tradingbot-backend\services\data_coordinator.py:245:            logger.info(f"Batch-hämtade tickers för {len(symbols)} symboler")
tradingbot-backend\services\data_coordinator.py:249:            logger.error(f"Fel vid batch-hämtning av tickers: {e}")
tradingbot-backend\services\enhanced_auto_trader.py:46:        logger.info("🚀 EnhancedAutoTrader initialiserad")
tradingbot-backend\services\enhanced_auto_trader.py:60:                logger.warning(f"⚠️ {symbol} handlas redan med enhanced trading")
tradingbot-backend\services\enhanced_auto_trader.py:75:            logger.info(f"🤖 Startade enhanced auto-trading för {symbol}")
tradingbot-backend\services\enhanced_auto_trader.py:78:            logger.error(f"❌ Fel vid start av enhanced trading för {symbol}: {e}")
tradingbot-backend\services\enhanced_auto_trader.py:89:                logger.info(f"🛑 Stoppade enhanced auto-trading för {symbol}")
tradingbot-backend\services\enhanced_auto_trader.py:91:                logger.warning(f"⚠️ {symbol} handlades inte med enhanced trading")
tradingbot-backend\services\enhanced_auto_trader.py:94:            logger.error(f"❌ Fel vid stopp av enhanced trading för {symbol}: {e}")
tradingbot-backend\services\enhanced_auto_trader.py:115:                logger.info(
tradingbot-backend\services\enhanced_auto_trader.py:124:            logger.error(f"❌ Fel vid hantering av realtids signal: {e}")
tradingbot-backend\services\enhanced_auto_trader.py:173:            logger.error(f"❌ Kunde inte hämta enhanced signal för {symbol}: {e}")
tradingbot-backend\services\enhanced_auto_trader.py:199:            logger.error(f"❌ Fel vid trade beslut: {e}")
tradingbot-backend\services\enhanced_auto_trader.py:227:            logger.info(
tradingbot-backend\services\enhanced_auto_trader.py:239:            logger.error(f"❌ Fel vid enhanced trade execution för {symbol}: {e}")
tradingbot-backend\services\enhanced_auto_trader.py:265:            logger.error(f"❌ Fel vid position size beräkning: {e}")
tradingbot-backend\services\enhanced_auto_trader.py:278:            logger.error(f"❌ Fel vid trade timing check: {e}")
tradingbot-backend\services\enhanced_auto_trader.py:307:            logger.error(f"❌ Fel vid status hämtning: {e}")
tradingbot-backend\services\enhanced_auto_trader.py:350:            logger.error(f"❌ Fel vid lokal regim-beräkning för {symbol}: {e}")
tradingbot-backend\services\enhanced_auto_trader.py:360:            logger.info(f"🛑 Stoppade all enhanced auto-trading ({len(symbols_to_stop)} symboler)")
tradingbot-backend\services\enhanced_auto_trader.py:363:            logger.error(f"❌ Fel vid stopp av all enhanced trading: {e}")
tradingbot-backend\services\enhanced_observability_service.py:140:        logger.info("📊 EnhancedObservabilityService initialiserad - enhetlig observability")
tradingbot-backend\services\enhanced_observability_service.py:168:            logger.debug(f"📊 System metrics: CPU {metrics.cpu_percent}%, RAM {metrics.memory_percent}%")
tradingbot-backend\services\enhanced_observability_service.py:172:            logger.error(f"❌ Fel vid hämtning av system metrics: {e}")
tradingbot-backend\services\enhanced_observability_service.py:189:            logger.debug(f"📊 Rate limiter metrics: {len(metrics.tokens_available)} patterns")
tradingbot-backend\services\enhanced_observability_service.py:193:            logger.error(f"❌ Fel vid hämtning av rate limiter metrics: {e}")
tradingbot-backend\services\enhanced_observability_service.py:222:            logger.debug(
tradingbot-backend\services\enhanced_observability_service.py:228:            logger.error(f"❌ Fel vid hämtning av exchange metrics: {e}")
tradingbot-backend\services\enhanced_observability_service.py:246:            logger.debug("📊 Circuit breaker metrics: Alla stängda")
tradingbot-backend\services\enhanced_observability_service.py:250:            logger.error(f"❌ Fel vid hämtning av circuit breaker metrics: {e}")
tradingbot-backend\services\enhanced_observability_service.py:265:            logger.debug(
tradingbot-backend\services\enhanced_observability_service.py:271:            logger.error(f"❌ Fel vid hämtning av WebSocket metrics: {e}")
tradingbot-backend\services\enhanced_observability_service.py:293:            logger.debug(
tradingbot-backend\services\enhanced_observability_service.py:299:            logger.error(f"❌ Fel vid hämtning av trading metrics: {e}")
tradingbot-backend\services\enhanced_observability_service.py:311:                logger.debug("📋 Använder cached comprehensive metrics")
tradingbot-backend\services\enhanced_observability_service.py:406:            logger.info("📊 Comprehensive metrics genererade")
tradingbot-backend\services\enhanced_observability_service.py:410:            logger.error(f"❌ Fel vid hämtning av comprehensive metrics: {e}")
tradingbot-backend\services\enhanced_observability_service.py:475:        logger.info("🗑️ Observability cache rensad")
tradingbot-backend\services\feature_flags_service.py:76:        logger.info("🚩 FeatureFlagsService initialiserad - enhetlig toggle-hantering")
tradingbot-backend\services\feature_flags_service.py:234:        logger.warning(f"⚠️ Okänd feature flag: {name}")
tradingbot-backend\services\feature_flags_service.py:240:            logger.error(f"❌ Okänd feature flag: {name}")
tradingbot-backend\services\feature_flags_service.py:249:                logger.debug(f"📋 Feature flag {name} har redan värdet {value} - hoppar över uppdatering")
tradingbot-backend\services\feature_flags_service.py:257:                logger.debug(f"⏱️ Debouncing feature flag {name} - för nyligen uppdaterad")
tradingbot-backend\services\feature_flags_service.py:268:            logger.info(f"🚩 Feature flag uppdaterad: {name} = {value} (tidigare: {old_value})")
tradingbot-backend\services\feature_flags_service.py:272:            logger.error(f"❌ Fel vid uppdatering av feature flag {name}: {e}")
tradingbot-backend\services\feature_flags_service.py:306:            logger.warning(f"⚠️ Kunde inte uppdatera runtime flag {name}: {e}")
tradingbot-backend\services\feature_flags_service.py:346:            logger.error(f"❌ Okänd feature flag: {name}")
tradingbot-backend\services\feature_flags_service.py:358:            logger.info(f"🔄 Feature flag återställd: {name} = {flag.default_value} (tidigare: {old_value})")
tradingbot-backend\services\feature_flags_service.py:362:            logger.error(f"❌ Fel vid återställning av feature flag {name}: {e}")
tradingbot-backend\services\feature_flags_service.py:370:            logger.info("🔄 Alla feature flags återställda")
tradingbot-backend\services\feature_flags_service.py:373:            logger.error(f"❌ Fel vid återställning av alla feature flags: {e}")
tradingbot-backend\services\feature_flags_service.py:409:            logger.debug("🔄 Runtime flags uppdaterade")
tradingbot-backend\services\feature_flags_service.py:411:            logger.error(f"❌ Fel vid uppdatering av runtime flags: {e}")
tradingbot-backend\services\feature_flags_service.py:427:            logger.error(f"❌ Fel vid hämtning av flag status: {e}")
tradingbot-backend\services\health_watchdog.py:69:        logger.info("🏥 HealthWatchdogService initialiserad")
tradingbot-backend\services\health_watchdog.py:82:                logger.info(f"📋 Laddade health checks från {self.config_file}")
tradingbot-backend\services\health_watchdog.py:85:            logger.warning(f"⚠️ Kunde inte ladda health checks: {e}")
tradingbot-backend\services\health_watchdog.py:156:            logger.error(f"❌ Kunde inte spara health checks: {e}")
tradingbot-backend\services\health_watchdog.py:174:            logger.warning(f"⚠️ Kunde inte ladda health status: {e}")
tradingbot-backend\services\health_watchdog.py:192:            logger.error(f"❌ Kunde inte spara health status: {e}")
tradingbot-backend\services\health_watchdog.py:477:                logger.info(f"✅ {check_name}: {message}")
tradingbot-backend\services\health_watchdog.py:479:                logger.warning(f"⚠️ {check_name}: {message}")
tradingbot-backend\services\health_watchdog.py:488:            logger.error(f"❌ Fel vid health check {check_name}: {e}")
tradingbot-backend\services\health_watchdog.py:509:            logger.info(f"🔧 Försöker auto-fixa {check_name}")
tradingbot-backend\services\health_watchdog.py:514:                logger.info(f"🔄 WebSocket reconnect initierad för {check_name}")
tradingbot-backend\services\health_watchdog.py:521:                logger.info(f"🔄 Auth cache rensad för {check_name}")
tradingbot-backend\services\health_watchdog.py:526:            logger.error(f"❌ Auto-fix misslyckades för {check_name}: {e}")
tradingbot-backend\services\health_watchdog.py:547:                    logger.error(f"❌ Exception i health check {check_name}: {result}")
tradingbot-backend\services\health_watchdog.py:567:            logger.warning("Watchdog redan igång")
tradingbot-backend\services\health_watchdog.py:571:        logger.info("🏥 Health watchdog startad")
tradingbot-backend\services\health_watchdog.py:581:                logger.error(f"❌ Fel i watchdog loop: {e}")
tradingbot-backend\services\health_watchdog.py:589:        logger.info("🏥 Health watchdog stoppad")
tradingbot-backend\services\health_watchdog.py:629:            logger.error(f"❌ Kunde inte hämta overall health: {e}")
tradingbot-backend\services\history_service.py:71:        logger.info("📚 HistoryService initialiserad - enhetlig historik-hantering")
tradingbot-backend\services\history_service.py:87:                logger.debug(f"📋 Använder cached trade history för {symbol or 'all'}")
tradingbot-backend\services\history_service.py:103:            logger.info(f"📊 Hämtade {len(trades)} trades för {symbol or 'alla symboler'}")
tradingbot-backend\services\history_service.py:107:            logger.error(f"❌ Fel vid hämtning av trade history: {e}")
tradingbot-backend\services\history_service.py:124:                logger.debug(f"📋 Använder cached ledger history för {wallet_type or 'all'}")
tradingbot-backend\services\history_service.py:142:            logger.info(f"📊 Hämtade {len(ledgers)} ledgers för {wallet_type or 'alla wallets'}")
tradingbot-backend\services\history_service.py:146:            logger.error(f"❌ Fel vid hämtning av ledger history: {e}")
tradingbot-backend\services\history_service.py:161:                logger.debug("📋 Använder cached equity history")
tradingbot-backend\services\history_service.py:183:            logger.info(f"📊 Hämtade {len(equity_history)} equity history points")
tradingbot-backend\services\history_service.py:187:            logger.error(f"❌ Fel vid hämtning av equity history: {e}")
tradingbot-backend\services\history_service.py:202:                logger.debug("📋 Använder cached performance snapshot")
tradingbot-backend\services\history_service.py:214:            logger.info("📊 Hämtade performance snapshot")
tradingbot-backend\services\history_service.py:218:            logger.error(f"❌ Fel vid hämtning av performance snapshot: {e}")
tradingbot-backend\services\history_service.py:281:            logger.info("📚 Comprehensive history genererad")
tradingbot-backend\services\history_service.py:285:            logger.error(f"❌ Fel vid hämtning av comprehensive history: {e}")
tradingbot-backend\services\history_service.py:323:            logger.error(f"❌ Fel vid beräkning av trades summary: {e}")
tradingbot-backend\services\history_service.py:348:            logger.error(f"❌ Fel vid beräkning av ledgers summary: {e}")
tradingbot-backend\services\history_service.py:370:            logger.error(f"❌ Fel vid beräkning av equity summary: {e}")
tradingbot-backend\services\history_service.py:377:        logger.info("🗑️ History cache rensad")
tradingbot-backend\services\market_data_facade.py:37:        """Hämta ticker med timeout och bättre logging."""
tradingbot-backend\services\market_data_facade.py:46:                logger.info(
tradingbot-backend\services\market_data_facade.py:58:                logger.info(f"marketdata.source=ws symbol={symbol} lag_ms={lag_ms:.1f}")
tradingbot-backend\services\market_data_facade.py:64:                logger.info(f"marketdata.source=rest reason=ws_timeout symbol={symbol} lag_ms={lag_ms:.1f}")
tradingbot-backend\services\market_data_facade.py:69:            logger.error(f"marketdata.error symbol={symbol} error={e!s} lag_ms={lag_ms:.1f}")
tradingbot-backend\services\notifications.py:25:            logger.debug("Telegram ej konfigurerat; hoppar över")
tradingbot-backend\services\notifications.py:35:            logger.warning(f"Telegram-notis misslyckades: {e}")
tradingbot-backend\services\performance.py:69:            logger.warning(f"Kunde inte hämta senaste trades: {e}")
tradingbot-backend\services\performance.py:194:            logger.warning(f"Kunde inte hämta trades för realized PnL (fortsätter med tom lista): {e}")
tradingbot-backend\services\performance.py:330:                logger.warning(f"⚠️ Wallet fetch failed: {wallets}")
tradingbot-backend\services\performance.py:333:                logger.warning(f"⚠️ Position fetch failed: {positions}")
tradingbot-backend\services\performance.py:347:                    logger.warning(f"⚠️ FX timeout for {cur}, using 0.0")
tradingbot-backend\services\performance.py:365:            logger.warning("⚠️ Equity computation timeout - returning fallback")
tradingbot-backend\services\performance.py:373:            logger.error(f"❌ Equity computation error: {e}")
tradingbot-backend\services\performance.py:399:            logger.warning("Kunde inte läsa performance_history.json, initierar ny fil")
tradingbot-backend\services\performance.py:407:            logger.error(f"Fel vid skrivning av performance_history.json: {e}")
tradingbot-backend\services\performance_tracker.py:22:        logger.info("📊 PerformanceTracker initialiserad")
tradingbot-backend\services\performance_tracker.py:32:                logger.info(f"📊 Laddade {len(self.trades_history)} trades från performance fil")
tradingbot-backend\services\performance_tracker.py:34:            logger.error(f"❌ Fel vid laddning av performance data: {e}")
tradingbot-backend\services\performance_tracker.py:51:            logger.error(f"❌ Fel vid sparande av performance data: {e}")
tradingbot-backend\services\performance_tracker.py:84:            logger.info(
tradingbot-backend\services\performance_tracker.py:92:            logger.error(f"❌ Fel vid registrering av trade: {e}")
tradingbot-backend\services\performance_tracker.py:120:                    logger.info(
tradingbot-backend\services\performance_tracker.py:126:            logger.warning(f"⚠️ Kunde inte hitta trade med ID: {trade_id}")
tradingbot-backend\services\performance_tracker.py:130:            logger.error(f"❌ Fel vid registrering av trade close: {e}")
tradingbot-backend\services\performance_tracker.py:196:            logger.error(f"❌ Fel vid uppdatering av daily stats: {e}")
tradingbot-backend\services\performance_tracker.py:249:            logger.error(f"❌ Fel vid beräkning av performance summary: {e}")
tradingbot-backend\services\performance_tracker.py:293:            logger.error(f"❌ Fel vid beräkning av symbol performance: {e}")
tradingbot-backend\services\performance_tracker.py:301:            logger.error(f"❌ Fel vid hämtning av recent trades: {e}")
tradingbot-backend\services\performance_tracker.py:315:            logger.error(f"❌ Fel vid hämtning av daily stats: {e}")
tradingbot-backend\services\prob_validation.py:32:    - LogLoss: -log(p_true)
tradingbot-backend\services\prob_validation.py:45:    logloss = -math.log(p_true)
tradingbot-backend\services\realtime_strategy.py:35:                logger.warning(f"⚠️ {symbol} övervakas redan")
tradingbot-backend\services\realtime_strategy.py:48:            logger.info(f"🎯 Startade realtids övervakning för {symbol}")
tradingbot-backend\services\realtime_strategy.py:51:            logger.error(f"❌ Fel vid start av övervakning för {symbol}: {e}")
tradingbot-backend\services\realtime_strategy.py:68:                logger.info(f"🛑 Stoppade övervakning för {symbol}")
tradingbot-backend\services\realtime_strategy.py:70:                logger.warning(f"⚠️ {symbol} övervakades inte")
tradingbot-backend\services\realtime_strategy.py:73:            logger.error(f"❌ Fel vid stopp av övervakning för {symbol}: {e}")
tradingbot-backend\services\realtime_strategy.py:91:            logger.info(f"🎯 {symbol}: {signal} @ ${price:,.2f} - {result.get('reason', '')}")
tradingbot-backend\services\realtime_strategy.py:101:            logger.error(f"❌ Fel vid hantering av strategi-resultat: {e}")
tradingbot-backend\services\realtime_strategy.py:117:            logger.error(f"❌ Fel vid broadcast av signal: {e}")
tradingbot-backend\services\realtime_strategy.py:157:            logger.info("🛑 Stoppade all realtids övervakning")
tradingbot-backend\services\realtime_strategy.py:160:            logger.error(f"❌ Fel vid stopp av all övervakning: {e}")
tradingbot-backend\services\refresh_manager.py:83:        logger.info("🔄 RefreshManager initialiserad")
tradingbot-backend\services\refresh_manager.py:95:            logger.warning(f"Panel {panel_id} redan registrerad, uppdaterar...")
tradingbot-backend\services\refresh_manager.py:107:        logger.info(f"📋 Panel {panel_id} registrerad (prioritet: {priority.name}, intervall: {interval}s)")
tradingbot-backend\services\refresh_manager.py:113:            logger.info(f"🗑️ Panel {panel_id} avregistrerad")
tradingbot-backend\services\refresh_manager.py:130:        logger.debug(f"📊 Shared data uppdaterad: {data_type}")
tradingbot-backend\services\refresh_manager.py:156:            logger.warning("RefreshManager redan igång")
tradingbot-backend\services\refresh_manager.py:162:        logger.info("🚀 RefreshManager startad")
tradingbot-backend\services\refresh_manager.py:168:            logger.error(f"❌ RefreshManager fel: {e}")
tradingbot-backend\services\refresh_manager.py:177:        logger.info("🛑 Stoppar RefreshManager...")
tradingbot-backend\services\refresh_manager.py:184:        logger.info("✅ RefreshManager stoppad")
tradingbot-backend\services\refresh_manager.py:193:                    logger.warning(f"Panel {panel_id} inte registrerad")
tradingbot-backend\services\refresh_manager.py:206:                logger.error(f"❌ Refresh loop fel: {e}")
tradingbot-backend\services\refresh_manager.py:244:            logger.debug(f"🔄 Refreshar panel: {task.panel_id}")
tradingbot-backend\services\refresh_manager.py:255:            logger.debug(f"✅ Panel {task.panel_id} refreshad")
tradingbot-backend\services\refresh_manager.py:259:            logger.error(f"❌ Panel {task.panel_id} refresh fel: {e}")
tradingbot-backend\services\refresh_manager.py:262:                logger.warning(f"⚠️ Panel {task.panel_id} har för många fel, pausar...")
tradingbot-backend\services\regime_ablation.py:68:        logger.info("🔬 RegimeAblationService initialiserad")
tradingbot-backend\services\regime_ablation.py:81:                logger.info(f"📋 Laddade regime konfiguration från {self.config_file}")
tradingbot-backend\services\regime_ablation.py:84:            logger.warning(f"⚠️ Kunde inte ladda regime konfiguration: {e}")
tradingbot-backend\services\regime_ablation.py:137:            logger.error(f"❌ Kunde inte spara regime konfiguration: {e}")
tradingbot-backend\services\regime_ablation.py:153:            logger.warning(f"⚠️ Kunde inte ladda performance data: {e}")
tradingbot-backend\services\regime_ablation.py:169:            logger.error(f"❌ Kunde inte spara performance data: {e}")
tradingbot-backend\services\regime_ablation.py:232:            logger.error(f"❌ Kunde inte beräkna performance för regime {regime_name}: {e}")
tradingbot-backend\services\regime_ablation.py:250:                logger.info(f"📊 Performance uppdaterad för regime {regime_name}")
tradingbot-backend\services\regime_ablation.py:254:            logger.error(f"❌ Kunde inte uppdatera performance för regime {regime_name}: {e}")
tradingbot-backend\services\regime_ablation.py:278:                logger.info(f"🚫 Regime {regime_name} deaktiverat pga låg expectancy: {performance.expectancy:.6f}")
tradingbot-backend\services\regime_ablation.py:283:                logger.info(f"🚫 Regime {regime_name} deaktiverat pga hög drawdown: {performance.max_drawdown:.2%}")
tradingbot-backend\services\regime_ablation.py:288:                logger.info(
tradingbot-backend\services\regime_ablation.py:375:            logger.error(f"❌ Fel vid ablation test: {e}")
tradingbot-backend\services\regime_ablation.py:434:                logger.info(f"⚙️ Regime konfiguration uppdaterad: {regime_name}")
tradingbot-backend\services\regime_ablation.py:438:            logger.error(f"❌ Kunde inte uppdatera regime konfiguration {regime_name}: {e}")
tradingbot-backend\services\regime_ablation.py:476:            logger.error(f"❌ Kunde inte hämta regime status: {e}")
tradingbot-backend\services\risk_guards.py:34:        logger.info("🛡️ RiskGuardsService initialiserad")
tradingbot-backend\services\risk_guards.py:42:                logger.info(f"📋 Laddade riskvakter från {self.guards_file}")
tradingbot-backend\services\risk_guards.py:45:            logger.warning(f"⚠️ Kunde inte ladda riskvakter: {e}")
tradingbot-backend\services\risk_guards.py:89:            logger.error(f"❌ Kunde inte spara riskvakter: {e}")
tradingbot-backend\services\risk_guards.py:97:            logger.debug("⚠️ Equity computation disabled to prevent hanging")
tradingbot-backend\services\risk_guards.py:101:            logger.error(f"❌ Kunde inte hämta aktuell equity: {e}")
tradingbot-backend\services\risk_guards.py:119:            logger.info(f"📅 Ny dag initialiserad: {today}")
tradingbot-backend\services\risk_guards.py:161:                    logger.warning(f"🚨 Max daily loss triggad: {daily_loss_pct:.2f}% förlust")
tradingbot-backend\services\risk_guards.py:206:                    logger.error(f"🚨 Kill-switch triggad: {guard['reason']}")
tradingbot-backend\services\risk_guards.py:307:                logger.info(f"🔄 Riskvakt återställd: {guard_name}")
tradingbot-backend\services\risk_guards.py:311:            logger.error(f"❌ Kunde inte återställa riskvakt {guard_name}: {e}")
tradingbot-backend\services\risk_guards.py:343:            logger.error(f"❌ Kunde inte hämta guards status: {e}")
tradingbot-backend\services\risk_guards.py:361:                logger.info(f"⚙️ Riskvakt konfiguration uppdaterad: {guard_name}")
tradingbot-backend\services\risk_guards.py:365:            logger.error(f"❌ Kunde inte uppdatera riskvakt {guard_name}: {e}")
tradingbot-backend\services\risk_manager.py:79:            logger.warning("🚨 TradingCircuitBreaker aktiverad: pausar handel pga felspikar")
tradingbot-backend\services\risk_manager.py:114:            logger.error(f"Kunde inte aktivera TradingCircuitBreaker: {e}")
tradingbot-backend\services\risk_manager.py:181:            logger.error(f"Fel vid circuit reset: {e}")
tradingbot-backend\services\scheduler.py:50:        logger.info("🗓️ Scheduler startad")
tradingbot-backend\services\scheduler.py:62:        logger.info("🛑 Scheduler stoppad")
tradingbot-backend\services\scheduler.py:71:                logger.debug(f"🧹 Rensade {len(completed_tasks)} completed tasks")
tradingbot-backend\services\scheduler.py:82:                    logger.debug(f"Completed task-typer: {task_types}")
tradingbot-backend\services\scheduler.py:85:            logger.debug(f"Task cleanup fel: {e}")
tradingbot-backend\services\scheduler.py:127:                logger.error("%s", f"Scheduler-loop fel: {e}")
tradingbot-backend\services\scheduler.py:141:            logger.debug("%s", f"Warm-up prob validation fel: {e}")
tradingbot-backend\services\scheduler.py:151:            logger.info(
tradingbot-backend\services\scheduler.py:171:            logger.warning("%s", f"Kunde inte ta equity-snapshot: {e}")
tradingbot-backend\services\scheduler.py:190:                logger.info(f"🧹 Candle-cache retention: tog bort {removed} rader")
tradingbot-backend\services\scheduler.py:192:            logger.warning("%s", f"Retention fel: {e}")
tradingbot-backend\services\scheduler.py:254:                    logger.debug(f"prob validation misslyckades för {sym}: {ie}")
tradingbot-backend\services\scheduler.py:292:            logger.info(
tradingbot-backend\services\scheduler.py:297:            logger.debug("%s", f"Prob validation fel: {e}")
tradingbot-backend\services\scheduler.py:372:            logger.debug("%s", f"Prob retraining fel: {e}")
tradingbot-backend\services\scheduler.py:425:                    logger.info(f"🔄 Automatisk regim-uppdatering för {symbol}: {new_weights}")
tradingbot-backend\services\scheduler.py:449:                logger.warning(f"Kunde inte batch-uppdatera regim: {e}")
tradingbot-backend\services\scheduler.py:454:            logger.debug(f"Automatisk regim-uppdatering fel: {e}")
tradingbot-backend\services\signal_generator.py:40:        logger.info("🎯 SignalGeneratorService initialiserad")
tradingbot-backend\services\signal_generator.py:47:            logger.info("🚀 Genererar live signals...")
tradingbot-backend\services\signal_generator.py:53:            logger.info(f"📋 Använder symboler: {symbols}")
tradingbot-backend\services\signal_generator.py:57:                logger.info("📋 Använder cached signals")
tradingbot-backend\services\signal_generator.py:61:            logger.info(f"⚡ Startar optimerad batch-generering för {len(symbols)} symboler")
tradingbot-backend\services\signal_generator.py:72:                logger.error(f"❌ Fel vid batch regime data: {regime_data_batch}")
tradingbot-backend\services\signal_generator.py:75:                logger.error(f"❌ Fel vid batch pris data: {price_data_batch}")
tradingbot-backend\services\signal_generator.py:86:                        logger.warning(f"⚠️ Saknar data för {symbol}")
tradingbot-backend\services\signal_generator.py:137:                    logger.info(f"✅ Genererade signal för {symbol}: {signal_type}")
tradingbot-backend\services\signal_generator.py:140:                    logger.error(f"❌ Kunde inte generera signal för {symbol}: {e}")
tradingbot-backend\services\signal_generator.py:155:            logger.info(f"✅ Genererade {len(signals)} signals med optimerad batching")
tradingbot-backend\services\signal_generator.py:159:            logger.error(f"❌ Fel vid signal generation: {e}")
tradingbot-backend\services\signal_generator.py:179:                    logger.error(f"❌ Kunde inte hämta regime data för {symbol}: {e}")
tradingbot-backend\services\signal_generator.py:184:            logger.error(f"❌ Fel vid batch regime data: {e}")
tradingbot-backend\services\signal_generator.py:204:                    logger.error(f"❌ Kunde inte hämta pris för {symbol}: {e}")
tradingbot-backend\services\signal_generator.py:209:            logger.error(f"❌ Fel vid batch pris-hämtning: {e}")
tradingbot-backend\services\signal_generator.py:264:            logger.error(f"❌ Fel vid signal generation för {symbol}: {e}")
tradingbot-backend\services\signal_generator.py:303:            logger.error(f"❌ Kunde inte hämta regime data för {symbol}: {e}")
tradingbot-backend\services\signal_generator.py:308:        logger.warning("⚠️ _calculate_confidence_score() är deprecated - använd SignalService.score() direkt")
tradingbot-backend\services\signal_generator.py:313:        logger.warning("⚠️ _calculate_trading_probability() är deprecated - använd SignalService.score() direkt")
tradingbot-backend\services\signal_generator.py:318:        logger.warning("⚠️ _get_recommendation() är deprecated - använd SignalService.score() direkt")
tradingbot-backend\services\signal_generator.py:339:            logger.error(f"❌ Kunde inte hämta pris för {symbol}: {e}")
tradingbot-backend\services\signal_generator.py:344:        logger.warning("⚠️ _determine_signal_type() är deprecated - använd SignalService.score() direkt")
tradingbot-backend\services\signal_generator.py:370:            logger.error(f"❌ Fel vid signal strength evaluation: {e}")
tradingbot-backend\services\signal_generator.py:375:        logger.warning("⚠️ _generate_signal_reason() är deprecated - använd SignalService.score() direkt")
tradingbot-backend\services\signal_generator.py:396:            logger.info("LiveSignals aktiva symboler: %s", symbols)
tradingbot-backend\services\signal_generator.py:399:            logger.error(f"❌ Kunde inte hämta aktiva symboler: {e}")
tradingbot-backend\services\signal_generator.py:450:            logger.error(f"❌ Fel vid summary generation: {e}")
tradingbot-backend\services\signal_generator.py:473:            logger.error(f"❌ Fel vid history save: {e}")
tradingbot-backend\services\signal_generator.py:489:            logger.error(f"❌ Fel vid history retrieval: {e}")
tradingbot-backend\services\signal_generator.py:507:            logger.error(f"❌ Fel vid signal generation check: {e}")
tradingbot-backend\services\signal_service.py:126:        logger.info("🚀 SignalService initialiserad - enhetlig signal-hantering")
tradingbot-backend\services\signal_service.py:131:        logger.info("🔗 WebSocket service kopplad till SignalService")
tradingbot-backend\services\signal_service.py:144:        logger.info(f"⚡ Genererar {mode}-signaler för {len(symbols)} symboler")
tradingbot-backend\services\signal_service.py:170:                logger.error(f"❌ Fel vid fallback signal för {symbol}: {e}")
tradingbot-backend\services\signal_service.py:191:                    logger.info(f"✅ Enhanced signal för {symbol}: {signal.signal_type}")
tradingbot-backend\services\signal_service.py:193:                logger.error(f"❌ Kunde inte generera enhanced signal för {symbol}: {e}")
tradingbot-backend\services\signal_service.py:205:            logger.warning("⚠️ WebSocket service inte tillgänglig, fallback till standard")
tradingbot-backend\services\signal_service.py:221:                logger.error(f"❌ Kunde inte generera realtids-signal för {symbol}: {e}")
tradingbot-backend\services\signal_service.py:244:            logger.error(f"❌ Fel vid realtids-signal för {symbol}: {e}")
tradingbot-backend\services\signal_service.py:267:            logger.info(f"🗑️ Cache rensad för {symbol}")
tradingbot-backend\services\signal_service.py:271:            logger.info("🗑️ All cache rensad")
tradingbot-backend\services\strategy.py:129:        logger.warning("Ingen prisdata tillgänglig för strategiutvärdering")
tradingbot-backend\services\strategy.py:293:            logger.warning(f"Kunde inte beräkna viktad strategi: {e}")
tradingbot-backend\services\strategy.py:315:    logger.info(f"Strategiutvärdering: {signal} - {reason}")
tradingbot-backend\services\strategy.py:419:        logger.info(f"Detekterad regim: {regime}")
tradingbot-backend\services\strategy.py:420:        logger.info(f"Preset för regim '{regime}': {preset}")
tradingbot-backend\services\strategy.py:421:        logger.info(f"PRESETS keys: {list(PRESETS.keys())}")
tradingbot-backend\services\strategy.py:430:        logger.info(f"Nya vikter: {new_weights}")
tradingbot-backend\services\strategy.py:431:        logger.info(f"Preset w_ema: {preset.get('w_ema')}, w_rsi: {preset.get('w_rsi')}, w_atr: {preset.get('w_atr')}")
tradingbot-backend\services\strategy.py:469:            logger.warning(f"Kunde inte uppdatera strategy_settings.json: {e}")
tradingbot-backend\services\strategy.py:471:        logger.info(
tradingbot-backend\services\strategy.py:482:        logger.warning(f"Kunde inte uppdatera settings från regim: {e}")
tradingbot-backend\services\strategy.py:638:        logger.error(f"Batch regim-uppdatering fel: {e}")
tradingbot-backend\services\strategy_settings.py:78:            logger.warning(f"Kunde inte läsa overrides för strategiinställningar: {e}")
tradingbot-backend\services\strategy_settings.py:87:            logger.error(f"Kunde inte spara overrides för strategiinställningar: {e}")
tradingbot-backend\services\strategy_settings.py:96:            logger.info("Inga strategiinställningar hittades – använder default och skapar fil.")
tradingbot-backend\services\strategy_settings.py:100:            logger.warning(f"Kunde inte läsa strategiinställningar: {e}")
tradingbot-backend\services\strategy_settings.py:115:                logger.warning(f"Kunde inte applicera symboloverride för {symbol}: {e}")
tradingbot-backend\services\strategy_settings.py:133:            logger.error(f"Kunde inte spara strategiinställningar: {e}")
tradingbot-backend\services\symbols.py:59:                logger.warning("Oväntat symbolformat i filen, fallback till default")
tradingbot-backend\services\symbols.py:61:            logger.warning(f"Kunde inte läsa symbols-fil: {e}. Använder fallback.")
tradingbot-backend\services\symbols.py:124:                logger.info(
tradingbot-backend\services\symbols.py:130:            logger.warning("SymbolService refresh misslyckades: %s", e)
tradingbot-backend\services\templates.py:35:            logger.warning(f"Kunde inte läsa templates: {e}")
tradingbot-backend\services\trading_integration.py:55:            logger.info("✅ Trading-integration initialiserad")
tradingbot-backend\services\trading_integration.py:58:            logger.error(f"❌ Fel vid initialisering av trading-integration: {e}")
tradingbot-backend\services\trading_integration.py:82:            logger.info(f"✅ Plånboksinformation uppdaterad: {len(wallets)} plånböcker")
tradingbot-backend\services\trading_integration.py:85:            logger.error(f"❌ Fel vid uppdatering av plånboksinformation: {e}")
tradingbot-backend\services\trading_integration.py:99:            logger.info(f"✅ Positionsinformation uppdaterad: {len(positions)} positioner")
tradingbot-backend\services\trading_integration.py:102:            logger.error(f"❌ Fel vid uppdatering av positionsinformation: {e}")
tradingbot-backend\services\trading_integration.py:116:            logger.info(f"✅ Margin-information uppdaterad: {self.margin_info['leverage']}x hävstång")
tradingbot-backend\services\trading_integration.py:119:            logger.error(f"❌ Fel vid uppdatering av margin-information: {e}")
tradingbot-backend\services\trading_integration.py:143:                logger.info(f"✅ Marknadsdata uppdaterad för {symbol}: ${ticker['last_price']:,.2f}")
tradingbot-backend\services\trading_integration.py:146:            logger.error(f"❌ Fel vid uppdatering av marknadsdata för {symbol}: {e}")
tradingbot-backend\services\trading_integration.py:197:            logger.info(f"✅ Tradingmöjlighet utvärderad för {symbol}: {result['signal']}")
tradingbot-backend\services\trading_integration.py:202:            logger.error(f"❌ Fel vid utvärdering av tradingmöjlighet för {symbol}: {e}")
tradingbot-backend\services\trading_integration.py:273:            logger.error(f"❌ Fel vid riskbedömning för {symbol}: {e}")
tradingbot-backend\services\trading_integration.py:298:                logger.warning(f"⚠️ Kan inte handla {symbol}: {signal_data.get('reason', 'Okänd anledning')}")
tradingbot-backend\services\trading_integration.py:310:                    logger.warning(f"🚫 RiskManager block: {reason}")
tradingbot-backend\services\trading_integration.py:317:                logger.warning(f"RiskManager-kontroll misslyckades: {e}")
tradingbot-backend\services\trading_integration.py:321:                logger.info(f"ℹ️ Ingen handel för {symbol}: Signal är {signal}")
tradingbot-backend\services\trading_integration.py:340:            logger.info(f"🛒 Lägger {signal} order för {symbol}: {position_size} @ ${current_price:,.2f}")
tradingbot-backend\services\trading_integration.py:344:                logger.error(f"❌ Fel vid orderläggning för {symbol}: {result['error']}")
tradingbot-backend\services\trading_integration.py:357:            logger.info(f"✅ Order lagd för {symbol}: {result}")
tradingbot-backend\services\trading_integration.py:374:            logger.error(f"❌ Fel vid utförande av tradingsignal för {symbol}: {e}")
tradingbot-backend\services\trading_integration.py:426:            logger.error(f"❌ Fel vid beräkning av positionsstorlek för {symbol}: {e}")
tradingbot-backend\services\trading_integration.py:439:                logger.warning(f"⚠️ {symbol} handlas redan automatiskt")
tradingbot-backend\services\trading_integration.py:451:            logger.info(f"🤖 Startade automatiserad trading för {symbol}")
tradingbot-backend\services\trading_integration.py:454:            logger.error(f"❌ Fel vid start av automatiserad trading för {symbol}: {e}")
tradingbot-backend\services\trading_integration.py:474:                logger.info(f"🛑 Stoppade automatiserad trading för {symbol}")
tradingbot-backend\services\trading_integration.py:476:                logger.warning(f"⚠️ {symbol} handlades inte automatiskt")
tradingbot-backend\services\trading_integration.py:479:            logger.error(f"❌ Fel vid stopp av automatiserad trading för {symbol}: {e}")
tradingbot-backend\services\trading_integration.py:507:            logger.info(f"🎯 {symbol}: {signal} @ ${result.get('current_price', 0):,.2f} - {result.get('reason', '')}")
tradingbot-backend\services\trading_integration.py:519:            logger.error(f"❌ Fel vid hantering av realtidssignal: {e}")
tradingbot-backend\services\trading_integration.py:563:            logger.info(f"✅ Kontosammanfattning skapad: ${summary['total_balance_usd']:,.2f}")
tradingbot-backend\services\trading_integration.py:568:            logger.error(f"❌ Fel vid skapande av kontosammanfattning: {e}")
tradingbot-backend\services\trading_integration.py:581:            logger.info("🛑 Stoppade all automatiserad trading")
tradingbot-backend\services\trading_integration.py:584:            logger.error(f"❌ Fel vid stopp av all automatiserad trading: {e}")
tradingbot-backend\services\trading_service.py:41:        logger.info("🚀 TradingService initialiserad - enhetlig trading-hantering")
tradingbot-backend\services\trading_service.py:46:        logger.info("🔗 WebSocket service kopplad till TradingService")
tradingbot-backend\services\trading_service.py:60:        logger.info(f"💼 Exekverar {mode}-trade för {symbol}: {signal.signal_type}")
tradingbot-backend\services\trading_service.py:97:            logger.error(f"❌ Fel vid standard trade för {symbol}: {e}")
tradingbot-backend\services\trading_service.py:122:            logger.error(f"❌ Fel vid enhanced trade för {symbol}: {e}")
tradingbot-backend\services\trading_service.py:133:            logger.warning("⚠️ WebSocket service inte tillgänglig, fallback till standard")
tradingbot-backend\services\trading_service.py:147:            logger.error(f"❌ Fel vid realtids-trade för {symbol}: {e}")
tradingbot-backend\services\trading_service.py:236:            logger.info(f"🗑️ Trade-historik rensad för {symbol}")
tradingbot-backend\services\trading_service.py:240:            logger.info("🗑️ All trade-historik rensad")
tradingbot-backend\services\trading_window.py:67:            logger.warning("TRADING_RULES_FILE saknas – använder default från Settings")
tradingbot-backend\services\trading_window.py:70:            logger.warning(
tradingbot-backend\services\unified_circuit_breaker_service.py:118:        logger.info("⚡ UnifiedCircuitBreakerService initialiserad - enhetlig circuit breaker-hantering")
tradingbot-backend\services\unified_circuit_breaker_service.py:173:        logger.info(f"⚡ Circuit breaker registrerad: {name} ({config.cb_type.value})")
tradingbot-backend\services\unified_circuit_breaker_service.py:178:            logger.warning(f"⚠️ Okänd circuit breaker: {name}")
tradingbot-backend\services\unified_circuit_breaker_service.py:195:                logger.info(f"⚡ Circuit breaker {name} går till half-open state")
tradingbot-backend\services\unified_circuit_breaker_service.py:226:            logger.info(f"⚡ Circuit breaker {name} återställd till closed state")
tradingbot-backend\services\unified_circuit_breaker_service.py:231:        logger.debug(f"⚡ Success registrerad för {name}: {state.success_count} successes")
tradingbot-backend\services\unified_circuit_breaker_service.py:255:        logger.warning(f"⚡ Failure registrerad för {name}: {state.failure_count} failures")
tradingbot-backend\services\unified_circuit_breaker_service.py:269:                logger.info(f"⚡ Circuit breaker {name} går till half-open state")
tradingbot-backend\services\unified_circuit_breaker_service.py:314:        logger.warning(f"⚡ Circuit breaker {name} öppnad: {error_type}, cooldown: {backoff}s")
tradingbot-backend\services\unified_circuit_breaker_service.py:354:            logger.error(f"❌ Fel vid uppdatering av circuit breaker metrics: {e}")
tradingbot-backend\services\unified_circuit_breaker_service.py:375:            logger.error(f"❌ Fel vid skickande av circuit breaker notifikation: {e}")
tradingbot-backend\services\unified_circuit_breaker_service.py:423:            logger.error(f"❌ Okänd circuit breaker: {name}")
tradingbot-backend\services\unified_circuit_breaker_service.py:439:        logger.info(f"⚡ Circuit breaker {name} återställd")
tradingbot-backend\services\unified_circuit_breaker_service.py:447:            logger.info("⚡ Alla circuit breakers återställda")
tradingbot-backend\services\unified_circuit_breaker_service.py:450:            logger.error(f"❌ Fel vid återställning av alla circuit breakers: {e}")
tradingbot-backend\services\unified_risk_service.py:75:        logger.info("🛡️ UnifiedRiskService initialiserad - enhetlig riskhantering")
tradingbot-backend\services\unified_risk_service.py:83:                logger.info(f"📋 Riskvakter laddade från {self.guards_file}")
tradingbot-backend\services\unified_risk_service.py:106:                logger.info(f"📋 Default riskvakter skapade i {self.guards_file}")
tradingbot-backend\services\unified_risk_service.py:109:            logger.error(f"❌ Fel vid laddning av riskvakter: {e}")
tradingbot-backend\services\unified_risk_service.py:119:            logger.error(f"❌ Fel vid sparande av riskvakter: {e}")
tradingbot-backend\services\unified_risk_service.py:172:            logger.error(f"❌ Fel vid risk-evaluering: {e}")
tradingbot-backend\services\unified_risk_service.py:179:            logger.debug(f"📊 Trade registrerad för {symbol or 'unknown'}")
tradingbot-backend\services\unified_risk_service.py:181:            logger.error(f"❌ Fel vid registrering av trade: {e}")
tradingbot-backend\services\unified_risk_service.py:198:                    logger.warning(f"🚨 Circuit breaker öppnad efter {len(self.circuit_breaker.error_events)} fel")
tradingbot-backend\services\unified_risk_service.py:200:            logger.debug(f"📊 Fel registrerat. Totalt: {len(self.circuit_breaker.error_events)}")
tradingbot-backend\services\unified_risk_service.py:202:            logger.error(f"❌ Fel vid registrering av error: {e}")
tradingbot-backend\services\unified_risk_service.py:213:            logger.info("✅ Circuit breaker stängd efter timeout")
tradingbot-backend\services\unified_risk_service.py:239:                logger.warning(f"🚨 Max daily loss triggad: {guard['reason']}")
tradingbot-backend\services\unified_risk_service.py:245:            logger.error(f"❌ Fel vid kontroll av max daily loss: {e}")
tradingbot-backend\services\unified_risk_service.py:261:            logger.error(f"❌ Fel vid kontroll av kill-switch: {e}")
tradingbot-backend\services\unified_risk_service.py:292:                logger.warning(f"🚨 Exposure limit triggad: {reason}")
tradingbot-backend\services\unified_risk_service.py:298:            logger.error(f"❌ Fel vid kontroll av exposure limits: {e}")
tradingbot-backend\services\unified_risk_service.py:306:            logger.debug("⚠️ Daily PnL computation disabled to prevent hanging")
tradingbot-backend\services\unified_risk_service.py:309:            logger.error(f"❌ Kunde inte hämta dagens PnL: {e}")
tradingbot-backend\services\unified_risk_service.py:317:            logger.debug("⚠️ Equity computation disabled to prevent hanging")
tradingbot-backend\services\unified_risk_service.py:320:            logger.error(f"❌ Kunde inte hämta aktuell equity: {e}")
tradingbot-backend\services\unified_risk_service.py:332:                logger.info(f"🔄 Riskvakt återställd: {guard_name}")
tradingbot-backend\services\unified_risk_service.py:336:            logger.error(f"❌ Kunde inte återställa riskvakt {guard_name}: {e}")
tradingbot-backend\services\unified_risk_service.py:344:            logger.info("🔄 Circuit breaker återställd")
tradingbot-backend\services\unified_risk_service.py:347:            logger.error(f"❌ Kunde inte återställa circuit breaker: {e}")
tradingbot-backend\services\unified_risk_service.py:383:            logger.error(f"❌ Fel vid hämtning av risk-status: {e}")
tradingbot-backend\services\unified_risk_service.py:396:                logger.info(f"📝 Riskvakt konfiguration uppdaterad: {guard_name}")
tradingbot-backend\services\unified_risk_service.py:400:            logger.error(f"❌ Fel vid uppdatering av riskvakt konfiguration: {e}")
tradingbot-backend\services\unified_signal_service.py:53:        logger.info("🚀 UnifiedSignalService initialiserad - Single Source of Truth för signaler")
tradingbot-backend\services\unified_signal_service.py:69:            logger.debug(f"📊 Hämtar symboler: {len(symbols)} aktiva")
tradingbot-backend\services\unified_signal_service.py:72:            logger.error(f"❌ Fel vid hämtning av symboler: {e}")
tradingbot-backend\services\unified_signal_service.py:87:                logger.debug(f"📋 Använder cached regime data för {symbol}")
tradingbot-backend\services\unified_signal_service.py:95:                logger.warning(f"⚠️ Otillräcklig data för {symbol}: {len(candles) if candles else 0} candles")
tradingbot-backend\services\unified_signal_service.py:104:                logger.warning(f"⚠️ Otillräcklig OHLC data för {symbol}")
tradingbot-backend\services\unified_signal_service.py:129:            logger.debug(f"✅ Regime data för {symbol}: {regime}")
tradingbot-backend\services\unified_signal_service.py:133:            logger.error(f"❌ Fel vid hämtning av regime data för {symbol}: {e}")
tradingbot-backend\services\unified_signal_service.py:148:                logger.debug(f"📋 Använder cached signal för {symbol}")
tradingbot-backend\services\unified_signal_service.py:155:                logger.warning(f"⚠️ Ingen regime data för {symbol}")
tradingbot-backend\services\unified_signal_service.py:186:            logger.debug(f"✅ Signal för {symbol}: {signal.signal_type} (confidence: {sc.confidence})")
tradingbot-backend\services\unified_signal_service.py:190:            logger.error(f"❌ Fel vid generering av signal för {symbol}: {e}")
tradingbot-backend\services\unified_signal_service.py:201:            logger.info(f"⚡ Genererar enhetliga signaler för {len(symbols)} symboler")
tradingbot-backend\services\unified_signal_service.py:213:                    logger.error(f"❌ Signal generation error för {symbols[i]}: {signal}")
tradingbot-backend\services\unified_signal_service.py:232:            logger.info(f"📊 Genererade {len(valid_signals)} enhetliga signaler")
tradingbot-backend\services\unified_signal_service.py:236:            logger.error(f"❌ Fel vid generering av alla signaler: {e}")
tradingbot-backend\services\unified_signal_service.py:259:            logger.info(f"📊 Hämtar regime sammanfattning för {len(symbols)} symboler")
tradingbot-backend\services\unified_signal_service.py:271:                    logger.error(f"❌ Regime error för {symbols[i]}: {regime}")
tradingbot-backend\services\unified_signal_service.py:313:            logger.info(
tradingbot-backend\services\unified_signal_service.py:319:            logger.error(f"❌ Fel vid hämtning av regime sammanfattning: {e}")
tradingbot-backend\services\unified_signal_service.py:403:        logger.info("🗑️ UnifiedSignalService cache rensad")
tradingbot-backend\services\validation_service.py:74:        logger.info("🧪 ValidationService initialiserad - enhetlig test-hantering")
tradingbot-backend\services\validation_service.py:95:                logger.debug(f"📋 Använder cached probability validation för {symbol}")
tradingbot-backend\services\validation_service.py:115:                logger.warning(f"⚠️ {result.error_message}")
tradingbot-backend\services\validation_service.py:156:            logger.info(
tradingbot-backend\services\validation_service.py:162:            logger.error(f"❌ Fel vid probability validation: {e}")
tradingbot-backend\services\validation_service.py:188:                logger.debug(f"📋 Använder cached strategy validation för {symbol}")
tradingbot-backend\services\validation_service.py:207:                logger.warning(f"⚠️ {result.error_message}")
tradingbot-backend\services\validation_service.py:220:            logger.info(
tradingbot-backend\services\validation_service.py:226:            logger.error(f"❌ Fel vid strategy validation: {e}")
tradingbot-backend\services\validation_service.py:256:                logger.debug(f"📋 Använder cached backtest för {symbol}")
tradingbot-backend\services\validation_service.py:278:                logger.warning(f"⚠️ {result.error_message}")
tradingbot-backend\services\validation_service.py:291:            logger.info(
tradingbot-backend\services\validation_service.py:297:            logger.error(f"❌ Fel vid backtest: {e}")
tradingbot-backend\services\validation_service.py:354:            logger.error(f"❌ Fel vid beräkning av probability metrics: {e}")
tradingbot-backend\services\validation_service.py:392:            logger.error(f"❌ Fel vid strategy simulation: {e}")
tradingbot-backend\services\validation_service.py:447:            logger.error(f"❌ Fel vid backtest simulation: {e}")
tradingbot-backend\services\validation_service.py:458:        logger.info("🗑️ Validation cache rensad")
tradingbot-backend\services\watchlist_service.py:43:            logger.debug("📋 Använder cached watchlist data")
tradingbot-backend\services\watchlist_service.py:90:                logger.warning(f"Fel vid hämtning av data för {s}: {e}")
tradingbot-backend\services\watchlist_service.py:101:            logger.warning(f"⚠️ Batch margin-status misslyckades: {e}")
tradingbot-backend\services\ws_first_data_service.py:101:                logger.info("🚫 WS-anslutning avstängd via WS_CONNECT_ON_START=False")
tradingbot-backend\services\ws_first_data_service.py:115:                logger.info(f"🚀 Initialiserar WS-prenumerationer för {len(symbols)} symboler")
tradingbot-backend\services\ws_first_data_service.py:142:                        logger.warning(f"Kunde inte prenumerera på {symbol}: {e}")
tradingbot-backend\services\ws_first_data_service.py:144:            logger.info("✅ WS-First Data Service initialiserad")
tradingbot-backend\services\ws_first_data_service.py:155:            logger.error(f"❌ Fel vid initialisering av WS-First Data Service: {e}")
tradingbot-backend\services\ws_first_data_service.py:275:            logger.error(f"Fel vid hantering av WS candles för {symbol} {timeframe}: {e}")
tradingbot-backend\services\ws_first_data_service.py:304:            logger.error(f"Fel vid hantering av WS ticker för {symbol}: {e}")
tradingbot-backend\services\ws_first_data_service.py:337:            logger.debug(f"🔄 REST fallback för ticker {symbol}")
tradingbot-backend\services\ws_first_data_service.py:361:            logger.error(f"Fel vid hämtning av ticker för {symbol}: {e}")
tradingbot-backend\services\ws_first_data_service.py:433:            logger.debug(f"🔄 REST fallback för candles {symbol} {timeframe}")
tradingbot-backend\services\ws_first_data_service.py:468:            logger.error(f"Fel vid hämtning av candles för {symbol} {timeframe}: {e}")
tradingbot-backend\services\ws_first_data_service.py:496:                    logger.info(f"📚 Backfill klar för {sym} {tf}: +{inserted} rader")
tradingbot-backend\services\ws_first_data_service.py:498:                    logger.warning(f"⚠️ Backfill misslyckades för {sym} {tf}: {ie}")
tradingbot-backend\services\ws_strategy.py:26:        self.logger.info("🎯 WS Strategy Service initialiserad")
tradingbot-backend\services\ws_strategy.py:52:                self.logger.warning(f"⚠️ Okänd strategiflagga: {flag_name}")
tradingbot-backend\services\ws_strategy.py:55:            self.logger.info(f"✅ Strategiflagga uppdaterad: {flag_name} = {value}")
tradingbot-backend\services\ws_strategy.py:59:            self.logger.error(f"❌ Fel vid uppdatering av strategiflagga {flag_name}: {e}")
tradingbot-backend\utils\advanced_rate_limiter.py:228:                logger.warning(f"Rate limit nått för {endpoint_type.value} ({endpoint}), väntar {wait_time:.1f}s")
tradingbot-backend\utils\advanced_rate_limiter.py:355:            logger.warning(
tradingbot-backend\utils\bitfinex_client.py:58:        logger.info(f"Hämtade {len(orders)} aktiva ordrar")
tradingbot-backend\utils\bitfinex_client.py:60:        logger.error(f"Fel vid hämtning av ordrar: {e}")
tradingbot-backend\utils\bitfinex_client.py:64:    logger.info("WebSocket auth message generated (content redacted)")
tradingbot-backend\utils\bitfinex_rate_limiter.py:56:                    logger.warning(f"Rate limit nått för {endpoint}, väntar {wait_time:.1f}s")
tradingbot-backend\utils\bitfinex_rate_limiter.py:94:            logger.warning(
tradingbot-backend\utils\json_optimizer.py:38:                logger.info("✅ orjson tillgänglig för snabb JSON parsing")
tradingbot-backend\utils\json_optimizer.py:40:                logger.warning("⚠️ orjson inte tillgänglig, använder standard json")
tradingbot-backend\utils\json_optimizer.py:59:            logger.error(f"❌ JSON parsing fel: {e}")
tradingbot-backend\utils\json_optimizer.py:80:            logger.error(f"❌ JSON serialisering fel: {e}")
tradingbot-backend\utils\json_optimizer.py:103:            logger.error(f"❌ Cached JSON parsing fel: {e}")
tradingbot-backend\utils\json_optimizer.py:123:            logger.error(f"❌ Schema validering fel: {e}")
tradingbot-backend\utils\json_optimizer.py:143:                logger.warning(f"⚠️ Fel vid parsing av item {i}: {e}")
tradingbot-backend\utils\json_optimizer.py:214:            logger.info("🗑️ JSON cache rensad")
tradingbot-backend\utils\json_optimizer.py:248:                logger.warning(f"⚠️ Fel vid parsing av candle: {e}")
tradingbot-backend\utils\json_optimizer.py:316:            logger.error(f"❌ Fel vid parsing av order: {e}")
tradingbot-backend\utils\json_optimizer.py:336:                logger.warning(f"⚠️ Fel vid parsing av order batch: {e}")
tradingbot-backend\utils\logger.py:8:import logging
tradingbot-backend\utils\logger.py:14:class SafeFormatter(logging.Formatter):
tradingbot-backend\utils\logger.py:43:    def format(self, record: logging.LogRecord) -> str:
tradingbot-backend\utils\logger.py:56:def get_logger(name: str) -> logging.Logger:
tradingbot-backend\utils\logger.py:64:        logging.Logger: Konfigurerad logger
tradingbot-backend\utils\logger.py:66:    logger = logging.getLogger(name)
tradingbot-backend\utils\logger.py:69:    if not logger.handlers:
tradingbot-backend\utils\logger.py:77:        console_handler = logging.StreamHandler(sys.stdout)
tradingbot-backend\utils\logger.py:79:        logger.addHandler(console_handler)
tradingbot-backend\utils\logger.py:90:            file_handler = logging.FileHandler(log_path, encoding="utf-8")
tradingbot-backend\utils\logger.py:92:            logger.addHandler(file_handler)
tradingbot-backend\utils\logger.py:98:        logger.setLevel(logging.INFO)
tradingbot-backend\utils\nonce_validation.py:32:        logger.error(f"Fel vid läsning av nonce-fil: {e}")
tradingbot-backend\ws\auth.py:22:logger.info(f"WebSocket API Key status: {'✅ Konfigurerad' if settings.BITFINEX_WS_API_KEY else '❌ Saknas'}")
tradingbot-backend\ws\auth.py:23:logger.info(f"WebSocket API Secret status: {'✅ Konfigurerad' if settings.BITFINEX_WS_API_SECRET else '❌ Saknas'}")
tradingbot-backend\ws\auth.py:92:        logger.error(safe_log_data(e, "Fel vid generering av tokens"))
tradingbot-backend\ws\auth.py:118:            logger.warning(f"Token har löpt ut för användare {payload.get('sub')}")
tradingbot-backend\ws\auth.py:121:        logger.info(f"{token_type.capitalize()}-token validerad för användare {payload.get('sub')}")
tradingbot-backend\ws\auth.py:125:        logger.warning("Token har löpt ut")
tradingbot-backend\ws\auth.py:130:        logger.warning(safe_log_data(e, f"Ogiltig token: {mask_token(token)}"))
tradingbot-backend\ws\auth.py:135:        logger.error(safe_log_data(e, f"Fel vid validering av token: {mask_token(token)}"))
tradingbot-backend\ws\auth.py:154:            logger.warning("❌ Ogiltig refresh token")
tradingbot-backend\ws\auth.py:159:            logger.warning("❌ Försök att förnya med fel typ av token")
tradingbot-backend\ws\auth.py:186:        logger.info(f"✅ Access token förnyad för användare {user_id}")
tradingbot-backend\ws\auth.py:197:        logger.error(f"❌ Fel vid förnyelse av token: {e}")
tradingbot-backend\ws\auth.py:213:        logger.info(f"Socket.IO anslutningsförsök från {environ.get('REMOTE_ADDR', 'okänd')}")
tradingbot-backend\ws\auth.py:214:        logger.info(f"HTTP_USER_AGENT: {environ.get('HTTP_USER_AGENT', 'okänd')}")
tradingbot-backend\ws\auth.py:219:            logger.info("🔓 Tillåter localhost-anslutning utan autentisering (utvecklingsläge)")
tradingbot-backend\ws\auth.py:235:                logger.warning("⚠️ Token skickades via URL-parameter istället för Authorization-header")
tradingbot-backend\ws\auth.py:238:                logger.warning("❌ Ingen Authorization-header eller token-parameter hittades")
tradingbot-backend\ws\auth.py:245:            logger.warning("❌ Felaktigt format på Authorization-header (måste vara 'Bearer TOKEN')")
tradingbot-backend\ws\auth.py:252:            logger.warning("❌ Token validering misslyckades")
tradingbot-backend\ws\auth.py:261:            logger.warning(f"⚠️ Möjlig NTP-drift detekterad. Server: {current_time}, Token: {token_iat}")
tradingbot-backend\ws\auth.py:266:        logger.info(f"✅ Autentisering lyckades för användare: {payload.get('sub')}")
tradingbot-backend\ws\auth.py:270:        logger.error(f"❌ Fel vid autentisering av Socket.IO: {e}")
tradingbot-backend\ws\manager.py:45:        logger.warning(f"UI push misslyckades: {e}")
tradingbot-backend\ws\manager.py:52:    logger.info(f"Socket.IO anslutningsförsök via middleware: {environ.get('REMOTE_ADDR', 'okänd')}")
tradingbot-backend\ws\manager.py:60:        logger.warning(f"❌ Socket.IO autentisering misslyckades från {environ.get('REMOTE_ADDR', 'okänd')}")
tradingbot-backend\ws\manager.py:73:        logger.info(f"Socket.IO anslutning för sid: {sid}")
tradingbot-backend\ws\manager.py:74:        logger.info(f"QUERY_STRING: {environ.get('QUERY_STRING', 'okänd')}")
tradingbot-backend\ws\manager.py:75:        logger.info(f"HTTP_ORIGIN: {environ.get('HTTP_ORIGIN', 'okänd')}")
tradingbot-backend\ws\manager.py:76:        logger.info(f"PATH_INFO: {environ.get('PATH_INFO', 'okänd')}")
tradingbot-backend\ws\manager.py:86:            logger.warning(f"❌ Socket.IO autentisering misslyckades för sid: {sid}")
tradingbot-backend\ws\manager.py:91:        logger.info(f"✅ Socket.IO-klient autentiserad och ansluten: {sid}")
tradingbot-backend\ws\manager.py:96:        logger.error(f"Fel vid Socket.IO-anslutning: {e}")
tradingbot-backend\ws\manager.py:103:    logger.info(f"Socket.IO-klient frånkopplad: {sid}")
tradingbot-backend\ws\manager.py:119:            logger.info(f"✅ Token genererad för användare: {user_id}")
tradingbot-backend\ws\manager.py:122:            logger.error(f"❌ Fel vid generering av token för användare: {user_id}")
tradingbot-backend\ws\manager.py:125:        logger.error(f"❌ Fel vid hantering av token-begäran: {e}")
tradingbot-backend\ws\manager.py:137:            logger.warning("❌ Refresh token saknas i begäran")
tradingbot-backend\ws\manager.py:145:            logger.info(f"✅ Token förnyad för användare: {token_response.get('user_id')}")
tradingbot-backend\ws\manager.py:148:            logger.warning("❌ Kunde inte förnya token")
tradingbot-backend\ws\manager.py:151:        logger.error(f"❌ Fel vid förnyelse av token: {e}")
tradingbot-backend\ws\manager.py:174:        logger.info("Initialiserar WebSocket-hanterare...")
tradingbot-backend\ws\manager.py:179:            logger.info("Wallet-uppdateringar startade")
tradingbot-backend\ws\manager.py:181:            logger.warning("Kunde inte starta wallet-uppdateringar")
tradingbot-backend\ws\manager.py:186:            logger.info("Positions-uppdateringar startade")
tradingbot-backend\ws\manager.py:188:            logger.warning("Kunde inte starta positions-uppdateringar")
tradingbot-backend\ws\manager.py:195:        logger.info("WebSocket-hanterare initialiserad")
tradingbot-backend\ws\manager.py:210:                logger.error(f"Fel vid hämtning av plånböcker: {e}")
tradingbot-backend\ws\manager.py:221:                logger.error(f"Fel vid hämtning av positioner: {e}")
tradingbot-backend\ws\manager.py:240:                logger.error(f"Fel vid health: {e}")
tradingbot-backend\ws\manager.py:269:                logger.error(f"Fel vid emit av {event}: {e}")
tradingbot-backend\ws\manager.py:278:                logger.error(f"Fel i on_os: {e}")
tradingbot-backend\ws\manager.py:286:                logger.error(f"Fel i on_on: {e}")
tradingbot-backend\ws\manager.py:294:                logger.error(f"Fel i on_ou: {e}")
tradingbot-backend\ws\manager.py:304:                logger.error(f"Fel i on_oc: {e}")
tradingbot-backend\ws\manager.py:313:                logger.error(f"Fel i on_te: {e}")
tradingbot-backend\ws\manager.py:321:                logger.error(f"Fel i on_tu: {e}")
tradingbot-backend\ws\manager.py:342:                    logger.info(
tradingbot-backend\ws\manager.py:346:                    logger.warning(f"BracketManager återhämtning misslyckades: {ie}")
tradingbot-backend\ws\manager.py:348:                logger.warning(f"Kunde inte aktivera DMS: {e}")
tradingbot-backend\ws\manager.py:361:            logger.error(f"Fel vid notification emit: {e}")
tradingbot-backend\ws\manager.py:367:        logger.info("Stänger WebSocket-anslutningar...")
tradingbot-backend\ws\manager.py:369:        logger.info("WebSocket-anslutningar stängda")
tradingbot-backend\ws\order_handler.py:51:            logger.error("WebSocket-anslutning saknas")
tradingbot-backend\ws\order_handler.py:58:            logger.info("WebSocket autentiseringsförfrågan skickad")
tradingbot-backend\ws\order_handler.py:65:            logger.error(f"Fel vid WebSocket-autentisering: {e}")
tradingbot-backend\ws\order_handler.py:119:            logger.info(f"WebSocket order skickad: {formatted_order}")
tradingbot-backend\ws\order_handler.py:125:            logger.error(error_msg)
tradingbot-backend\ws\order_handler.py:151:            logger.info(f"WebSocket avbryt order skickad: {order_id}")
tradingbot-backend\ws\order_handler.py:157:            logger.error(error_msg)
tradingbot-backend\ws\order_handler.py:183:            logger.info("WebSocket förfrågan om aktiva order skickad")
tradingbot-backend\ws\order_handler.py:191:            logger.error(error_msg)
tradingbot-backend\ws\position_handler.py:43:            logger.info("WebSocket redan autentiserad för positionsuppdateringar")
tradingbot-backend\ws\position_handler.py:54:                    logger.info("WebSocket autentisering lyckades för positionsuppdateringar")
tradingbot-backend\ws\position_handler.py:60:                    logger.error(f"WebSocket autentiseringsfel för positionsuppdateringar: {msg}")
tradingbot-backend\ws\position_handler.py:76:                logger.error("Timeout vid WebSocket-autentisering för positionsuppdateringar")
tradingbot-backend\ws\position_handler.py:80:            logger.exception(f"Fel vid WebSocket-autentisering för positionsuppdateringar: {e}")
tradingbot-backend\ws\position_handler.py:123:            logger.info("Prenumeration på positionsuppdateringar startad")
tradingbot-backend\ws\position_handler.py:127:            logger.exception(f"Fel vid start av positionsuppdateringar: {e}")
tradingbot-backend\ws\position_handler.py:139:                logger.warning(f"Ogiltig positionsuppdatering: {position_data}")
tradingbot-backend\ws\position_handler.py:177:                    logger.error(f"Fel i positions-callback: {e}")
tradingbot-backend\ws\position_handler.py:182:            logger.debug(f"Positionsuppdatering bearbetad: {symbol} {status} {amount}")
tradingbot-backend\ws\position_handler.py:185:            logger.error(f"Fel vid bearbetning av positionsuppdatering: {e}")
tradingbot-backend\ws\position_handler.py:196:                logger.warning(f"Ogiltig positions-snapshot: {positions_data}")
tradingbot-backend\ws\position_handler.py:224:                    logger.error(f"Fel i positions-callback: {e}")
tradingbot-backend\ws\position_handler.py:229:            logger.info(f"Positions-snapshot bearbetad: {len(formatted_positions)} positioner")
tradingbot-backend\ws\position_handler.py:232:            logger.error(f"Fel vid bearbetning av positions-snapshot: {e}")
tradingbot-backend\ws\position_handler.py:243:                logger.warning(f"Ogiltig positionsstängning: {position_data}")
tradingbot-backend\ws\position_handler.py:259:                    logger.error(f"Fel i positions-callback: {e}")
tradingbot-backend\ws\position_handler.py:264:            logger.info(f"Position stängd: {symbol}")
tradingbot-backend\ws\position_handler.py:267:            logger.error(f"Fel vid bearbetning av positionsstängning: {e}")
tradingbot-backend\ws\wallet_handler.py:43:            logger.info("WebSocket redan autentiserad för plånboksuppdateringar")
tradingbot-backend\ws\wallet_handler.py:54:                    logger.info("WebSocket autentisering lyckades för plånboksuppdateringar")
tradingbot-backend\ws\wallet_handler.py:60:                    logger.error(f"WebSocket autentiseringsfel för plånboksuppdateringar: {msg}")
tradingbot-backend\ws\wallet_handler.py:76:                logger.error("Timeout vid WebSocket-autentisering för plånboksuppdateringar")
tradingbot-backend\ws\wallet_handler.py:80:            logger.exception(f"Fel vid WebSocket-autentisering för plånboksuppdateringar: {e}")
tradingbot-backend\ws\wallet_handler.py:119:            logger.info("Prenumeration på plånboksuppdateringar startad")
tradingbot-backend\ws\wallet_handler.py:123:            logger.exception(f"Fel vid start av plånboksuppdateringar: {e}")
tradingbot-backend\ws\wallet_handler.py:135:                logger.warning(f"Ogiltig plånboksuppdatering: {wallet_data}")
tradingbot-backend\ws\wallet_handler.py:169:                    logger.error(f"Fel i plånboks-callback: {e}")
tradingbot-backend\ws\wallet_handler.py:174:            logger.debug(f"Plånboksuppdatering bearbetad: {wallet_type} {currency} {balance}")
tradingbot-backend\ws\wallet_handler.py:177:            logger.error(f"Fel vid bearbetning av plånboksuppdatering: {e}")
tradingbot-backend\ws\wallet_handler.py:188:                logger.warning(f"Ogiltig plånboks-snapshot: {wallets_data}")
tradingbot-backend\ws\wallet_handler.py:212:                    logger.error(f"Fel i plånboks-callback: {e}")
tradingbot-backend\ws\wallet_handler.py:217:            logger.info(f"Plånboks-snapshot bearbetad: {len(formatted_wallets)} plånböcker")
tradingbot-backend\ws\wallet_handler.py:220:            logger.error(f"Fel vid bearbetning av plånboks-snapshot: {e}")


