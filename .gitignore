# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
# Python lib directories (but NOT frontend src/lib)
tradingbot-backend/lib/
**/lib/
!frontend/**/lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.*
!.env.example
.envrc
.venv
.venv_clean
env/
venv/
ENV/
env.bak/
venv.bak/
# Config files - exclude actual configs but include templates
tradingbot-backend/config/*.json
!tradingbot-backend/config/*.json.template
!tradingbot-backend/config/order_templates.json

# Model files - exclude generated ML models but keep directory structure
tradingbot-backend/config/models/
!tradingbot-backend/config/models/.gitkeep
# tillåt exempel-miljöfil
!tradingbot-backend/env.example

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer,
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# Bitfinex nonce-tracking
.nonce_tracker.json
bandit-report*.json

# Trading Bot specific exclusions
# Temporary token files (may contain test data)
tmp_*.json
tmp_token.json
tmp_ws_token.json

# Test files that may contain sensitive data
test_direct_bitfinex.py
simple_socketio_server.py
simple_ws_test_server.py
ws_test.html
# Legacy files removed - no longer needed

# Debug and development files
debug_settings.py

# Performance and monitoring files
*.perf
*.profile

# Database files
*.db
*.sqlite
*.sqlite3

# Backup files
*.bak
*.backup
*~

# Frontend
frontend/_backup/
frontend/dashboard/node_modules/
frontend/dashboard/dist/
frontend/dashboard/.vite/
frontend/dashboard/.env
frontend/dashboard/.env.*
!frontend/dashboard/.env.example
frontend/dashboard/.eslintcache
frontend/dashboard/coverage/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# Log files (additional patterns)
logs/
*.log.*
tradingbot.log # kommentera ut om du vill se loggarna

# OpenAI Batch local artifacts (removed)

# CodeQL Security Analysis artifacts (handled by GitHub)
*.sarif
*.csv

# Supabase/Edge Functions local artifacts
supabase/.temp/
supabase/.output/

# Node
**/node_modules/
**/dist/

# Local env for scripts
scripts/**/.venv/

# SQLite backups
tradingbot-backend/config/*.sqlite3.backup*
audit-backend.json

# AI agent locks (do not commit)
.agent-locks/
.agent-communication/

# AI agent communication (do not commit)
.agent-communication/

# Tillåt specifika filer
!.agent-communication/contracts.json
!.agent-communication/messages.json
!.agent-communication/notifications.json
!.agent-communication/status.json
!.agent-communication/contracts.view.txt

# Analysis backups and scans (local artifacts)
analysis/backup_nul_issues/
analysis/nul_scan.json
analysis/nul_scan_after.json

# Pre-commit local caches (per-user)
.pre-commit-config.yaml.bak
.pre-commit-cache/
.cache/pre-commit/

# VS Code workspace state
.vscode/**
