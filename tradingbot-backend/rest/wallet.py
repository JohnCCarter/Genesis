"""
Wallet Service - TradingBot Backend

Denna modul hanterar pl√•nboksinformation fr√•n Bitfinex API.
Inkluderar funktioner f√∂r att h√§mta pl√•nbokssaldon och hantera pl√•nbokstransaktioner.
"""

from typing import List, Optional

import httpx
from pydantic import BaseModel

from config.settings import Settings
from rest.auth import build_auth_headers
from utils.logger import get_logger

logger = get_logger(__name__)


class WalletBalance(BaseModel):
    """Modell f√∂r pl√•nbokssaldo."""

    wallet_type: str  # "exchange", "margin", "funding"
    currency: str
    balance: float
    unsettled_interest: float = 0.0
    available_balance: Optional[float] = None

    @classmethod
    def from_bitfinex_data(cls, data: List) -> "WalletBalance":
        """Skapar en WalletBalance fr√•n Bitfinex API-data."""
        if len(data) < 4:
            raise ValueError(f"Ogiltig pl√•nboksdata: {data}")

        return cls(
            wallet_type=data[0],
            currency=data[1],
            balance=float(data[2]),
            unsettled_interest=float(data[3]) if len(data) > 3 else 0.0,
            available_balance=float(data[4]) if len(data) > 4 else None,
        )


class WalletService:
    """Service f√∂r att h√§mta och hantera pl√•nboksinformation fr√•n Bitfinex."""

    def __init__(self):
        self.settings = Settings()
        self.base_url = getattr(self.settings, "BITFINEX_AUTH_API_URL", None) or self.settings.BITFINEX_API_URL

    async def get_wallets(self) -> List[WalletBalance]:
        """
        H√§mtar alla pl√•nb√∂cker fr√•n Bitfinex.

        Returns:
            Lista med WalletBalance-objekt
        """
        try:
            endpoint = "auth/r/wallets"
            headers = build_auth_headers(endpoint)

            async with httpx.AsyncClient() as client:
                logger.info(f"üåê REST API: H√§mtar pl√•nb√∂cker fr√•n {self.base_url}/{endpoint}")
                response = await client.post(f"{self.base_url}/{endpoint}", headers=headers)
                response.raise_for_status()

                wallets_data = response.json()
                logger.info(f"‚úÖ REST API: H√§mtade {len(wallets_data)} pl√•nb√∂cker")

                wallets = [WalletBalance.from_bitfinex_data(wallet) for wallet in wallets_data]
                return wallets

        except Exception as e:
            logger.error(f"Fel vid h√§mtning av pl√•nb√∂cker: {e}")
            raise

    async def get_wallet_by_type_and_currency(self, wallet_type: str, currency: str) -> Optional[WalletBalance]:
        """
        H√§mtar en specifik pl√•nbok baserat p√• typ och valuta.

        Args:
            wallet_type: Pl√•nbokstyp ("exchange", "margin", "funding")
            currency: Valutakod (t.ex. "BTC", "USD")

        Returns:
            WalletBalance-objekt eller None om pl√•nboken inte hittas
        """
        wallets = await self.get_wallets()

        for wallet in wallets:
            if wallet.wallet_type.lower() == wallet_type.lower() and wallet.currency.lower() == currency.lower():
                return wallet

        return None

    async def get_exchange_wallets(self) -> List[WalletBalance]:
        """
        H√§mtar alla exchange-pl√•nb√∂cker.

        Returns:
            Lista med WalletBalance-objekt f√∂r exchange-pl√•nb√∂cker
        """
        wallets = await self.get_wallets()
        return [wallet for wallet in wallets if wallet.wallet_type.lower() == "exchange"]

    async def get_margin_wallets(self) -> List[WalletBalance]:
        """
        H√§mtar alla margin-pl√•nb√∂cker.

        Returns:
            Lista med WalletBalance-objekt f√∂r margin-pl√•nb√∂cker
        """
        wallets = await self.get_wallets()
        return [wallet for wallet in wallets if wallet.wallet_type.lower() == "margin"]

    async def get_funding_wallets(self) -> List[WalletBalance]:
        """
        H√§mtar alla funding-pl√•nb√∂cker.

        Returns:
            Lista med WalletBalance-objekt f√∂r funding-pl√•nb√∂cker
        """
        wallets = await self.get_wallets()
        return [wallet for wallet in wallets if wallet.wallet_type.lower() == "funding"]

    async def get_total_balance_usd(self) -> float:
        """
        Ber√§knar det totala saldot i USD √∂ver alla pl√•nb√∂cker.
        Detta √§r en f√∂renklad implementation som antar att USD-pl√•nb√∂cker har direkt USD-v√§rde
        och att andra valutor skulle beh√∂va konverteras (inte implementerat h√§r).

        Returns:
            Totalt saldo i USD
        """
        wallets = await self.get_wallets()
        usd_wallets = [wallet for wallet in wallets if wallet.currency.upper() == "USD"]

        total_usd = sum(wallet.balance for wallet in usd_wallets)
        return total_usd


# Skapa en global instans av WalletService
wallet_service = WalletService()


# Exportera funktioner f√∂r enkel anv√§ndning
async def get_wallets() -> List[WalletBalance]:
    return await wallet_service.get_wallets()


async def get_wallet_by_type_and_currency(wallet_type: str, currency: str) -> Optional[WalletBalance]:
    return await wallet_service.get_wallet_by_type_and_currency(wallet_type, currency)


async def get_exchange_wallets() -> List[WalletBalance]:
    return await wallet_service.get_exchange_wallets()


async def get_margin_wallets() -> List[WalletBalance]:
    return await wallet_service.get_margin_wallets()


async def get_funding_wallets() -> List[WalletBalance]:
    return await wallet_service.get_funding_wallets()


async def get_total_balance_usd() -> float:
    return await wallet_service.get_total_balance_usd()
