"""
Positions History Service - TradingBot Backend

Denna modul hanterar historiska positioner fr√•n Bitfinex API.
Inkluderar funktioner f√∂r att h√§mta positionshistorik och hantera positionsdata.
"""

from datetime import datetime
from typing import Any, Dict, List, Optional

import httpx
from config.settings import Settings
from pydantic import BaseModel
from rest.auth import build_auth_headers
from utils.logger import get_logger

logger = get_logger(__name__)


class PositionHistory(BaseModel):
    """Modell f√∂r en historisk position."""

    id: Optional[int] = None
    symbol: str
    status: str  # "ACTIVE", "CLOSED"
    amount: float
    base_price: float
    funding: float = 0.0
    funding_type: int = 0  # 0 f√∂r daily, 1 f√∂r term
    profit_loss: Optional[float] = None
    profit_loss_percentage: Optional[float] = None
    liquidation_price: Optional[float] = None
    created_at: Optional[datetime] = None
    closed_at: Optional[datetime] = None

    @property
    def is_long(self) -> bool:
        """Returnerar True om positionen √§r long."""
        return self.amount > 0

    @property
    def is_short(self) -> bool:
        """Returnerar True om positionen √§r short."""
        return self.amount < 0

    @classmethod
    def from_bitfinex_data(cls, data: List) -> "PositionHistory":
        """Skapar en PositionHistory fr√•n Bitfinex API-data."""
        if len(data) < 6:
            raise ValueError(f"Ogiltig positionsdata: {data}")

        # Skapa en grundl√§ggande position
        position = cls(
            symbol=data[0],
            status=data[1],
            amount=float(data[2]) if data[2] is not None else 0.0,
            base_price=float(data[3]) if data[3] is not None else 0.0,
            funding=float(data[4]) if len(data) > 4 and data[4] is not None else 0.0,
            funding_type=int(data[5]) if len(data) > 5 and data[5] is not None else 0,
        )

        # L√§gg till ytterligare f√§lt om de finns
        if len(data) > 6 and data[6] is not None:
            position.profit_loss = float(data[6])
        if len(data) > 7 and data[7] is not None:
            position.profit_loss_percentage = float(data[7])
        if len(data) > 8 and data[8] is not None:
            position.liquidation_price = float(data[8])
        if len(data) > 9 and data[9] is not None:
            position.created_at = datetime.fromtimestamp(data[9] / 1000)
        if len(data) > 10 and data[10] is not None:
            position.closed_at = datetime.fromtimestamp(data[10] / 1000)
        if len(data) > 11 and data[11] is not None:
            position.id = int(data[11])

        return position


class PositionsHistoryService:
    """Service f√∂r att h√§mta och hantera positionshistorik fr√•n Bitfinex."""

    def __init__(self):
        self.settings = Settings()
        self.base_url = (
            getattr(self.settings, "BITFINEX_AUTH_API_URL", None)
            or self.settings.BITFINEX_API_URL
        )

    async def get_positions_history(
        self, start: Optional[int] = None, end: Optional[int] = None, limit: int = 50
    ) -> List[PositionHistory]:
        """
        H√§mtar positionshistorik fr√•n Bitfinex.

        Args:
            start: Starttid i millisekunder sedan epoch (valfritt)
            end: Sluttid i millisekunder sedan epoch (valfritt)
            limit: Maximalt antal positioner att h√§mta (standard: 50)

        Returns:
            Lista med PositionHistory-objekt
        """
        try:
            endpoint = "auth/r/positions/hist"

            # Skapa payload med filter
            payload = {}
            if start:
                payload["start"] = start
            if end:
                payload["end"] = end
            if limit:
                payload["limit"] = limit

            headers = build_auth_headers(endpoint, payload)

            async with httpx.AsyncClient() as client:
                logger.info(
                    f"üåê REST API: H√§mtar positionshistorik fr√•n {self.base_url}/{endpoint}"
                )
                response = await client.post(
                    f"{self.base_url}/{endpoint}", headers=headers, json=payload
                )
                response.raise_for_status()

                positions_data = response.json()
                logger.info(
                    f"‚úÖ REST API: H√§mtade {len(positions_data)} historiska positioner"
                )

                positions = [
                    PositionHistory.from_bitfinex_data(position)
                    for position in positions_data
                ]
                return positions

        except Exception as e:
            logger.error(f"Fel vid h√§mtning av positionshistorik: {e}")
            raise

    async def get_positions_snapshot(self) -> List[PositionHistory]:
        """
        H√§mtar en √∂gonblicksbild av positioner fr√•n Bitfinex.

        Returns:
            Lista med PositionHistory-objekt
        """
        try:
            endpoint = "auth/r/positions/snap"
            headers = build_auth_headers(endpoint)

            async with httpx.AsyncClient() as client:
                logger.info(
                    f"üåê REST API: H√§mtar positions√∂gonblicksbild fr√•n {self.base_url}/{endpoint}"
                )
                response = await client.post(
                    f"{self.base_url}/{endpoint}", headers=headers
                )
                response.raise_for_status()

                positions_data = response.json()
                logger.info(
                    f"‚úÖ REST API: H√§mtade {len(positions_data)} positioner i √∂gonblicksbilden"
                )

                positions = [
                    PositionHistory.from_bitfinex_data(position)
                    for position in positions_data
                ]
                return positions

        except Exception as e:
            logger.error(f"Fel vid h√§mtning av positions√∂gonblicksbild: {e}")
            raise

    async def get_positions_audit(
        self,
        symbol: str,
        start: Optional[int] = None,
        end: Optional[int] = None,
        limit: int = 50,
    ) -> List[PositionHistory]:
        """
        H√§mtar positionsrevision fr√•n Bitfinex.

        Args:
            symbol: Handelssymbol (t.ex. "tBTCUSD")
            start: Starttid i millisekunder sedan epoch (valfritt)
            end: Sluttid i millisekunder sedan epoch (valfritt)
            limit: Maximalt antal positioner att h√§mta (standard: 50)

        Returns:
            Lista med PositionHistory-objekt
        """
        try:
            endpoint = "auth/r/positions/audit"

            # Skapa payload med filter
            payload = {"id": symbol}
            if start:
                payload["start"] = start
            if end:
                payload["end"] = end
            if limit:
                payload["limit"] = limit

            headers = build_auth_headers(endpoint, payload)

            async with httpx.AsyncClient() as client:
                logger.info(
                    f"üåê REST API: H√§mtar positionsrevision f√∂r {symbol} fr√•n {self.base_url}/{endpoint}"
                )
                response = await client.post(
                    f"{self.base_url}/{endpoint}", headers=headers, json=payload
                )
                response.raise_for_status()

                positions_data = response.json()
                logger.info(
                    f"‚úÖ REST API: H√§mtade {len(positions_data)} positionsrevisioner"
                )

                positions = [
                    PositionHistory.from_bitfinex_data(position)
                    for position in positions_data
                ]
                return positions

        except Exception as e:
            logger.error(f"Fel vid h√§mtning av positionsrevision: {e}")
            raise

    async def claim_position(self, position_id: str) -> Dict[str, Any]:
        """
        G√∂r anspr√•k p√• en position.

        Args:
            position_id: ID f√∂r positionen som ska g√∂ras anspr√•k p√•

        Returns:
            Svar fr√•n API:et
        """
        try:
            endpoint = "auth/w/position/claim"
            payload = {"id": position_id}
            headers = build_auth_headers(endpoint, payload)

            async with httpx.AsyncClient() as client:
                logger.info(f"üåê REST API: G√∂r anspr√•k p√• position {position_id}")
                response = await client.post(
                    f"{self.base_url}/{endpoint}", headers=headers, json=payload
                )
                response.raise_for_status()

                result = response.json()
                logger.info(
                    f"‚úÖ REST API: Anspr√•k p√• position {position_id} framg√•ngsrikt"
                )

                return result

        except Exception as e:
            logger.error(f"Fel vid anspr√•k p√• position: {e}")
            raise

    async def update_position_funding_type(
        self, symbol: str, funding_type: int
    ) -> Dict[str, Any]:
        """
        Uppdaterar finansieringstypen f√∂r en position.

        Args:
            symbol: Handelssymbol (t.ex. "tBTCUSD")
            funding_type: Finansieringstyp (0 f√∂r daily, 1 f√∂r term)

        Returns:
            Svar fr√•n API:et
        """
        try:
            endpoint = "auth/w/position/funding/type"
            payload = {"id": symbol, "type": funding_type}
            headers = build_auth_headers(endpoint, payload)

            async with httpx.AsyncClient() as client:
                logger.info(
                    f"üåê REST API: Uppdaterar finansieringstyp f√∂r position {symbol} till {funding_type}"
                )
                response = await client.post(
                    f"{self.base_url}/{endpoint}", headers=headers, json=payload
                )
                response.raise_for_status()

                result = response.json()
                logger.info(
                    f"‚úÖ REST API: Finansieringstyp f√∂r position {symbol} uppdaterad framg√•ngsrikt"
                )

                return result

        except Exception as e:
            logger.error(f"Fel vid uppdatering av finansieringstyp: {e}")
            raise


# Skapa en global instans av PositionsHistoryService
positions_history_service = PositionsHistoryService()


# Exportera funktioner f√∂r enkel anv√§ndning
async def get_positions_history(
    start: Optional[int] = None, end: Optional[int] = None, limit: int = 50
) -> List[PositionHistory]:
    return await positions_history_service.get_positions_history(start, end, limit)


async def get_positions_snapshot() -> List[PositionHistory]:
    return await positions_history_service.get_positions_snapshot()


async def get_positions_audit(
    symbol: str, start: Optional[int] = None, end: Optional[int] = None, limit: int = 50
) -> List[PositionHistory]:
    return await positions_history_service.get_positions_audit(
        symbol, start, end, limit
    )


async def claim_position(position_id: str) -> Dict[str, Any]:
    return await positions_history_service.claim_position(position_id)


async def update_position_funding_type(
    symbol: str, funding_type: int
) -> Dict[str, Any]:
    return await positions_history_service.update_position_funding_type(
        symbol, funding_type
    )
