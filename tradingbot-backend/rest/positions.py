"""
Positions Service - TradingBot Backend

Denna modul hanterar positionsinformation fr√•n Bitfinex API.
Inkluderar funktioner f√∂r att h√§mta aktiva positioner och hantera positioner.
"""

import json
import httpx
from typing import Dict, List, Optional, Any
from pydantic import BaseModel

from config.settings import Settings
from rest.auth import build_auth_headers
from utils.logger import get_logger

logger = get_logger(__name__)

class Position(BaseModel):
    """Modell f√∂r en position."""
    symbol: str
    status: str  # "ACTIVE", "CLOSED"
    amount: float
    base_price: float
    funding: float = 0.0
    funding_type: int = 0  # 0 f√∂r daily, 1 f√∂r term
    profit_loss: Optional[float] = None
    profit_loss_percentage: Optional[float] = None
    liquidation_price: Optional[float] = None
    
    @property
    def is_long(self) -> bool:
        """Returnerar True om positionen √§r long."""
        return self.amount > 0
    
    @property
    def is_short(self) -> bool:
        """Returnerar True om positionen √§r short."""
        return self.amount < 0
    
    @classmethod
    def from_bitfinex_data(cls, data: List) -> 'Position':
        """Skapar en Position fr√•n Bitfinex API-data."""
        if len(data) < 6:
            raise ValueError(f"Ogiltig positionsdata: {data}")
        
        return cls(
            symbol=data[0],
            status=data[1],
            amount=float(data[2]),
            base_price=float(data[3]),
            funding=float(data[4]) if len(data) > 4 else 0.0,
            funding_type=int(data[5]) if len(data) > 5 else 0,
            profit_loss=float(data[6]) if len(data) > 6 else None,
            profit_loss_percentage=float(data[7]) if len(data) > 7 else None,
            liquidation_price=float(data[8]) if len(data) > 8 else None
        )

class PositionsService:
    """Service f√∂r att h√§mta och hantera positionsinformation fr√•n Bitfinex."""
    
    def __init__(self):
        self.settings = Settings()
        self.base_url = self.settings.BITFINEX_API_URL
    
    async def get_positions(self) -> List[Position]:
        """
        H√§mtar alla aktiva positioner fr√•n Bitfinex.
        
        Returns:
            Lista med Position-objekt
        """
        try:
            endpoint = "auth/r/positions"
            headers = build_auth_headers(endpoint)
            
            async with httpx.AsyncClient() as client:
                logger.info(f"üåê REST API: H√§mtar positioner fr√•n {self.base_url}/{endpoint}")
                response = await client.post(
                    f"{self.base_url}/{endpoint}",
                    headers=headers
                )
                response.raise_for_status()
                
                positions_data = response.json()
                logger.info(f"‚úÖ REST API: H√§mtade {len(positions_data)} positioner")
                
                positions = [Position.from_bitfinex_data(position) for position in positions_data]
                return positions
                
        except Exception as e:
            logger.error(f"Fel vid h√§mtning av positioner: {e}")
            raise
    
    async def get_position_by_symbol(self, symbol: str) -> Optional[Position]:
        """
        H√§mtar en specifik position baserat p√• symbol.
        
        Args:
            symbol: Handelssymbol (t.ex. "tBTCUSD")
            
        Returns:
            Position-objekt eller None om positionen inte hittas
        """
        positions = await self.get_positions()
        
        for position in positions:
            if position.symbol.lower() == symbol.lower():
                return position
                
        return None
    
    async def get_long_positions(self) -> List[Position]:
        """
        H√§mtar alla long-positioner.
        
        Returns:
            Lista med Position-objekt f√∂r long-positioner
        """
        positions = await self.get_positions()
        return [position for position in positions if position.is_long]
    
    async def get_short_positions(self) -> List[Position]:
        """
        H√§mtar alla short-positioner.
        
        Returns:
            Lista med Position-objekt f√∂r short-positioner
        """
        positions = await self.get_positions()
        return [position for position in positions if position.is_short]
    
    async def close_position(self, symbol: str) -> Dict[str, Any]:
        """
        St√§nger en position genom att skicka en motsatt order via Bitfinex API.
        
        Args:
            symbol: Handelssymbol f√∂r positionen som ska st√§ngas
            
        Returns:
            Svar fr√•n API:et
        """
        try:
            # H√§mta positionen f√∂rst f√∂r att veta hur mycket vi beh√∂ver st√§nga
            position = await self.get_position_by_symbol(symbol)
            if not position:
                raise ValueError(f"Ingen aktiv position hittad f√∂r symbol: {symbol}")
            
            # Anv√§nd Bitfinex API f√∂r att st√§nga positionen
            endpoint = "auth/w/position/close"
            payload = {"position_id": symbol}
            headers = build_auth_headers(endpoint, payload)
            
            async with httpx.AsyncClient() as client:
                logger.info(f"üåê REST API: St√§nger position f√∂r {symbol}")
                response = await client.post(
                    f"{self.base_url}/{endpoint}",
                    headers=headers,
                    json=payload
                )
                response.raise_for_status()
                
                result = response.json()
                logger.info(f"‚úÖ REST API: Position f√∂r {symbol} st√§ngd framg√•ngsrikt")
                
                return {
                    "success": True,
                    "message": f"Position f√∂r {symbol} st√§ngd",
                    "data": result
                }
                
        except Exception as e:
            logger.error(f"Fel vid st√§ngning av position: {e}")
            raise

# Skapa en global instans av PositionsService
positions_service = PositionsService()

# Exportera funktioner f√∂r enkel anv√§ndning
async def get_positions() -> List[Position]:
    return await positions_service.get_positions()

async def get_position_by_symbol(symbol: str) -> Optional[Position]:
    return await positions_service.get_position_by_symbol(symbol)

async def get_long_positions() -> List[Position]:
    return await positions_service.get_long_positions()

async def get_short_positions() -> List[Position]:
    return await positions_service.get_short_positions()

async def close_position(symbol: str) -> Dict[str, Any]:
    return await positions_service.close_position(symbol)
